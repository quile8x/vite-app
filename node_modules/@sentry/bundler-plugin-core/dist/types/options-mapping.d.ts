import { Logger } from "./sentry/logger";
import { IncludeEntry as UserIncludeEntry, Options as UserOptions } from "./types";
declare type RequiredInternalOptions = Required<Pick<UserOptions, "finalize" | "dryRun" | "debug" | "silent" | "cleanArtifacts" | "telemetry" | "injectReleasesMap" | "_experiments" | "injectRelease" | "uploadSourceMaps">>;
declare type OptionalInternalOptions = Partial<Pick<UserOptions, "org" | "project" | "authToken" | "url" | "vcsRemote" | "dist" | "errorHandler" | "setCommits" | "deploy" | "configFile" | "headers" | "sourcemaps">>;
declare type NormalizedInternalOptions = {
    releaseInjectionTargets: (string | RegExp)[] | ((filePath: string) => boolean) | undefined;
    include: InternalIncludeEntry[];
};
export declare type NormalizedOptions = RequiredInternalOptions & OptionalInternalOptions & NormalizedInternalOptions;
declare type RequiredInternalIncludeEntry = Required<Pick<UserIncludeEntry, "paths" | "ext" | "stripCommonPrefix" | "sourceMapReference" | "rewrite" | "validate">>;
declare type OptionalInternalIncludeEntry = Partial<Pick<UserIncludeEntry, "ignoreFile" | "urlPrefix" | "urlSuffix" | "stripPrefix">>;
export declare type InternalIncludeEntry = RequiredInternalIncludeEntry & OptionalInternalIncludeEntry & {
    ignore: string[];
};
export declare const SENTRY_SAAS_URL = "https://sentry.io";
export declare function normalizeUserOptions(userOptions: UserOptions): {
    include: InternalIncludeEntry[];
    org: string | undefined;
    project: string | undefined;
    release: string;
    url: string;
    finalize: boolean;
    cleanArtifacts: boolean;
    dryRun: boolean;
    debug: boolean;
    silent: boolean;
    telemetry: boolean;
    injectReleasesMap: boolean;
    injectRelease: boolean;
    uploadSourceMaps: boolean;
    sourcemaps: {
        assets: string | string[];
        ignore?: string | string[] | undefined;
    } | undefined;
    _experiments: {
        injectBuildInformation?: boolean | undefined;
    };
    authToken: string | undefined;
    headers: Record<string, string> | undefined;
    vcsRemote: string | undefined;
    setCommits: (({
        auto: true;
        repo?: undefined;
        commit?: undefined;
    } | {
        auto?: false | undefined;
        repo: string;
        commit: string;
    }) & {
        previousCommit?: string | undefined;
        ignoreMissing?: boolean | undefined;
        ignoreEmpty?: boolean | undefined;
    }) | undefined;
    deploy: {
        env: string;
        started?: string | number | undefined;
        finished?: string | number | undefined;
        time?: number | undefined;
        name?: string | undefined;
        url?: string | undefined;
    } | undefined;
    releaseInjectionTargets: (string | RegExp)[] | ((filePath: string) => boolean) | undefined;
    dist: string | undefined;
    errorHandler: ((err: Error) => void) | undefined;
    configFile: string | undefined;
};
/**
 * Validates a few combinations of options that are not checked by Sentry CLI.
 *
 * For all other options, we can rely on Sentry CLI to validate them. In fact,
 * we can't validate them in the plugin because Sentry CLI might pick up options from
 * its config file.
 *
 * @param options the internal options
 * @param logger the logger
 *
 * @returns `true` if the options are valid, `false` otherwise
 */
export declare function validateOptions(options: NormalizedOptions, logger: Logger): boolean;
export {};
