{
  "version": 3,
  "sources": ["../react-css-theme-switcher/src/utils.ts", "../react-css-theme-switcher/src/index.tsx"],
  "sourcesContent": ["export function findCommentNode(comment: string) {\n  const head = document.head;\n  for (let i = 0; i < head.childNodes.length; i++) {\n    const node = head.childNodes[i];\n    if (node.nodeType === 8 && node?.nodeValue?.trim() === comment) {\n      return node;\n    }\n  }\n  return null;\n}\n\nexport function isElement(o: any): Boolean {\n  return typeof HTMLElement === 'object'\n    ? o instanceof HTMLElement //DOM2\n    : o &&\n        typeof o === 'object' &&\n        o !== null &&\n        o.nodeType === 1 &&\n        typeof o.nodeName === 'string';\n}\n\nexport function arrayToObject(array: string[]): Record<any, string> {\n  const obj: Record<any, string> = {};\n  array.forEach(el => (obj[el] = el));\n  return obj;\n}\n\nexport function createLinkElement(attributes: Record<string, any>) {\n  const linkElement = document.createElement('link');\n\n  for (const [attribute, value] of Object.entries(attributes)) {\n    if (attribute === 'onload') {\n      linkElement.onload = attributes.onload;\n      continue;\n    }\n\n    // @ts-ignore\n    linkElement[attribute] = value;\n  }\n\n  return linkElement;\n}\n", "import * as React from 'react';\nimport {\n  findCommentNode,\n  arrayToObject,\n  createLinkElement,\n  isElement,\n} from './utils';\n\nenum Status {\n  idle = 'idle',\n  loading = 'loading',\n  loaded = 'loaded',\n}\n\ninterface IThemeSwitcherContext {\n  currentTheme: string | undefined;\n  themes: Record<any, string>;\n  switcher: ({ theme }: { theme: string }) => void;\n  status: Status;\n}\n\nconst ThemeSwitcherContext = React.createContext<\n  IThemeSwitcherContext | undefined\n>(undefined);\n\ninterface Props {\n  themeMap: Record<any, string>;\n  children?: React.ReactNode;\n  insertionPoint?: string | HTMLElement | null;\n  id?: string;\n  defaultTheme?: string;\n  attr?: string;\n}\n\nexport function ThemeSwitcherProvider({\n  themeMap,\n  insertionPoint,\n  defaultTheme,\n  id = 'current-theme-style',\n  attr = 'data-theme',\n  ...rest\n}: Props) {\n  const [status, setStatus] = React.useState<Status>(Status.idle);\n  const [currentTheme, setCurrentTheme] = React.useState<string>();\n\n  const insertStyle = React.useCallback(\n    (linkElement: HTMLElement): HTMLElement | void => {\n      if (insertionPoint || insertionPoint === null) {\n        const insertionPointElement = isElement(insertionPoint)\n          ? (insertionPoint as HTMLElement)\n          : findCommentNode(insertionPoint as string);\n\n        if (!insertionPointElement) {\n          console.warn(\n            `Insertion point '${insertionPoint}' does not exist. Be sure to add comment on head and that it matches the insertionPoint`\n          );\n          return document.head.appendChild(linkElement);\n        }\n\n        const { parentNode } = insertionPointElement;\n        if (parentNode) {\n          return parentNode.insertBefore(\n            linkElement,\n            insertionPointElement.nextSibling\n          );\n        }\n      } else {\n        return document.head.appendChild(linkElement);\n      }\n    },\n    [insertionPoint]\n  );\n\n  const switcher = React.useCallback(\n    ({ theme }: { theme: string }) => {\n      if (theme === currentTheme) return;\n\n      if (themeMap[theme]) {\n        setStatus(Status.loading);\n\n        const linkElement = createLinkElement({\n          type: 'text/css',\n          rel: 'stylesheet',\n          id: id + '_temp',\n          href: themeMap[theme],\n          onload: () => {\n            const previousStyle = document.getElementById(id);\n            if (previousStyle) {\n              previousStyle.remove();\n            }\n\n            const nextStyle = document.getElementById(id + '_temp');\n            if (nextStyle) {\n              nextStyle.setAttribute('id', id);\n            }\n            setStatus(Status.loaded);\n          },\n        });\n\n        insertStyle(linkElement);\n        setCurrentTheme(theme);\n      } else {\n        return console.warn('Could not find specified theme');\n      }\n\n      document.body.setAttribute(attr, theme);\n    },\n    [themeMap, insertStyle, attr, id, currentTheme]\n  );\n\n  React.useEffect(() => {\n    if (defaultTheme) {\n      switcher({ theme: defaultTheme });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [defaultTheme]);\n\n  React.useEffect(() => {\n    const themes = Object.keys(themeMap);\n\n    themes.map(theme => {\n      const themeAssetId = `theme-prefetch-${theme}`;\n      if (!document.getElementById(themeAssetId)) {\n        const stylePrefetch = document.createElement('link');\n        stylePrefetch.rel = 'prefetch';\n        stylePrefetch.type = 'text/css';\n        stylePrefetch.id = themeAssetId;\n        stylePrefetch.href = themeMap[theme];\n\n        insertStyle(stylePrefetch);\n      }\n      return '';\n    });\n  }, [themeMap, insertStyle]);\n\n  const value = React.useMemo(\n    () => ({\n      switcher,\n      status,\n      currentTheme,\n      themes: arrayToObject(Object.keys(themeMap)),\n    }),\n    [switcher, status, currentTheme, themeMap]\n  );\n\n  return <ThemeSwitcherContext.Provider value={value} {...rest} />;\n}\n\nexport function useThemeSwitcher() {\n  const context = React.useContext(ThemeSwitcherContext);\n  if (!context) {\n    throw new Error(\n      'To use `useThemeSwitcher`, component must be within a ThemeSwitcherProvider'\n    );\n  }\n  return context;\n}\n"],
  "mappings": "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",
  "names": []
}
