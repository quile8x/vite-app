{
  "version": 3,
  "sources": ["../toformat/toFormat.js", "../jsbi/lib/jsbi.ts", "../big.js/big.mjs", "../decimal.js-light/decimal.mjs", "../@uniswap/sdk/src/constants.ts", "../@uniswap/sdk/src/errors.ts", "../@uniswap/sdk/src/utils.ts", "../@uniswap/sdk/src/entities/currency.ts", "../@uniswap/sdk/src/entities/token.ts", "../@uniswap/sdk/src/entities/fractions/fraction.ts", "../@uniswap/sdk/src/entities/fractions/currencyAmount.ts", "../@uniswap/sdk/src/entities/fractions/tokenAmount.ts", "../@uniswap/sdk/src/entities/fractions/price.ts", "../@uniswap/sdk/src/entities/pair.ts", "../@uniswap/sdk/src/entities/route.ts", "../@uniswap/sdk/src/entities/fractions/percent.ts", "../@uniswap/sdk/src/entities/trade.ts", "../@uniswap/sdk/src/router.ts", "../@uniswap/sdk/src/fetcher.ts", "../src/hooks/dapps/useDexEthPrice.ts", "../src/hooks/dapps/useDexTokenList.ts", "../src/hooks/dapps/useResolveEnsName.ts", "../src/hooks/dapps/useResolveEnsAddress.ts"],
  "sourcesContent": ["/*\r\n *  toFormat v2.0.0\r\n *  Adds a toFormat instance method to big.js or decimal.js\r\n *  Copyright (c) 2017 Michael Mclaughlin\r\n *  MIT Licence\r\n */\r\n\r\n /*\r\n * Adds a `toFormat` method to `Ctor.prototype` and a `format` object to `Ctor`, where `Ctor` is\r\n * a big number constructor such as `Decimal` (decimal.js) or `Big` (big.js).\r\n */\r\nfunction toFormat(Ctor) {\r\n  'use strict';\r\n\r\n  /*\r\n   *  Returns a string representing the value of this big number in fixed-point notation to `dp`\r\n   *  decimal places using rounding mode `rm`, and formatted according to the properties of the\r\n   * `fmt`, `this.format` and `this.constructor.format` objects, in that order of precedence.\r\n   *\r\n   *  Example:\r\n   *\r\n   *  x = new Decimal('123456789.987654321')\r\n   *\r\n   *  // Add a format object to the constructor...\r\n   *  Decimal.format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ',',\r\n   *    groupSize: 3,\r\n   *    secondaryGroupSize: 0,\r\n   *    fractionGroupSeparator: '',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 0\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123,456,789.987654321\r\n   *  x.toFormat(2, 1);            // 123,456,789.98\r\n   *\r\n   *  // And/or add a format object to the big number itself...\r\n   *  x.format = {\r\n   *    decimalSeparator: ',',\r\n   *    groupSeparator: '',\r\n   *  }\r\n   *\r\n   *  x.toFormat();                // 123456789,987654321\r\n   *\r\n   *  format = {\r\n   *    decimalSeparator: '.',\r\n   *    groupSeparator: ' ',\r\n   *    groupSize: 3,\r\n   *    fractionGroupSeparator: ' ',     // '\\xA0' non-breaking space\r\n   *    fractionGroupSize : 5\r\n   *  }\r\n\r\n   *  // And/or pass a format object to the method call.\r\n   *  x.toFormat(format);          // 123 456 789.98765 4321\r\n   *  x.toFormat(4, format);       // 123 456 789.9877\r\n   *  x.toFormat(2, 1, format);    // 123 456 789.98\r\n   *\r\n   *  [dp] {number} Decimal places. Integer.\r\n   *  [rm] {number} Rounding mode. Integer, 0 to 8. (Ignored if using big.js.)\r\n   *  [fmt] {Object} A format object.\r\n   *\r\n   */\r\n  Ctor.prototype.toFormat = function toFormat(dp, rm, fmt) {\r\n\r\n    if (!this.e && this.e !== 0) return this.toString();   // Infinity/NaN\r\n\r\n    var arr, g1, g2, i,\r\n      u,                             // undefined\r\n      nd,                            // number of integer digits\r\n      intd,                          // integer digits\r\n      intp,                          // integer part\r\n      fracp,                         // fraction part\r\n      dsep,                          // decimalSeparator\r\n      gsep,                          // groupSeparator\r\n      gsize,                         // groupSize\r\n      sgsize,                        // secondaryGroupSize\r\n      fgsep,                         // fractionGroupSeparator\r\n      fgsize,                        // fractionGroupSize\r\n      tfmt = this.format || {},\r\n      cfmt = this.constructor.format || {};\r\n\r\n    if (dp != u) {\r\n      if (typeof dp == 'object') {\r\n        fmt = dp;\r\n        dp = u;\r\n      } else if (rm != u) {\r\n        if (typeof rm == 'object') {\r\n          fmt = rm;\r\n          rm = u;\r\n        } else if (typeof fmt != 'object') {\r\n          fmt = {};\r\n        }\r\n      } else {\r\n        fmt = {};\r\n      }\r\n    } else {\r\n      fmt = {};\r\n    }\r\n\r\n    arr = this.toFixed(dp, rm).split('.');\r\n    intp = arr[0];\r\n    fracp = arr[1];\r\n    intd = this.s < 0 ? intp.slice(1) : intp;\r\n    nd = intd.length;\r\n\r\n    dsep = fmt.decimalSeparator;\r\n    if (dsep == u) {\r\n      dsep = tfmt.decimalSeparator;\r\n      if (dsep == u) {\r\n        dsep = cfmt.decimalSeparator;\r\n        if (dsep == u) dsep = '.';\r\n      }\r\n    }\r\n\r\n    gsep = fmt.groupSeparator;\r\n    if (gsep == u) {\r\n      gsep = tfmt.groupSeparator;\r\n      if (gsep == u) gsep = cfmt.groupSeparator;\r\n    }\r\n\r\n    if (gsep) {\r\n      gsize = fmt.groupSize;\r\n      if (gsize == u) {\r\n        gsize = tfmt.groupSize;\r\n        if (gsize == u) {\r\n          gsize = cfmt.groupSize;\r\n          if (gsize == u) gsize = 0;\r\n        }\r\n      }\r\n\r\n      sgsize = fmt.secondaryGroupSize;\r\n      if (sgsize == u) {\r\n        sgsize = tfmt.secondaryGroupSize;\r\n        if (sgsize == u) {\r\n          sgsize = cfmt.secondaryGroupSize;\r\n          if (sgsize == u) sgsize = 0;\r\n        }\r\n      }\r\n\r\n      if (sgsize) {\r\n        g1 = +sgsize;\r\n        g2 = +gsize;\r\n        nd -= g2;\r\n      } else {\r\n        g1 = +gsize;\r\n        g2 = +sgsize;\r\n      }\r\n\r\n      if (g1 > 0 && nd > 0) {\r\n        i = nd % g1 || g1;\r\n        intp = intd.substr(0, i);\r\n        for (; i < nd; i += g1) intp += gsep + intd.substr(i, g1);\r\n        if (g2 > 0) intp += gsep + intd.slice(i);\r\n        if (this.s < 0) intp = '-' + intp;\r\n      }\r\n    }\r\n\r\n    if (fracp) {\r\n      fgsep = fmt.fractionGroupSeparator;\r\n      if (fgsep == u) {\r\n        fgsep = tfmt.fractionGroupSeparator;\r\n        if (fgsep == u) fgsep = cfmt.fractionGroupSeparator;\r\n      }\r\n\r\n      if (fgsep) {\r\n        fgsize = fmt.fractionGroupSize;\r\n        if (fgsize == u) {\r\n          fgsize = tfmt.fractionGroupSize;\r\n          if (fgsize == u) {\r\n            fgsize = cfmt.fractionGroupSize;\r\n            if (fgsize == u) fgsize = 0;\r\n          }\r\n        }\r\n\r\n        fgsize = +fgsize;\r\n\r\n        if (fgsize) {\r\n          fracp = fracp.replace(new RegExp('\\\\d{' + fgsize + '}\\\\B', 'g'), '$&' + fgsep);\r\n        }\r\n      }\r\n\r\n      return intp + dsep + fracp;\r\n    } else {\r\n\r\n      return intp;\r\n    }\r\n  };\r\n\r\n  Ctor.format = {\r\n    decimalSeparator: '.',\r\n    groupSeparator: ',',\r\n    groupSize: 3,\r\n    secondaryGroupSize: 0,\r\n    fractionGroupSeparator: '',\r\n    fractionGroupSize: 0\r\n  };\r\n\r\n  return Ctor;\r\n}\r\n\r\nif (typeof module !== 'undefined' && module.exports) module.exports = toFormat;\r\n", null, "/*\r\n *  big.js v5.2.2\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  https://github.com/MikeMcl/big.js/LICENCE\r\n */\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n  // The default values below must be integers within the stated ranges.\r\n\r\n  /*\r\n   * The maximum number of decimal places (DP) of the results of operations involving division:\r\n   * div and sqrt, and pow with negative exponents.\r\n   */\r\nvar DP = 20,          // 0 to MAX_DP\r\n\r\n  /*\r\n   * The rounding mode (RM) used when rounding to the above decimal places.\r\n   *\r\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n   *  3  Away from zero.                                  (ROUND_UP)\r\n   */\r\n  RM = 1,             // 0, 1, 2 or 3\r\n\r\n  // The maximum value of DP and Big.DP.\r\n  MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n  // The maximum magnitude of the exponent argument to the pow method.\r\n  MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n  /*\r\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n   * (JavaScript numbers: -7)\r\n   * -1000000 is the minimum recommended exponent value of a Big.\r\n   */\r\n  NE = -7,            // 0 to -1000000\r\n\r\n  /*\r\n   * The positive exponent (PE) at and above which toString returns exponential notation.\r\n   * (JavaScript numbers: 21)\r\n   * 1000000 is the maximum recommended exponent value of a Big.\r\n   * (This limit is not enforced or checked.)\r\n   */\r\n  PE = 21,            // 0 to 1000000\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n  // Error messages.\r\n  NAME = '[big.js] ',\r\n  INVALID = NAME + 'Invalid ',\r\n  INVALID_DP = INVALID + 'decimal places',\r\n  INVALID_RM = INVALID + 'rounding mode',\r\n  DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n  // The shared prototype object.\r\n  P = {},\r\n  UNDEFINED = void 0,\r\n  NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n/*\r\n * Create and return a Big constructor.\r\n *\r\n */\r\nfunction _Big_() {\r\n\r\n  /*\r\n   * The Big constructor and exported function.\r\n   * Create and return a new instance of a Big number object.\r\n   *\r\n   * n {number|string|Big} A numeric value.\r\n   */\r\n  function Big(n) {\r\n    var x = this;\r\n\r\n    // Enable constructor usage without new.\r\n    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n    // Duplicate.\r\n    if (n instanceof Big) {\r\n      x.s = n.s;\r\n      x.e = n.e;\r\n      x.c = n.c.slice();\r\n    } else {\r\n      parse(x, n);\r\n    }\r\n\r\n    /*\r\n     * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\r\n     * points to Object.\r\n     */\r\n    x.constructor = Big;\r\n  }\r\n\r\n  Big.prototype = P;\r\n  Big.DP = DP;\r\n  Big.RM = RM;\r\n  Big.NE = NE;\r\n  Big.PE = PE;\r\n  Big.version = '5.2.2';\r\n\r\n  return Big;\r\n}\r\n\r\n\r\n/*\r\n * Parse the number or string value passed to a Big constructor.\r\n *\r\n * x {Big} A Big number instance.\r\n * n {number|string} A numeric value.\r\n */\r\nfunction parse(x, n) {\r\n  var e, i, nl;\r\n\r\n  // Minus zero?\r\n  if (n === 0 && 1 / n < 0) n = '-0';\r\n  else if (!NUMERIC.test(n += '')) throw Error(INVALID + 'number');\r\n\r\n  // Determine sign.\r\n  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n  // Decimal point?\r\n  if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = n.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +n.slice(i + 1);\r\n    n = n.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = n.length;\r\n  }\r\n\r\n  nl = n.length;\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n  if (i == nl) {\r\n\r\n    // Zero.\r\n    x.c = [x.e = 0];\r\n  } else {\r\n\r\n    // Determine trailing zeros.\r\n    for (; nl > 0 && n.charAt(--nl) == '0';);\r\n    x.e = e - i - 1;\r\n    x.c = [];\r\n\r\n    // Convert string to array of digits without leading/trailing zeros.\r\n    for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n * Called by stringify, P.div, P.round and P.sqrt.\r\n *\r\n * x {Big} The Big to round.\r\n * dp {number} Integer, 0 to MAX_DP inclusive.\r\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n * [more] {boolean} Whether the result of division was truncated.\r\n */\r\nfunction round(x, dp, rm, more) {\r\n  var xc = x.c,\r\n    i = x.e + dp + 1;\r\n\r\n  if (i < xc.length) {\r\n    if (rm === 1) {\r\n\r\n      // xc[i] is the digit after the digit that may be rounded up.\r\n      more = xc[i] >= 5;\r\n    } else if (rm === 2) {\r\n      more = xc[i] > 5 || xc[i] == 5 &&\r\n        (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\r\n    } else if (rm === 3) {\r\n      more = more || !!xc[0];\r\n    } else {\r\n      more = false;\r\n      if (rm !== 0) throw Error(INVALID_RM);\r\n    }\r\n\r\n    if (i < 1) {\r\n      xc.length = 1;\r\n\r\n      if (more) {\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        x.e = -dp;\r\n        xc[0] = 1;\r\n      } else {\r\n\r\n        // Zero.\r\n        xc[0] = x.e = 0;\r\n      }\r\n    } else {\r\n\r\n      // Remove any digits after the required decimal places.\r\n      xc.length = i--;\r\n\r\n      // Round up?\r\n      if (more) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up.\r\n        for (; ++xc[i] > 9;) {\r\n          xc[i] = 0;\r\n          if (!i--) {\r\n            ++x.e;\r\n            xc.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xc.length; !xc[--i];) xc.pop();\r\n    }\r\n  } else if (rm < 0 || rm > 3 || rm !== ~~rm) {\r\n    throw Error(INVALID_RM);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a string representing the value of Big x in normal or exponential notation.\r\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n *\r\n * x {Big}\r\n * id? {number} Caller id.\r\n *         1 toExponential\r\n *         2 toFixed\r\n *         3 toPrecision\r\n *         4 valueOf\r\n * n? {number|undefined} Caller's argument.\r\n * k? {number|undefined}\r\n */\r\nfunction stringify(x, id, n, k) {\r\n  var e, s,\r\n    Big = x.constructor,\r\n    z = !x.c[0];\r\n\r\n  if (n !== UNDEFINED) {\r\n    if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\r\n      throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\r\n    }\r\n\r\n    x = new Big(x);\r\n\r\n    // The index of the digit that may be rounded up.\r\n    n = k - x.e;\r\n\r\n    // Round?\r\n    if (x.c.length > ++k) round(x, n, Big.RM);\r\n\r\n    // toFixed: recalculate k as x.e may have changed if value rounded up.\r\n    if (id == 2) k = x.e + n + 1;\r\n\r\n    // Append zeros?\r\n    for (; x.c.length < k;) x.c.push(0);\r\n  }\r\n\r\n  e = x.e;\r\n  s = x.c.join('');\r\n  n = s.length;\r\n\r\n  // Exponential notation?\r\n  if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\r\n    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n  // Normal notation.\r\n  } else if (e < 0) {\r\n    for (; ++e;) s = '0' + s;\r\n    s = '0.' + s;\r\n  } else if (e > 0) {\r\n    if (++e > n) for (e -= n; e--;) s += '0';\r\n    else if (e < n) s = s.slice(0, e) + '.' + s.slice(e);\r\n  } else if (n > 1) {\r\n    s = s.charAt(0) + '.' + s.slice(1);\r\n  }\r\n\r\n  return x.s < 0 && (!z || id == 4) ? '-' + s : s;\r\n}\r\n\r\n\r\n// Prototype/instance methods\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the absolute value of this Big.\r\n */\r\nP.abs = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return 1 if the value of this Big is greater than the value of Big y,\r\n *       -1 if the value of this Big is less than the value of Big y, or\r\n *        0 if they have the same value.\r\n*/\r\nP.cmp = function (y) {\r\n  var isneg,\r\n    x = this,\r\n    xc = x.c,\r\n    yc = (y = new x.constructor(y)).c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  isneg = i < 0;\r\n\r\n  // Compare exponents.\r\n  if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = -1; ++i < j;) {\r\n    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.div = function (y) {\r\n  var x = this,\r\n    Big = x.constructor,\r\n    a = x.c,                  // dividend\r\n    b = (y = new Big(y)).c,   // divisor\r\n    k = x.s == y.s ? 1 : -1,\r\n    dp = Big.DP;\r\n\r\n  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) throw Error(INVALID_DP);\r\n\r\n  // Divisor is zero?\r\n  if (!b[0]) throw Error(DIV_BY_ZERO);\r\n\r\n  // Dividend is 0? Return +-0.\r\n  if (!a[0]) return new Big(k * 0);\r\n\r\n  var bl, bt, n, cmp, ri,\r\n    bz = b.slice(),\r\n    ai = bl = b.length,\r\n    al = a.length,\r\n    r = a.slice(0, bl),   // remainder\r\n    rl = r.length,\r\n    q = y,                // quotient\r\n    qc = q.c = [],\r\n    qi = 0,\r\n    d = dp + (q.e = x.e - y.e) + 1;    // number of digits of the result\r\n\r\n  q.s = k;\r\n  k = d < 0 ? 0 : d;\r\n\r\n  // Create version of divisor with leading zero.\r\n  bz.unshift(0);\r\n\r\n  // Add zeros to make remainder as long as divisor.\r\n  for (; rl++ < bl;) r.push(0);\r\n\r\n  do {\r\n\r\n    // n is how many times the divisor goes into current remainder.\r\n    for (n = 0; n < 10; n++) {\r\n\r\n      // Compare divisor and remainder.\r\n      if (bl != (rl = r.length)) {\r\n        cmp = bl > rl ? 1 : -1;\r\n      } else {\r\n        for (ri = -1, cmp = 0; ++ri < bl;) {\r\n          if (b[ri] != r[ri]) {\r\n            cmp = b[ri] > r[ri] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // If divisor < remainder, subtract divisor from remainder.\r\n      if (cmp < 0) {\r\n\r\n        // Remainder can't be more than 1 digit longer than divisor.\r\n        // Equalise lengths using divisor with extra leading zero?\r\n        for (bt = rl == bl ? b : bz; rl;) {\r\n          if (r[--rl] < bt[rl]) {\r\n            ri = rl;\r\n            for (; ri && !r[--ri];) r[ri] = 9;\r\n            --r[ri];\r\n            r[rl] += 10;\r\n          }\r\n          r[rl] -= bt[rl];\r\n        }\r\n\r\n        for (; !r[0];) r.shift();\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Add the digit n to the result array.\r\n    qc[qi++] = cmp ? n : ++n;\r\n\r\n    // Update the remainder.\r\n    if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n    else r = [a[ai]];\r\n\r\n  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n  // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n  if (!qc[0] && qi != 1) {\r\n\r\n    // There can't be more than one zero.\r\n    qc.shift();\r\n    q.e--;\r\n  }\r\n\r\n  // Round?\r\n  if (qi > d) round(q, dp, Big.RM, r[0] !== UNDEFINED);\r\n\r\n  return q;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n */\r\nP.eq = function (y) {\r\n  return !this.cmp(y);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n * false.\r\n */\r\nP.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.gte = function (y) {\r\n  return this.cmp(y) > -1;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n */\r\nP.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var i, j, t, xlty,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.plus(y);\r\n  }\r\n\r\n  var xc = x.c.slice(),\r\n    xe = x.e,\r\n    yc = y.c,\r\n    ye = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) {\r\n\r\n    // y is non-zero? x is non-zero? Or both are zero.\r\n    return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n  }\r\n\r\n  // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n  if (a = xe - ye) {\r\n\r\n    if (xlty = a < 0) {\r\n      a = -a;\r\n      t = xc;\r\n    } else {\r\n      ye = xe;\r\n      t = yc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (b = a; b--;) t.push(0);\r\n    t.reverse();\r\n  } else {\r\n\r\n    // Exponents equal. Check digit by digit.\r\n    j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n    for (a = b = 0; b < j; b++) {\r\n      if (xc[b] != yc[b]) {\r\n        xlty = xc[b] < yc[b];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // x < y? Point xc to the array of the bigger number.\r\n  if (xlty) {\r\n    t = xc;\r\n    xc = yc;\r\n    yc = t;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  /*\r\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n   * needs to start at yc.length.\r\n   */\r\n  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n  // Subtract yc from xc.\r\n  for (b = i; j > a;) {\r\n    if (xc[--j] < yc[j]) {\r\n      for (i = j; i && !xc[--i];) xc[i] = 9;\r\n      --xc[i];\r\n      xc[j] += 10;\r\n    }\r\n\r\n    xc[j] -= yc[j];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xc[--b] === 0;) xc.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xc[0] === 0;) {\r\n    xc.shift();\r\n    --ye;\r\n  }\r\n\r\n  if (!xc[0]) {\r\n\r\n    // n - n = +0\r\n    y.s = 1;\r\n\r\n    // Result must be zero.\r\n    xc = [ye = 0];\r\n  }\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n */\r\nP.mod = function (y) {\r\n  var ygtx,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  if (!y.c[0]) throw Error(DIV_BY_ZERO);\r\n\r\n  x.s = y.s = 1;\r\n  ygtx = y.cmp(x) == 1;\r\n  x.s = a;\r\n  y.s = b;\r\n\r\n  if (ygtx) return new Big(x);\r\n\r\n  a = Big.DP;\r\n  b = Big.RM;\r\n  Big.DP = Big.RM = 0;\r\n  x = x.div(y);\r\n  Big.DP = a;\r\n  Big.RM = b;\r\n\r\n  return this.minus(x.times(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n */\r\nP.plus = P.add = function (y) {\r\n  var t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.minus(y);\r\n  }\r\n\r\n  var xe = x.e,\r\n    xc = x.c,\r\n    ye = y.e,\r\n    yc = y.c;\r\n\r\n  // Either zero? y is non-zero? x is non-zero? Or both are zero.\r\n  if (!xc[0] || !yc[0]) return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n\r\n  xc = xc.slice();\r\n\r\n  // Prepend zeros to equalise exponents.\r\n  // Note: reverse faster than unshifts.\r\n  if (a = xe - ye) {\r\n    if (a > 0) {\r\n      ye = xe;\r\n      t = yc;\r\n    } else {\r\n      a = -a;\r\n      t = xc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (; a--;) t.push(0);\r\n    t.reverse();\r\n  }\r\n\r\n  // Point xc to the longer array.\r\n  if (xc.length - yc.length < 0) {\r\n    t = yc;\r\n    yc = xc;\r\n    xc = t;\r\n  }\r\n\r\n  a = yc.length;\r\n\r\n  // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n  for (b = 0; a; xc[a] %= 10) b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n  if (b) {\r\n    xc.unshift(b);\r\n    ++ye;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (a = xc.length; xc[--a] === 0;) xc.pop();\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a Big whose value is the value of this Big raised to the power n.\r\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n * mode Big.RM.\r\n *\r\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */\r\nP.pow = function (n) {\r\n  var x = this,\r\n    one = new x.constructor(1),\r\n    y = one,\r\n    isneg = n < 0;\r\n\r\n  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) throw Error(INVALID + 'exponent');\r\n  if (isneg) n = -n;\r\n\r\n  for (;;) {\r\n    if (n & 1) y = y.times(x);\r\n    n >>= 1;\r\n    if (!n) break;\r\n    x = x.times(x);\r\n  }\r\n\r\n  return isneg ? one.div(y) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\r\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\r\n * multiple of 10**-dp.\r\n * If dp is not specified, round to 0 decimal places.\r\n * If rm is not specified, use Big.RM.\r\n *\r\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n */\r\nP.round = function (dp, rm) {\r\n  var Big = this.constructor;\r\n  if (dp === UNDEFINED) dp = 0;\r\n  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) throw Error(INVALID_DP);\r\n  return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.sqrt = function () {\r\n  var r, c, t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    s = x.s,\r\n    e = x.e,\r\n    half = new Big(0.5);\r\n\r\n  // Zero?\r\n  if (!x.c[0]) return new Big(x);\r\n\r\n  // Negative?\r\n  if (s < 0) throw Error(NAME + 'No square root');\r\n\r\n  // Estimate.\r\n  s = Math.sqrt(x + '');\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n  if (s === 0 || s === 1 / 0) {\r\n    c = x.c.join('');\r\n    if (!(c.length + e & 1)) c += '0';\r\n    s = Math.sqrt(c);\r\n    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n    r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n  } else {\r\n    r = new Big(s);\r\n  }\r\n\r\n  e = r.e + (Big.DP += 4);\r\n\r\n  // Newton-Raphson iteration.\r\n  do {\r\n    t = r;\r\n    r = half.times(t.plus(x.div(t)));\r\n  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n  return round(r, Big.DP -= 4, Big.RM);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big times the value of Big y.\r\n */\r\nP.times = P.mul = function (y) {\r\n  var c,\r\n    x = this,\r\n    Big = x.constructor,\r\n    xc = x.c,\r\n    yc = (y = new Big(y)).c,\r\n    a = xc.length,\r\n    b = yc.length,\r\n    i = x.e,\r\n    j = y.e;\r\n\r\n  // Determine sign of result.\r\n  y.s = x.s == y.s ? 1 : -1;\r\n\r\n  // Return signed 0 if either 0.\r\n  if (!xc[0] || !yc[0]) return new Big(y.s * 0);\r\n\r\n  // Initialise exponent of result as x.e + y.e.\r\n  y.e = i + j;\r\n\r\n  // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n  if (a < b) {\r\n    c = xc;\r\n    xc = yc;\r\n    yc = c;\r\n    j = a;\r\n    a = b;\r\n    b = j;\r\n  }\r\n\r\n  // Initialise coefficient array of result with zeros.\r\n  for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n  // Multiply.\r\n\r\n  // i is initially xc.length.\r\n  for (i = b; i--;) {\r\n    b = 0;\r\n\r\n    // a is yc.length.\r\n    for (j = a + i; j > i;) {\r\n\r\n      // Current sum of products at this digit position, plus carry.\r\n      b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n      c[j--] = b % 10;\r\n\r\n      // carry\r\n      b = b / 10 | 0;\r\n    }\r\n\r\n    c[j] = (c[j] + b) % 10;\r\n  }\r\n\r\n  // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n  if (b) ++y.e;\r\n  else c.shift();\r\n\r\n  // Remove trailing zeros.\r\n  for (i = c.length; !c[--i];) c.pop();\r\n  y.c = c;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n */\r\nP.toExponential = function (dp) {\r\n  return stringify(this, 1, dp, dp);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\r\n * places and rounded using Big.RM.\r\n *\r\n * dp? {number} Integer, 0 to MAX_DP inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n */\r\nP.toFixed = function (dp) {\r\n  return stringify(this, 2, dp, this.e + dp);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big rounded to sd significant digits using\r\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * sd {number} Integer, 1 to MAX_DP inclusive.\r\n */\r\nP.toPrecision = function (sd) {\r\n  return stringify(this, 3, sd, sd - 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Omit the sign for negative zero.\r\n */\r\nP.toString = function () {\r\n  return stringify(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Include the sign for negative zero.\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  return stringify(this, 4);\r\n};\r\n\r\n\r\n// Export\r\n\r\n\r\nexport var Big = _Big_();\r\n\r\nexport default Big;\r\n", "/*\r\n *  decimal.js-light v2.5.1\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js-light\r\n *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Expat Licence\r\n */\r\n\r\n\r\n// ------------------------------------  EDITABLE DEFAULTS  ------------------------------------- //\r\n\r\n\r\n// The limit on the value of `precision`, and on the value of the first argument to\r\n// `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\nvar MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  defaults = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed during run-time using `Decimal.config`.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,\r\n    // `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -MAX_E\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to MAX_E\r\n\r\n    // The natural logarithm of 10.\r\n    // 115 digits\r\n    LN10: '2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286'\r\n  },\r\n\r\n\r\n// ------------------------------------ END OF EDITABLE DEFAULTS -------------------------------- //\r\n\r\n\r\n  Decimal,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  exponentOutOfRange = decimalError + 'Exponent out of range: ',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  ONE,\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n  MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE),    // 1286742750677284\r\n\r\n  // Decimal.prototype object\r\n  P = {};\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue                       abs\r\n *  comparedTo                          cmp\r\n *  decimalPlaces                       dp\r\n *  dividedBy                           div\r\n *  dividedToIntegerBy                  idiv\r\n *  equals                              eq\r\n *  exponent\r\n *  greaterThan                         gt\r\n *  greaterThanOrEqualTo                gte\r\n *  isInteger                           isint\r\n *  isNegative                          isneg\r\n *  isPositive                          ispos\r\n *  isZero\r\n *  lessThan                            lt\r\n *  lessThanOrEqualTo                   lte\r\n *  logarithm                           log\r\n *  minus                               sub\r\n *  modulo                              mod\r\n *  naturalExponential                  exp\r\n *  naturalLogarithm                    ln\r\n *  negated                             neg\r\n *  plus                                add\r\n *  precision                           sd\r\n *  squareRoot                          sqrt\r\n *  times                               mul\r\n *  toDecimalPlaces                     todp\r\n *  toExponential\r\n *  toFixed\r\n *  toInteger                           toint\r\n *  toNumber\r\n *  toPower                             pow\r\n *  toPrecision\r\n *  toSignificantDigits                 tosd\r\n *  toString\r\n *  valueOf                             val\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s) x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this;\r\n\r\n  y = new x.constructor(y);\r\n\r\n  // Signs differ?\r\n  if (x.s !== y.s) return x.s || -y.s;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ x.s < 0 ? 1 : -1;\r\n\r\n  xdL = x.d.length;\r\n  ydL = y.d.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (x.d[i] !== y.d[i]) return x.d[i] > y.d[i] ^ x.s < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ x.s < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var x = this,\r\n    w = x.d.length - 1,\r\n    dp = (w - x.e) * LOG_BASE;\r\n\r\n  // Subtract the number of trailing zeros of the last word.\r\n  w = x.d[w];\r\n  if (w) for (; w % 10 == 0; w /= 10) dp--;\r\n\r\n  return dp < 0 ? 0 : dp;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, truncated to `precision` significant digits.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.idiv = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return round(divide(x, new Ctor(y), 0, 1), Ctor.precision);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return !this.cmp(y);\r\n};\r\n\r\n\r\n/*\r\n * Return the (base 10) exponent value of this Decimal (this.e is the base 10000000 exponent).\r\n *\r\n */\r\nP.exponent = function () {\r\n  return getBase10Exponent(this);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  return this.cmp(y) >= 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isint = function () {\r\n  return this.e > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isneg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.ispos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return this.s === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, truncated to\r\n * `precision` significant digits.\r\n *\r\n * If no base is specified, return log[10](x).\r\n *\r\n * log[base](x) = ln(x) / ln(base)\r\n *\r\n * The maximum error of the result is 1 ulp (unit in the last place).\r\n *\r\n * [base] {number|string|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var r,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    wpr = pr + 5;\r\n\r\n  // Default base is 10.\r\n  if (base === void 0) {\r\n    base = new Ctor(10);\r\n  } else {\r\n    base = new Ctor(base);\r\n\r\n    // log[-b](x) = NaN\r\n    // log[0](x)  = NaN\r\n    // log[1](x)  = NaN\r\n    if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + 'NaN');\r\n  }\r\n\r\n  // log[b](-x) = NaN\r\n  // log[b](0) = -Infinity\r\n  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n  // log[b](1) = 0\r\n  if (x.eq(ONE)) return new Ctor(0);\r\n\r\n  external = false;\r\n  r = divide(ln(x, wpr), ln(base, wpr), wpr);\r\n  external = true;\r\n\r\n  return round(r, pr);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var x = this;\r\n  y = new x.constructor(y);\r\n  return x.s == y.s ? subtract(x, y) : add(x, (y.s = -y.s, y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // x % 0 = NaN\r\n  if (!y.s) throw Error(decimalError + 'NaN');\r\n\r\n  // Return x if x is 0.\r\n  if (!x.s) return round(new Ctor(x), pr);\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n  q = divide(x, y, 0, 1).times(y);\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, truncated to `precision`\r\n * significant digits.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return exp(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * truncated to `precision` significant digits.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return ln(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s || 0;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var x = this;\r\n  y = new x.constructor(y);\r\n  return x.s == y.s ? add(x, y) : subtract(x, (y.s = -y.s, y));\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var e, sd, w,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  e = getBase10Exponent(x) + 1;\r\n  w = x.d.length - 1;\r\n  sd = w * LOG_BASE + 1;\r\n  w = x.d[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) sd--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = x.d[0]; w >= 10; w /= 10) sd++;\r\n  }\r\n\r\n  return z && e > sd ? e : sd;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, truncated to `precision`\r\n * significant digits.\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var e, n, pr, r, s, t, wpr,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative or zero?\r\n  if (x.s < 1) {\r\n    if (!x.s) return new Ctor(0);\r\n\r\n    // sqrt(-x) = NaN\r\n    throw Error(decimalError + 'NaN');\r\n  }\r\n\r\n  e = getBase10Exponent(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  pr = Ctor.precision;\r\n  s = wpr = pr + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, wpr + 2)).times(0.5);\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r.d)).slice(0, wpr)) {\r\n      n = n.slice(wpr - 3, wpr + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (s == wpr && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        round(t, pr + 1, 0);\r\n\r\n        if (t.times(t).eq(x)) {\r\n          r = t;\r\n          break;\r\n        }\r\n      } else if (n != '9999') {\r\n        break;\r\n      }\r\n\r\n      wpr += 4;\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return round(r, pr);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal times `y`, truncated to\r\n * `precision` significant digits.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  // Return 0 if either is 0.\r\n  if (!x.s || !y.s) return new Ctor(0);\r\n\r\n  y.s *= x.s;\r\n  e = x.e + y.e;\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = e;\r\n\r\n  return external ? round(y, Ctor.precision) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.todp = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return round(x, dp + getBase10Exponent(x) + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = toString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = round(new Ctor(x), dp + 1, rm);\r\n    str = toString(x, true, dp + 1);\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) return toString(x);\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  y = round(new Ctor(x), dp + getBase10Exponent(x) + 1, rm);\r\n  str = toString(y.abs(), false, dp + getBase10Exponent(y) + 1);\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isneg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.toInteger = P.toint = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return round(new Ctor(x), getBase10Exponent(x) + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`,\r\n * truncated to `precision` significant digits.\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * The maximum error is 1 ulp (unit in last place).\r\n *\r\n * y {number|string|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, sign, yIsInt,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    guard = 12,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // pow(x, 0) = 1\r\n  if (!y.s) return new Ctor(ONE);\r\n\r\n  x = new Ctor(x);\r\n\r\n  // pow(0, y > 0) = 0\r\n  // pow(0, y < 0) = Infinity\r\n  if (!x.s) {\r\n    if (y.s < 1) throw Error(decimalError + 'Infinity');\r\n    return x;\r\n  }\r\n\r\n  // pow(1, y) = 1\r\n  if (x.eq(ONE)) return x;\r\n\r\n  pr = Ctor.precision;\r\n\r\n  // pow(x, 1) = x\r\n  if (y.eq(ONE)) return round(x, pr);\r\n\r\n  e = y.e;\r\n  k = y.d.length - 1;\r\n  yIsInt = e >= k;\r\n  sign = x.s;\r\n\r\n  if (!yIsInt) {\r\n\r\n    // pow(x < 0, y non-integer) = NaN\r\n    if (sign < 0) throw Error(decimalError + 'NaN');\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = new Ctor(ONE);\r\n\r\n    // Max k of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    e = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (k % 2) {\r\n        r = r.times(x);\r\n        truncate(r.d, e);\r\n      }\r\n\r\n      k = mathfloor(k / 2);\r\n      if (k === 0) break;\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, e);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return y.s < 0 ? new Ctor(ONE).div(r) : round(r, pr);\r\n  }\r\n\r\n  // Result is negative if x is negative and the last digit of integer y is odd.\r\n  sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;\r\n\r\n  x.s = 1;\r\n  external = false;\r\n  r = y.times(ln(x, pr + guard));\r\n  external = true;\r\n  r = exp(r);\r\n  r.s = sign;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var e, str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    e = getBase10Exponent(x);\r\n    str = toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = round(new Ctor(x), sd, rm);\r\n    e = getBase10Exponent(x);\r\n    str = toString(x, sd <= e || e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toSignificantDigits = P.tosd = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return round(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = P.valueOf = P.val = P.toJSON = P[Symbol.for('nodejs.util.inspect.custom')] = function () {\r\n  var x = this,\r\n    e = getBase10Exponent(x),\r\n    Ctor = x.constructor;\r\n\r\n  return toString(x, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  add                 P.minus, P.plus\r\n *  checkInt32          P.todp, P.toExponential, P.toFixed, P.toPrecision, P.tosd\r\n *  digitsToString      P.log, P.sqrt, P.pow, toString, exp, ln\r\n *  divide              P.div, P.idiv, P.log, P.mod, P.sqrt, exp, ln\r\n *  exp                 P.exp, P.pow\r\n *  getBase10Exponent   P.exponent, P.sd, P.toint, P.sqrt, P.todp, P.toFixed, P.toPrecision,\r\n *                      P.toString, divide, round, toString, exp, ln\r\n *  getLn10             P.log, ln\r\n *  getZeroString       digitsToString, toString\r\n *  ln                  P.log, P.ln, P.pow, exp\r\n *  parseDecimal        Decimal\r\n *  round               P.abs, P.idiv, P.log, P.minus, P.mod, P.neg, P.plus, P.toint, P.sqrt,\r\n *                      P.times, P.todp, P.toExponential, P.toFixed, P.pow, P.toPrecision, P.tosd,\r\n *                      divide, getLn10, exp, ln\r\n *  subtract            P.minus, P.plus\r\n *  toString            P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf\r\n *  truncate            P.pow\r\n *\r\n *  Throws:             P.log, P.mod, P.sd, P.sqrt, P.pow,  checkInt32, divide, round,\r\n *                      getLn10, exp, ln, parseDecimal, Decimal, config\r\n */\r\n\r\n\r\nfunction add(x, y) {\r\n  var carry, d, e, i, k, len, xd, yd,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // If either is zero...\r\n  if (!x.s || !y.s) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!y.s) y = new Ctor(x);\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  k = x.e;\r\n  e = y.e;\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = e;\r\n\r\n  return external ? round(y, pr) : y;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % BASE | 0;\r\n      carry = temp / BASE | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * BASE + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, dp) {\r\n    var cmp, e, i, k, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either 0?\r\n    if (!x.s) return new Ctor(x);\r\n    if (!y.s) throw Error(decimalError + 'Division by zero');\r\n\r\n    e = x.e - y.e;\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    for (i = 0; yd[i] == (xd[i] || 0); ) ++i;\r\n    if (yd[i] > (xd[i] || 0)) --e;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n    } else if (dp) {\r\n      sd = pr + (getBase10Exponent(x) - getBase10Exponent(y)) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) return new Ctor(0);\r\n\r\n    // Convert precision in number of base 10 digits to base 1e7 digits.\r\n    sd = sd / LOG_BASE + 2 | 0;\r\n    i = 0;\r\n\r\n    // divisor < 1e7\r\n    if (yL == 1) {\r\n      k = 0;\r\n      yd = yd[0];\r\n      sd++;\r\n\r\n      // k is the carry.\r\n      for (; (i < xL || k) && sd--; i++) {\r\n        t = k * BASE + (xd[i] || 0);\r\n        qd[i] = t / yd | 0;\r\n        k = t % yd | 0;\r\n      }\r\n\r\n    // divisor >= 1e7\r\n    } else {\r\n\r\n      // Normalise xd and yd so highest order digit of yd is >= BASE/2\r\n      k = BASE / (yd[0] + 1) | 0;\r\n\r\n      if (k > 1) {\r\n        yd = multiplyInteger(yd, k);\r\n        xd = multiplyInteger(xd, k);\r\n        yL = yd.length;\r\n        xL = xd.length;\r\n      }\r\n\r\n      xi = yL;\r\n      rem = xd.slice(0, yL);\r\n      remL = rem.length;\r\n\r\n      // Add zeros to make remainder as long as divisor.\r\n      for (; remL < yL;) rem[remL++] = 0;\r\n\r\n      yz = yd.slice();\r\n      yz.unshift(0);\r\n      yd0 = yd[0];\r\n\r\n      if (yd[1] >= BASE / 2) ++yd0;\r\n\r\n      do {\r\n        k = 0;\r\n\r\n        // Compare divisor and remainder.\r\n        cmp = compare(yd, rem, yL, remL);\r\n\r\n        // If divisor < remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Calculate trial digit, k.\r\n          rem0 = rem[0];\r\n          if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);\r\n\r\n          // k will be how many times the divisor goes into the current remainder.\r\n          k = rem0 / yd0 | 0;\r\n\r\n          //  Algorithm:\r\n          //  1. product = divisor * trial digit (k)\r\n          //  2. if product > remainder: product -= divisor, k--\r\n          //  3. remainder -= product\r\n          //  4. if product was < remainder at 2:\r\n          //    5. compare new remainder and divisor\r\n          //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n          if (k > 1) {\r\n            if (k >= BASE) k = BASE - 1;\r\n\r\n            // product = divisor * trial digit.\r\n            prod = multiplyInteger(yd, k);\r\n            prodL = prod.length;\r\n            remL = rem.length;\r\n\r\n            // Compare product and remainder.\r\n            cmp = compare(prod, rem, prodL, remL);\r\n\r\n            // product > remainder.\r\n            if (cmp == 1) {\r\n              k--;\r\n\r\n              // Subtract divisor from product.\r\n              subtract(prod, yL < prodL ? yz : yd, prodL);\r\n            }\r\n          } else {\r\n\r\n            // cmp is -1.\r\n            // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n            // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n            if (k == 0) cmp = k = 1;\r\n            prod = yd.slice();\r\n          }\r\n\r\n          prodL = prod.length;\r\n          if (prodL < remL) prod.unshift(0);\r\n\r\n          // Subtract product from remainder.\r\n          subtract(rem, prod, remL);\r\n\r\n          // If product was < previous remainder.\r\n          if (cmp == -1) {\r\n            remL = rem.length;\r\n\r\n            // Compare divisor and new remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < new remainder, subtract divisor from remainder.\r\n            if (cmp < 1) {\r\n              k++;\r\n\r\n              // Subtract divisor from remainder.\r\n              subtract(rem, yL < remL ? yz : yd, remL);\r\n            }\r\n          }\r\n\r\n          remL = rem.length;\r\n        } else if (cmp === 0) {\r\n          k++;\r\n          rem = [0];\r\n        }    // if cmp === 1, k will be 0\r\n\r\n        // Add the next digit, k, to the result array.\r\n        qd[i++] = k;\r\n\r\n        // Update the remainder.\r\n        if (cmp && rem[0]) {\r\n          rem[remL++] = xd[xi] || 0;\r\n        } else {\r\n          rem = [xd[xi]];\r\n          remL = 1;\r\n        }\r\n\r\n      } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n    }\r\n\r\n    // Leading zero?\r\n    if (!qd[0]) qd.shift();\r\n\r\n    q.e = e;\r\n\r\n    return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` truncated to `sd`\r\n * significant digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n */\r\nfunction exp(x, sd) {\r\n  var denominator, guard, pow, sum, t, wpr,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  if (getBase10Exponent(x) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n\r\n  // exp(0) = 1\r\n  if (!x.s) return new Ctor(ONE);\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  while (x.abs().gte(0.1)) {\r\n    x = x.times(t);    // x = x / 2^5\r\n    k += 5;\r\n  }\r\n\r\n  // Estimate the precision increase necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(ONE);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = round(pow.times(x), wpr);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      while (k--) sum = round(sum.times(sum), wpr);\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(sum, pr)) : sum;\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(x) {\r\n  var e = x.e * LOG_BASE,\r\n    w = x.d[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for (; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n\r\n  if (sd > Ctor.LN10.sd()) {\r\n\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(decimalError + 'LN10 precision limit exceeded');\r\n  }\r\n\r\n  return round(new Ctor(Ctor.LN10), sd);\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` truncated to `sd` significant\r\n * digits.\r\n *\r\n *  ln(n) is non-terminating (n != 1)\r\n *\r\n */\r\nfunction ln(y, sd) {\r\n  var c, c0, denominator, e, numerator, sum, t, wpr, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // ln(-x) = NaN\r\n  // ln(0) = -Infinity\r\n  if (x.s < 1) throw Error(decimalError + (x.s ? 'NaN' : '-Infinity'));\r\n\r\n  // ln(1) = 0\r\n  if (x.eq(ONE)) return new Ctor(0);\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  if (x.eq(10)) {\r\n    if (sd == null) external = true;\r\n    return getLn10(Ctor, wpr);\r\n  }\r\n\r\n  wpr += guard;\r\n  Ctor.precision = wpr;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n  e = getBase10Exponent(x);\r\n\r\n  if (Math.abs(e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = getBase10Exponent(x);\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = ln(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n\r\n    Ctor.precision = pr;\r\n    return sd == null ? (external = true, round(x, pr)) : x;\r\n  }\r\n\r\n  // x is reduced to a value near 1.\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(ONE), x.plus(ONE), wpr);\r\n  x2 = round(x.times(x), wpr);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = round(numerator.times(x2), wpr);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr);\r\n\r\n      Ctor.precision = pr;\r\n      return sd == null ? (external = true, round(sum, pr)) : sum;\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48;) ++i;\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48;) --len;\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    e = e - i - 1;\r\n    x.e = mathfloor(e / LOG_BASE);\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external && (x.e > MAX_E || x.e < -MAX_E)) throw Error(exponentOutOfRange + e);\r\n  } else {\r\n\r\n    // Zero.\r\n    x.s = 0;\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits, using rounding mode `rm` if present (truncate otherwise).\r\n */\r\n function round(x, sd, rm) {\r\n  var i, j, k, n, rd, doRound, w, xdi,\r\n    xd = x.d;\r\n\r\n  // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n  // w: the word of xd which contains the rounding digit, a base 1e7 number.\r\n  // xdi: the index of w within xd.\r\n  // n: the number of digits of w.\r\n  // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n  // they had leading zeros)\r\n  // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n  // Get the length of the first word of the digits array xd.\r\n  for (n = 1, k = xd[0]; k >= 10; k /= 10) n++;\r\n  i = sd - n;\r\n\r\n  // Is the rounding digit in the first word of xd?\r\n  if (i < 0) {\r\n    i += LOG_BASE;\r\n    j = sd;\r\n    w = xd[xdi = 0];\r\n  } else {\r\n    xdi = Math.ceil((i + 1) / LOG_BASE);\r\n    k = xd.length;\r\n    if (xdi >= k) return x;\r\n    w = k = xd[xdi];\r\n\r\n    // Get the number of digits of w.\r\n    for (n = 1; k >= 10; k /= 10) n++;\r\n\r\n    // Get the index of rd within w.\r\n    i %= LOG_BASE;\r\n\r\n    // Get the index of rd within w, adjusted for leading zeros.\r\n    // The number of leading zeros of w is given by LOG_BASE - n.\r\n    j = i - LOG_BASE + n;\r\n  }\r\n\r\n  if (rm !== void 0) {\r\n    k = mathpow(10, n - j - 1);\r\n\r\n    // Get the rounding digit at index j of w.\r\n    rd = w / k % 10 | 0;\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k;\r\n\r\n    // The expression `w % mathpow(10, n - j - 1)` returns all the digits of w to the right of the\r\n    // digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression will give\r\n    // 714.\r\n\r\n    doRound = rm < 4\r\n      ? (rd || doRound) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n  }\r\n\r\n  if (sd < 1 || !xd[0]) {\r\n    if (doRound) {\r\n      k = getBase10Exponent(x);\r\n      xd.length = 1;\r\n\r\n      // Convert sd to decimal places.\r\n      sd = sd - k - 1;\r\n\r\n      // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n      xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n      x.e = mathfloor(-sd / LOG_BASE) || 0;\r\n    } else {\r\n      xd.length = 1;\r\n\r\n      // Zero.\r\n      xd[0] = x.e = x.s = 0;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n  // Remove excess digits.\r\n  if (i == 0) {\r\n    xd.length = xdi;\r\n    k = 1;\r\n    xdi--;\r\n  } else {\r\n    xd.length = xdi + 1;\r\n    k = mathpow(10, LOG_BASE - i);\r\n\r\n    // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n    // j > 0 means i > number of leading zeros of w.\r\n    xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k : 0;\r\n  }\r\n\r\n  if (doRound) {\r\n    for (;;) {\r\n\r\n      // Is the digit to be rounded up in the first word of xd?\r\n      if (xdi == 0) {\r\n        if ((xd[0] += k) == BASE) {\r\n          xd[0] = 1;\r\n          ++x.e;\r\n        }\r\n\r\n        break;\r\n      } else {\r\n        xd[xdi] += k;\r\n        if (xd[xdi] != BASE) break;\r\n        xd[xdi--] = 0;\r\n        k = 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n\r\n  if (external && (x.e > MAX_E || x.e < -MAX_E)) {\r\n    throw Error(exponentOutOfRange + getBase10Exponent(x));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction subtract(x, y) {\r\n  var d, e, i, j, k, len, xd, xe, xLTy, yd,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision;\r\n\r\n  // Return y negated if x is zero.\r\n  // Return x if y is zero and x is non-zero.\r\n  if (!x.s || !y.s) {\r\n    if (y.s) y.s = -y.s;\r\n    else y = new Ctor(x);\r\n    return external ? round(y, pr) : y;\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n\r\n  // x and y are non-zero numbers with the same sign.\r\n\r\n  e = y.e;\r\n  xe = x.e;\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of zeros\r\n    // needing to be prepended, but this can be avoided while still ensuring correct rounding by\r\n    // limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to xd if shorter.\r\n  // Don't add zeros to yd if shorter as subtraction only needs to start at yd length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(0);\r\n\r\n  y.d = xd;\r\n  y.e = e;\r\n\r\n  //return external && xd.length >= pr / LOG_BASE ? round(y, pr) : y;\r\n  return external ? round(y, pr) : y;\r\n}\r\n\r\n\r\nfunction toString(x, isExp, sd) {\r\n  var k,\r\n    e = getBase10Exponent(x),\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (e < 0 ? 'e' : 'e+') + e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  clone\r\n *  config/set\r\n */\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * value {number|string|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(value) {\r\n    var x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(value);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    // Duplicate.\r\n    if (value instanceof Decimal) {\r\n      x.s = value.s;\r\n      x.e = value.e;\r\n      x.d = (value = value.d) ? value.slice() : value;\r\n      return;\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n\r\n      // Reject Infinity/NaN.\r\n      if (value * 0 !== 0) {\r\n        throw Error(invalidArgument + value);\r\n      }\r\n\r\n      if (value > 0) {\r\n        x.s = 1;\r\n      } else if (value < 0) {\r\n        value = -value;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 0;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (value === ~~value && value < 1e7) {\r\n        x.e = 0;\r\n        x.d = [value];\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, value.toString());\r\n    } else if (typeof value !== 'string') {\r\n      throw Error(invalidArgument + value);\r\n    }\r\n\r\n    // Minus sign?\r\n    if (value.charCodeAt(0) === 45) {\r\n      value = value.slice(1);\r\n      x.s = -1;\r\n    } else {\r\n      x.s = 1;\r\n    }\r\n\r\n    if (isDecimal.test(value)) parseDecimal(x, value);\r\n    else throw Error(invalidArgument + value);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n\r\n  Decimal.clone = clone;\r\n  Decimal.config = Decimal.set = config;\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'LN10'];\r\n    for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') {\r\n    throw Error(decimalError + 'Object expected');\r\n  }\r\n  var i, p, v,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -1 / 0, 0,\r\n      'toExpPos', 0, 1 / 0\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if ((v = obj[p = ps[i]]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if ((v = obj[p = 'LN10']) !== void 0) {\r\n      if (v == Math.LN10) this[p] = new this(v);\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = clone(defaults);\r\n\r\n// Internal constant.\r\nONE = new Decimal(1);\r\n\r\nexport default Decimal;\r\n", "import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  G\u00D6RLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n", "// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n", "import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n", "import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n", "import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.G\u00D6RLI]: new Token(ChainId.G\u00D6RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n", "import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n", "import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n", "import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n", "import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n", "import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n", "import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n", "import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n", "import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n", "import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n", "import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n", "import { Token, WETH, Fetcher, Route } from '@uniswap/sdk';\nimport { useCallback, useState } from 'react';\n\nimport { useOnRepetition } from '~~/hooks';\nimport { TNetworkInfo } from '~~/models';\nimport { TEthersProvider } from '~~/models/providerTypes';\n\n/**\n * #### Summary\n * Get the Exchange price of ETH/USD (extrapolated from WETH/DAI) from uniswap\n *\n * #### Notes\n * - uses useOnRepetition, does not use context\n *\n * @category Hooks\n *\n * @param mainnetProvider\n * @param targetNetworkInfo\n * @param pollTime if >0 use polling, else use instead of onBlock event\n * @returns price in USD\n */\nexport const useDexEthPrice = (\n  mainnetProvider: TEthersProvider | undefined,\n  targetNetworkInfo?: TNetworkInfo,\n  pollTime: number = 0\n): number => {\n  const [price, setPrice] = useState(0);\n\n  const callFunc = useCallback(() => {\n    const getPrice = async (): Promise<void> => {\n      if (targetNetworkInfo?.price) {\n        setPrice(targetNetworkInfo.price);\n      } else if (mainnetProvider) {\n        const network = await mainnetProvider.getNetwork();\n\n        const DAI = new Token(network ? network.chainId : 1, '0x6B175474E89094C44Da98b954EedeAC495271d0F', 18);\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      } else {\n        setPrice(-1);\n        console.warn('useDexEthPrice: mainnetProvider or targetNetwork not given');\n      }\n    };\n\n    void getPrice();\n  }, [targetNetworkInfo?.price, mainnetProvider]);\n\n  useOnRepetition(callFunc, { pollTime, provider: mainnetProvider });\n\n  return price;\n};\n", "import { TokenInfo, TokenList } from '@uniswap/token-lists';\nimport axios from 'axios';\nimport { useState, useCallback, useEffect } from 'react';\n\nimport { useBlockNumberContext } from '~~/context';\n/**\n * #### Summary\n * Gets a tokenlist from uniswap ipfs tokenlist\n *\n * #### Note\n * - you can also point it to another URI\n *\n * @category Hooks\n *\n * @param tokenListUri\n * @param chainId optional, you can filter by a particular chainId\n * @returns (TokenInfo[]) from '@uniswap/token-lists'\n */\nexport const useDexTokenList = (\n  tokenListUri: string = 'https://gateway.ipfs.io/ipns/tokens.uniswap.org',\n  chainId?: number\n): TokenInfo[] => {\n  const [tokenList, setTokenList] = useState<TokenInfo[]>([]);\n  const blockNumber = useBlockNumberContext();\n\n  const callFunc = useCallback(async (): Promise<void> => {\n    try {\n      const tokenListResp: TokenList = (await axios(tokenListUri)).data as TokenList;\n      if (tokenListResp != null) {\n        let tokenInfo: TokenInfo[] = [];\n\n        if (chainId) {\n          tokenInfo = tokenListResp.tokens.filter((t: TokenInfo) => {\n            return t.chainId === chainId;\n          });\n        } else {\n          tokenInfo = tokenListResp.tokens;\n        }\n\n        setTokenList(tokenInfo);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }, [chainId, tokenListUri]);\n\n  useEffect(() => {\n    void callFunc();\n  }, [blockNumber, callFunc]);\n\n  return tokenList;\n};\n", "import { utils } from 'ethers';\nimport { useState, useEffect } from 'react';\n\nimport { TEthersProvider } from '~~/models';\n\n/**\n * @internal\n *\n * @param provider\n * @param address\n * @returns\n */\nconst lookupAddress = async (provider: TEthersProvider, address: string): Promise<string> => {\n  if (utils.isAddress(address)) {\n    try {\n      // Accuracy of reverse resolution is not enforced.\n      // We then manually ensure that the reported ens name resolves to address\n      const reportedName = await provider.lookupAddress(address);\n\n      const resolvedAddress = await provider.resolveName(reportedName);\n\n      if (address && utils.getAddress(address) === utils.getAddress(resolvedAddress)) {\n        return reportedName;\n      } else {\n        return utils.getAddress(address);\n      }\n    } catch (e) {\n      return utils.getAddress(address);\n    }\n  }\n  return '';\n};\n\n/**\n * #### Summary\n * Gets ENS name for given address\n *\n * @category Hooks\n *\n * @param mainnetProvider mainnet provider\n * @param address\n * @returns\n */\nexport const useResolveEnsName = (mainnetProvider: TEthersProvider | undefined, address: string): string => {\n  const [ensName, setEnsName] = useState(address);\n\n  useEffect(() => {\n    const storedData: any = window.localStorage.getItem('ensCache_' + address);\n    const cache = JSON.parse(storedData ?? '{}') as Record<string, any>;\n\n    if (cache && cache?.name && cache?.timestamp > Date.now()) {\n      setEnsName(cache?.name);\n    } else if (mainnetProvider) {\n      void lookupAddress(mainnetProvider, address).then((name) => {\n        if (name) {\n          setEnsName(name);\n          window.localStorage.setItem(\n            'ensCache_' + address,\n            JSON.stringify({\n              timestamp: Date.now() + 360000,\n              name,\n            })\n          );\n        }\n      });\n    }\n  }, [address, mainnetProvider]);\n\n  return ensName;\n};\n", "import { constants } from 'ethers';\nimport { useState, useEffect } from 'react';\n\nimport { TEthersProvider } from '~~/models';\n\n/**\n * #### Summary\n * Gets the address from an ENS name\n *\n * @category Hooks\n *\n * @param mainnetProvider mainnet provider\n * @param ensName\n * @returns\n */\nexport const useResolveEnsAddress = (mainnetProvider: TEthersProvider, ensName: string): string => {\n  const [address, setAddress] = useState<string>(constants.AddressZero);\n\n  useEffect(() => {\n    if (mainnetProvider) {\n      void mainnetProvider.resolveName(ensName).then((resolvedAddress: string) => setAddress(resolvedAddress));\n    }\n  }, [mainnetProvider, ensName]);\n\n  return address;\n};\n"],
  "mappings": "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",
  "names": []
}
