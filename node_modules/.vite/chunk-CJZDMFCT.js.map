{
  "version": 3,
  "sources": ["../src/hooks/useBalance.ts", "../src/hooks/useBlockNumber.ts", "../src/hooks/useBurnerSigner.ts", "../src/hooks/useContractExistsAtAddress.ts", "../src/hooks/useContractLoader.ts", "../src/hooks/useContractReader.ts", "../src/hooks/useEventListener.ts", "../src/hooks/useGasPrice.ts", "../src/hooks/useGetUserFromProviders.ts", "../src/hooks/useGetUserFromSigners.ts", "../src/hooks/useNonce.ts", "../src/hooks/useOnRepetition.ts", "../src/hooks/useTimestamp.ts", "../src/hooks/useUserAddress.ts", "../src/hooks/useWeb3Modal.ts", "../use-debounce/esm/useDebounce.js", "../use-debounce/esm/useDebouncedCallback.js"],
  "sourcesContent": ["import { BigNumber } from 'ethers';\nimport { useState, useCallback, useEffect } from 'react';\nimport { useIsMounted } from 'usehooks-ts';\n\nimport { useEthersContext, useBlockNumberContext } from '~~/context';\n\nconst zero = BigNumber.from(0);\n/**\n * #### Summary\n * Gets your balance in ETH for the given address.\n *\n * #### Notes\n * - updates triggered by {@link BlockNumberContext}\n * - uses the current provider {@link ethersProvider} from {@link useEthersContext}\n *\n * @category Hooks\n *\n * @param address\n * @returns current balance\n */\nexport const useBalance = (address: string | undefined): BigNumber => {\n  const isMounted = useIsMounted();\n  const { ethersProvider } = useEthersContext();\n  const blockNumber = useBlockNumberContext();\n  const [balance, setBalance] = useState<BigNumber>(zero);\n\n  const callFunc = useCallback(async (): Promise<void> => {\n    if (ethersProvider && address) {\n      const newBalance = await ethersProvider.getBalance(address);\n      if (isMounted()) {\n        setBalance((value) => {\n          if (value.toHexString() !== newBalance?.toHexString()) {\n            return newBalance;\n          }\n          return value;\n        });\n      }\n    }\n  }, [address, ethersProvider, isMounted]);\n\n  useEffect(() => {\n    void callFunc();\n  }, [blockNumber, callFunc]);\n\n  return balance;\n};\n", "import { useCallback, useState } from 'react';\nimport { useIsMounted } from 'usehooks-ts';\n\nimport { useOnRepetition } from '~~/hooks';\nimport { TEthersProvider } from '~~/models';\n\n/**\n * #### Summary\n * Get the current block number of the network. \u270B\uD83C\uDFFD @deprecated\n *\n * #### Notes\n * - \u270B\uD83C\uDFFD For app wide block number access use {@link BlockNumberContext} instead\n * - \u26A0 Deprecated\n * - uses the current ethersProvider from context\n *\n * @category Hooks\n *\n * @param provider\n * @param pollTime if > 0 uses polling, else it uses onBlock event\n * @returns block number\n */\nexport const useBlockNumber = (provider: TEthersProvider, pollTime: number = 0): number => {\n  const [blockNumber, setBlockNumber] = useState<number>(0);\n  const isMounted = useIsMounted();\n\n  const getBlockNumber = useCallback(async (): Promise<void> => {\n    const nextBlockNumber = await provider?.getBlockNumber();\n    if (isMounted() && provider != null) {\n      setBlockNumber((value) => {\n        if (value !== nextBlockNumber) {\n          return nextBlockNumber ?? 0;\n        }\n        return value;\n      });\n    }\n  }, [provider, isMounted]);\n\n  useOnRepetition(getBlockNumber, { provider: provider, pollTime });\n\n  return blockNumber;\n};\n", "import { BytesLike, ethers, Signer, Wallet } from 'ethers';\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { useDebounce } from 'use-debounce';\n\nimport { TEthersProvider } from '~~/models';\n\n/**\n * Is the private key valid\n * @internal\n * @param pk\n * @returns\n */\nconst isValidPk = (pk: BytesLike | undefined | null): boolean => {\n  return pk?.length === 64 || pk?.length === 66;\n};\n\n/**\n * Save the current burner private key to storage\n * @internal\n * @param incomingPK\n */\nconst saveBurnerKeyToStorage = (incomingPK: BytesLike): void => {\n  if (isValidPk(incomingPK)) {\n    const rawPK = incomingPK;\n    window.history.pushState({}, '', '/');\n    const currentPrivateKey = window.localStorage.getItem('metaPrivateKey');\n    if (currentPrivateKey && currentPrivateKey !== rawPK) {\n      window.localStorage.setItem(`metaPrivateKey_backup${Date.now()}`, currentPrivateKey);\n      console.log('\uD83D\uDD11 ...Saved Private Key');\n    }\n    window.localStorage.setItem('metaPrivateKey', rawPK.toString());\n  }\n};\n\n/**\n * Gets the current burner private key from storage\n * @internal\n * @returns\n */\nconst loadBurnerKeyFromStorage = (): string | null => {\n  const currentPrivateKey = window.localStorage.getItem('metaPrivateKey');\n  return currentPrivateKey;\n};\n\n/**\n * #### Summary\n * Return type of useBurnerSigner:\n *\n * #### Notes\n * - provides signer\n * - methods of interacting with burner signer\n * - methods to save and loadd signer from local storage\n *\n * @category Hooks\n */\nexport type TBurnerSigner = {\n  signer: Signer | undefined;\n  account: string | undefined;\n  /**\n   * save to local storage\n   */\n  saveBurner: () => void;\n  /**\n   * load from local storage, or if it doesn't exist, create\n   */\n  loadOrGenerateBurner: () => void;\n  /**\n   * create a new burner signer\n   */\n  generateBurnerSigner: () => void;\n  /**\n   * get your current burner pk\n   */\n  getBurnerPrivateKey: () => BytesLike | undefined;\n};\n\n/**\n * #### Summary\n * A hook that creates a burner signer/address and provides ways of interacting with\n * and updating the signer\n *\n * @category Hooks\n *\n * @param localProvider localhost provider\n * @returns IBurnerSigner\n */\nexport const useBurnerSigner = (localProvider: TEthersProvider | undefined): TBurnerSigner => {\n  const key = 'scaffold-eth-burner-privateKey';\n  const [privateKeyValue, setPrivateKey] = useState<BytesLike>();\n  const walletRef = useRef<Wallet>();\n  const creatingBurnerRef = useRef(false);\n  const [signer] = useDebounce(walletRef.current, 200, { trailing: true });\n  const [account] = useDebounce(walletRef.current?.address, 200, { trailing: true });\n\n  const setValue = (value: any): void => {\n    try {\n      setPrivateKey(value);\n      window.localStorage.setItem(key, value);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const storedKey = window.localStorage.getItem(key);\n    if (!storedKey) {\n      console.log('generating a new key');\n      const newWallet = ethers.Wallet.createRandom();\n      const newKey = newWallet.privateKey;\n      setValue(newKey);\n    } else {\n      setValue(storedKey);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (privateKeyValue && localProvider) {\n      const wallet = new ethers.Wallet(privateKeyValue);\n      const newSigner = wallet.connect(localProvider);\n      walletRef.current = newSigner;\n    }\n  }, [privateKeyValue, localProvider]);\n\n  /**\n   * if valid save burner key to storage\n   */\n  const saveToStorage = useCallback(() => {\n    console.log('\uD83D\uDD11 Incoming Private Key...');\n    if (privateKeyValue != null) {\n      saveBurnerKeyToStorage(privateKeyValue);\n    }\n  }, [privateKeyValue]);\n\n  /**\n   * create a new burnerkey\n   */\n  const generateBurnerSigner = useCallback(() => {\n    if (localProvider && !creatingBurnerRef.current) {\n      creatingBurnerRef.current = true;\n      console.log('\uD83D\uDD11 Create new burner wallet...');\n      const wallet = Wallet.createRandom();\n      setPrivateKey((_v) => {\n        console.log('\uD83D\uDCDD ...Set key');\n        creatingBurnerRef.current = false;\n        return wallet.privateKey;\n      });\n    } else {\n      console.log('\u26A0 Could not create burner wallet');\n    }\n  }, [localProvider]);\n\n  /**\n   * Load burner key from storage\n   */\n  const loadOrGenerateBurner = useCallback(() => {\n    if (setPrivateKey != null) {\n      const pk = loadBurnerKeyFromStorage();\n      if (pk && isValidPk(pk)) {\n        console.log('\uD83D\uDD11 ...Loaded Private Key');\n        setPrivateKey(pk);\n      } else {\n        generateBurnerSigner();\n      }\n    }\n  }, [generateBurnerSigner]);\n\n  const getBurnerPrivateKey = (): BytesLike | undefined => {\n    return privateKeyValue;\n  };\n\n  return {\n    signer,\n    account,\n    saveBurner: saveToStorage,\n    loadOrGenerateBurner,\n    generateBurnerSigner,\n    getBurnerPrivateKey,\n  };\n};\n", "import { Contract, utils } from 'ethers';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useIsMounted } from 'usehooks-ts';\n\nimport { useBlockNumberContext } from '~~/context';\n/**\n * #### Summary\n * Checks whether a contract exists on the blockchain\n *\n * #### Notes\n * - uses the ethers.Contract object's provider to access the network\n * - checks the contract address to see if the contract is deployed\n *\n * @category Hooks\n *\n * @param contract ethers.Contract class\n * @returns\n */\nexport const useContractExistsAtAddress = (contract: Contract | undefined): boolean => {\n  const isMounted = useIsMounted();\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\n  const blockNumber = useBlockNumberContext();\n\n  /**\n   * We can look at the blockchain and see what's stored at `contractAddress`\n   * If we find code then we know that a contract exists there.\n   * If we find nothing (0x0) then there is no contract deployed to that address\n   */\n  const callFunc = useCallback(async (): Promise<void> => {\n    if (!contract?.provider || !utils.isAddress(contract.address)) {\n      if (isMounted()) setContractIsDeployed(false);\n      return;\n    }\n\n    const bytecode = await contract.provider.getCode(contract.address);\n    if (isMounted()) setContractIsDeployed(bytecode !== '0x');\n  }, [contract, isMounted]);\n\n  useEffect(() => {\n    void callFunc();\n  }, [blockNumber, callFunc]);\n\n  return contractIsDeployed;\n};\n", "import { BaseContract } from 'ethers';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useIsMounted } from 'usehooks-ts';\n\nimport { useEthersContext } from '~~/context';\nimport {\n  TContractLoaderConfig,\n  TDeployedContractsJson,\n  TEthersProviderOrSigner,\n  TExternalContracts,\n  THardhatContractJson,\n} from '~~/models';\n\nexport const parseContractsInJson = (\n  contractList: TDeployedContractsJson,\n  chainId: number\n): Record<string, THardhatContractJson> => {\n  let combinedContracts: Record<string, THardhatContractJson> = {};\n\n  // combine partitioned contracts based on all the available and chain id.\n  if (contractList?.[chainId] != null) {\n    for (const network in contractList[chainId]) {\n      if (Object.prototype.hasOwnProperty.call(contractList[chainId], network)) {\n        const chainContracts = contractList?.[chainId]?.[network]?.contracts;\n        if (chainContracts != null) {\n          combinedContracts = {\n            ...combinedContracts,\n            ...chainContracts,\n          };\n        }\n      }\n    }\n  }\n\n  return combinedContracts;\n};\n/**\n * #### Summary\n *  Loads your contracts returns them and gives options to read values from contracts\n * or write transactions into them\n *\n * #### Notes\n * A optional providerOrSigner is needed to initalize the contract class\n * - if none is given, the context providerOrSigner is used if the chainId is the same.\n * - A signer is required for write contracts\n * Provider\n * - uses the current ethersProvider from context\n * ChainId\n * - if chain id is not given, it will use the chainId of the provider\n *\n * @category Hooks\n *\n * @param config\n * @param providerOrSigner (optional) used to initalize the contract class\n * @param configChainId (optional) can be used to target specific a particular network (such as mainnet) instead of the current provider\n * @returns Record of contractName:Contracts\n */\nexport const useContractLoader = (\n  config: TContractLoaderConfig = {},\n  providerOrSigner?: TEthersProviderOrSigner,\n  configChainId?: number\n): Record<string, BaseContract> => {\n  const isMounted = useIsMounted();\n  const { ethersProvider, chainId: contextChainId } = useEthersContext();\n  const chainId = configChainId ?? contextChainId;\n\n  const [contracts, setContracts] = useState<Record<string, BaseContract>>({});\n  const configDep: string = useMemo(\n    () => `${JSON.stringify(config ?? {})}, ${JSON.stringify({ chainId: chainId })}`,\n    [chainId, config]\n  );\n\n  const callFunc = useCallback(\n    (): void => {\n      if (ethersProvider && chainId && chainId > 0) {\n        try {\n          const contractList: TDeployedContractsJson = { ...(config.deployedContractsJson ?? {}) };\n          const externalContractList: TExternalContracts = {\n            ...(config.externalContracts ?? {}),\n          };\n          let combinedContracts: Record<string, THardhatContractJson> = parseContractsInJson(contractList, chainId);\n\n          // load external contracts if its the right chain\n          if (externalContractList?.[chainId] != null) {\n            combinedContracts = { ...combinedContracts, ...externalContractList[chainId].contracts };\n          }\n\n          const newContracts = Object.keys(combinedContracts).reduce(\n            (accumulator: Record<string, any>, contractName: string) => {\n              const address: string =\n                config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\n                  ? config.customAddresses[contractName]\n                  : combinedContracts[contractName].address;\n\n              // use providerOrSigner, or ethersContext provider or undefined if appropriate\n              const provider = providerOrSigner ?? (chainId === contextChainId ? ethersProvider : undefined);\n              accumulator[contractName] = new BaseContract(address, combinedContracts[contractName].abi, provider);\n              return accumulator;\n            },\n            {}\n          );\n\n          if (isMounted()) {\n            setContracts((currValue) => {\n              if (\n                currValue !== newContracts &&\n                (Object.keys(currValue).length > 0 || Object.keys(newContracts).length > 0)\n              ) {\n                console.log(`\uD83C\uDF00 loading contracts..`);\n                return newContracts;\n              }\n              return currValue;\n            });\n          }\n        } catch (e) {\n          console.log('\u26A0 useContractLoader, ERROR LOADING CONTRACTS!!', e, config);\n        }\n      }\n    },\n    // disable as configDep is used for dep instead of config\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [ethersProvider, configDep, providerOrSigner]\n  );\n\n  useEffect(() => {\n    void callFunc();\n  }, [callFunc, chainId]);\n\n  return contracts;\n};\n", "import { BaseContract, ContractFunction } from 'ethers';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useIsMounted } from 'usehooks-ts';\n\nimport { useEthersContext, useBlockNumberContext } from '~~/context';\nimport { TContractFunctionInfo } from '~~/models';\n\n/**\n * #### Summary\n * Enables you to call a contract function with arguments and receive the output.  You can use this to easily track of contract outputs in react states\n *\n * #### Notes\n * - uses the ethers.Contract object's provider to access the network\n * - formatter is a function that can change the format of the output\n *\n * @category Hooks\n *\n * @template OutputT return type\n * @param contract ethers.Contract class\n * @param contractFunctionInfo\n * @param formatter <OutputT> a function that can format the output\n * @param onChange callback with result as a parameter\n * @returns <OutputT>\n */\nexport const useContractReader = <OutputT>(\n  contract: BaseContract,\n  contractFunctionInfo: TContractFunctionInfo,\n  formatter?: (_value: OutputT | undefined) => OutputT,\n  onChange?: (_value?: OutputT) => void\n): OutputT | undefined => {\n  const isMounted = useIsMounted();\n  const [value, setValue] = useState<OutputT>();\n  const blockNumber = useBlockNumberContext();\n  const ethersContext = useEthersContext();\n\n  const callContractFunction = useCallback(async () => {\n    const contractFunction = contract.functions?.[contractFunctionInfo.functionName] as ContractFunction<OutputT>;\n    let result: OutputT | undefined = undefined;\n    try {\n      if (contractFunctionInfo.functionArgs && contractFunctionInfo.functionArgs.length > 0) {\n        result = await contractFunction?.(...contractFunctionInfo.functionArgs);\n      } else {\n        result = await contractFunction?.();\n      }\n    } catch (error: any) {\n      console.warn('Could not read from contract function', contractFunctionInfo);\n    }\n    return result;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contract, contractFunctionInfo.functionArgs, contractFunctionInfo.functionName]);\n\n  const contractProvider = contract?.provider;\n\n  const callFunc = useCallback(async () => {\n    const contractChainId = (await contractProvider?.getNetwork())?.chainId;\n    if (\n      callContractFunction != null &&\n      contractChainId === ethersContext.chainId &&\n      contractProvider != null &&\n      ethersContext?.chainId\n    ) {\n      try {\n        let newResult = await callContractFunction();\n        if (formatter != null) {\n          newResult = formatter(newResult);\n        }\n\n        if (isMounted()) {\n          setValue((value) => {\n            if (!Object.is(value, newResult) && JSON.stringify(value) !== JSON.stringify(newResult)) {\n              return newResult;\n            }\n            return value;\n          });\n          onChange?.(newResult);\n        }\n      } catch (error: any) {\n        console.warn(error);\n      }\n    }\n  }, [contractProvider, callContractFunction, ethersContext?.chainId, formatter, isMounted, onChange]);\n\n  useEffect(() => {\n    void callFunc();\n  }, [blockNumber, callFunc]);\n\n  return value;\n};\n", "import { Contract, EventFilter, Event } from 'ethers';\nimport { Result } from 'ethers/lib/utils';\nimport { useState, useEffect, useCallback } from 'react';\nimport { useIsMounted } from 'usehooks-ts';\n\nimport { TypedEvent } from '~~/models';\n\nconst getEventKey = (m: Event | TypedEvent<Result>): string => {\n  return `${m.transactionHash}_${m.logIndex}`;\n};\n/**\n * #### Summary\n * Tracks the events of associated with a contract\n *\n * #### Notes\n * - updates triggered through ethers event listener\n * - uses the current provider {@link ethersProvider} from {@link useEthersContext}\n *\n * @category Hooks\n *\n * @param contract ethers.Contract\n * @param eventName\n * @param startBlock\n * @returns\n */\nexport const useEventListener = (\n  contract: Contract | undefined,\n  eventName: string | EventFilter,\n  startBlock: number\n): TypedEvent<Result>[] => {\n  const isMounted = useIsMounted();\n\n  const [eventMap, setEventMap] = useState<TypedEvent<Result>[]>([]);\n\n  const queryEvents = useCallback(\n    (_listenerArgs: Event[]) => {\n      void (async (): Promise<void> => {\n        const result = await contract?.queryFilter(eventName as EventFilter, startBlock);\n        if (isMounted() && result) {\n          setEventMap((value) => {\n            if (JSON.stringify(value.map(getEventKey)) !== JSON.stringify(result.map(getEventKey))) {\n              return result as TypedEvent<Result>[];\n            } else {\n              return value;\n            }\n          });\n        }\n      })();\n    },\n    [contract, eventName, isMounted, startBlock]\n  );\n\n  // // get the events on initial load of hooks, without waiting for the next event\n  useEffect(() => {\n    if (contract?.queryFilter != null && setEventMap && (eventMap == null || eventMap?.length === 0) && queryEvents) {\n      queryEvents([]);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contract?.queryFilter]);\n\n  useEffect(() => {\n    try {\n      contract?.on(eventName, queryEvents);\n      return (): void => {\n        contract?.off(eventName, queryEvents);\n      };\n    } catch (e) {\n      console.log(e);\n    }\n  }, [queryEvents, contract, eventName]);\n\n  return eventMap;\n};\n", "import { FeeData } from '@ethersproject/providers';\nimport axios, { AxiosResponse } from 'axios';\nimport { utils } from 'ethers';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useDebounce } from 'use-debounce';\n\nimport { useEthersContext, useBlockNumberContext } from '~~/context';\nimport { TNetworkInfo } from '~~/models';\n\n/**\n * Preset speeds for Eth Gas Station API\n    - fast: Recommended fast(expected to be mined in < 2 minutes) gas price in x10 Gwei(divite by 10 to convert it to gwei)\n    - fastest: Recommended fastest(expected to be mined in < 30 seconds) gas price in x10 Gwei(divite by 10 to convert it to gwei)\n    - safeLow: Recommended safe(expected to be mined in < 30 minutes) gas price in x10 Gwei(divite by 10 to convert it to gwei)\n    - average: Recommended average(expected to be mined in < 5 minutes) gas price in x10 Gwei(divite by 10 to convert it to gwei)\n\n    @category Hooks\n */\nexport type TGasStationSpeed = 'fast' | 'fastest' | 'safeLow' | 'average';\n\n/**\n * #### Summary\n * Gets the gas price for the current network as gwei\n * - uses EthGasStation for mainnet\n * - uses ethers.estimateGas other networks\n * - can use currentNetworkInfo {@link TNetworkInfo.gasPrice} gasPrice as fallback\n *\n * #### Notes\n * - if the gas price is unknown it returns undefined\n * - updates triggered by {@link BlockNumberContext}\n * - uses the current provider {@link ethersProvider} from {@link useEthersContext}\n *\n * @category Hooks\n *\n * @param speed\n * @param currentNetworkInfo uses gasPrice as a fallback\n * @returns gas as gwei\n */\nexport const useGasPrice = (\n  chainId: number | undefined,\n  speed: TGasStationSpeed,\n  currentNetworkInfo?: TNetworkInfo\n): number | undefined => {\n  const { ethersProvider } = useEthersContext();\n  const blockNumber = useBlockNumberContext();\n  const [currentChainId, setCurrentChainId] = useState<number>();\n  const [gasPrice, setGasPrice] = useState<number | undefined>();\n  const [gasPriceDebounced] = useDebounce(gasPrice, 250, { trailing: true });\n\n  const callFunc = useCallback((): void => {\n    if (currentChainId !== chainId) {\n      setCurrentChainId(chainId);\n      setGasPrice(undefined);\n    }\n\n    if (!chainId) {\n      setGasPrice(undefined);\n    } else if (chainId === 1) {\n      if (navigator.onLine) {\n        const gweiFactor = 10;\n        axios\n          .get('https://ethgasstation.info/json/ethgasAPI.json')\n          .then((response: AxiosResponse<any>) => {\n            const result: Record<string, any> = (response.data as Record<string, any>) ?? {};\n            let newGasPrice: number | undefined = result[speed] / gweiFactor;\n            if (!newGasPrice) newGasPrice = result['fast'] / gweiFactor;\n            setGasPrice(newGasPrice);\n          })\n          .catch((error) => {\n            console.log('\u26A0 Could not get gas Price!', error);\n            setGasPrice(undefined);\n          });\n      }\n    } else if (ethersProvider) {\n      void ethersProvider\n        .getFeeData()\n        .then((fee: FeeData) => {\n          const price = fee.gasPrice ?? fee.maxFeePerGas;\n          if (price && price?.toBigInt() > 0) {\n            const result = parseInt(utils.formatUnits(price, 'gwei')) ?? 0;\n            setGasPrice(result);\n          } else if (currentNetworkInfo?.gasPrice) {\n            setGasPrice(currentNetworkInfo.gasPrice);\n          } else {\n            setGasPrice(undefined);\n          }\n        })\n        .catch((_error) => {\n          console.log('\u26A0 Could not estimate gas!');\n          if (currentNetworkInfo?.gasPrice) {\n            setGasPrice(currentNetworkInfo.gasPrice);\n          } else {\n            setGasPrice(undefined);\n          }\n        });\n    } else if (currentNetworkInfo?.gasPrice) {\n      setGasPrice(currentNetworkInfo.gasPrice);\n    } else {\n      setGasPrice(undefined);\n    }\n  }, [currentChainId, chainId, ethersProvider, currentNetworkInfo?.gasPrice, speed]);\n\n  useEffect(() => {\n    void callFunc();\n  }, [blockNumber, callFunc]);\n  return gasPriceDebounced;\n};\n", "import { ethers, Signer } from 'ethers';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { asyncSome } from '~~/functions/asyncSome';\nimport { parseProviderOrSigner } from '~~/functions/parseProviderOrSigner';\nimport { TEthersUser as TEthersUser, TEthersProvider } from '~~/models';\n\n/**\n * #### Summary\n * Gets the user {@link TEthersUser} from from the current provider or array of fallback providers\n *\n * #### Notes\n * - \uD83E\uDD1A\uD83C\uDFFD Consider using the context provider {@link ethersProvider}\n *\n * @category Hooks\n *\n * @param currentProvider\n * @param moreProviders\n * @returns\n */\nexport const useGetUserFromProviders = (\n  currentProvider: TEthersProvider | undefined,\n  ...moreProviders: TEthersProvider[]\n): TEthersUser => {\n  const [signer, setSigner] = useState<Signer>();\n  const [provider, setProvider] = useState<TEthersProvider>();\n  const [providerNetwork, setProviderNetwork] = useState<ethers.providers.Network>();\n  const [address, setAddress] = useState<string>();\n\n  const allProviders = [currentProvider, ...moreProviders].filter((f) => f != null) as TEthersProvider[];\n  const providerDeps: string = allProviders\n    .map((m) => {\n      return `${m?.network?.name}_${m?.network?.chainId}_${m?.connection.url}`;\n    })\n    .reduce((acc, value) => {\n      if (!acc) return value ?? '';\n      return acc + value ?? '';\n    }, '');\n\n  const callFunc = useCallback(\n    async (): Promise<void> => {\n      const foundSigner = await asyncSome(allProviders, async (provider) => {\n        const result = await parseProviderOrSigner(provider);\n        if (result.provider && result.providerNetwork && result.signer) {\n          setSigner(result.signer);\n          setProvider(result.provider);\n          setProviderNetwork(result.providerNetwork);\n          const address = await result.signer.getAddress();\n          setAddress(address);\n          return true;\n        }\n        return false;\n      });\n\n      if (!foundSigner && currentProvider != null) {\n        setProvider(currentProvider);\n        setSigner(undefined);\n        setProviderNetwork(undefined);\n        setAddress(undefined);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [providerDeps]\n  );\n\n  useEffect(() => {\n    void callFunc();\n  }, [callFunc]);\n\n  return { signer, provider, providerNetwork, address };\n};\n", "import { ethers, Signer, Wallet } from 'ethers';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { parseProviderOrSigner } from '~~/functions/parseProviderOrSigner';\nimport { TEthersUser, TEthersProvider } from '~~/models';\n\n/**\n * #### Summary\n * Gets the user {@link TEthersUser} for a signer or wallet\n *\n * @category Hooks\n *\n * @param signer\n * @returns\n */\nexport const useGetUserFromSigners = (signer: Signer | Wallet | undefined): TEthersUser => {\n  const [resolvedSigner, setResolvedSigner] = useState<Signer>();\n  const [provider, setProvider] = useState<TEthersProvider>();\n  const [providerNetwork, setProviderNetwork] = useState<ethers.providers.Network>();\n  const [address, setAddress] = useState<string>();\n\n  const callFunc = useCallback(async (): Promise<void> => {\n    const result = await parseProviderOrSigner(signer);\n    if (result.provider && result.providerNetwork && result.signer) {\n      setResolvedSigner(result.signer);\n      setProvider(result.provider);\n      setProviderNetwork(result.providerNetwork);\n      const address = await result.signer.getAddress();\n      setAddress(address);\n    } else {\n      setProvider(undefined);\n      setResolvedSigner(signer);\n      setProviderNetwork(undefined);\n      setAddress(undefined);\n    }\n  }, [signer]);\n\n  useEffect(() => {\n    void callFunc();\n  }, [callFunc]);\n\n  return { signer: resolvedSigner, provider, providerNetwork, address };\n};\n", "import { useCallback, useEffect, useState } from 'react';\nimport { useIsMounted } from 'usehooks-ts';\n\nimport { useEthersContext, useBlockNumberContext } from '~~/context';\n\n/**\n * #### Summary\n * Get the current nonce for the address provided\n *\n * #### Notes\n * - updates triggered by {@link BlockNumberContext}\n * - uses the current provider {@link ethersProvider} from {@link useEthersContext}\n *\n * @category Hooks\n *\n * @param address\n * @returns\n */\nexport const useNonce = (address: string): number => {\n  const isMounted = useIsMounted();\n  const { ethersProvider } = useEthersContext();\n  const blockNumber = useBlockNumberContext();\n\n  const [nonce, setNonce] = useState<number>(0);\n\n  const callFunc = useCallback(async (): Promise<void> => {\n    let nextNonce: number = 0;\n    try {\n      nextNonce = (await ethersProvider?.getTransactionCount(address)) ?? 0;\n    } catch {\n      // do nothing\n    }\n    if (isMounted()) {\n      setNonce((value) => {\n        if (nextNonce && value !== nextNonce && value < nextNonce) return nextNonce;\n        return value;\n      });\n    }\n  }, [address, ethersProvider, isMounted]);\n\n  useEffect(() => {\n    void callFunc();\n  }, [blockNumber, callFunc]);\n\n  return nonce;\n};\n", "import { useCallback, useEffect, useRef } from 'react';\r\n\r\nimport { TEthersProvider } from '~~/models';\r\n\r\nconst DEBUG = false;\r\n\r\n/**\r\n * Options for useOnRepetition\r\n */\r\ninterface IUseOnRepetitionOptions {\r\n  /**\r\n   * (number) :: if >0 use polling, else use instead of onBlock event.  the minimum polling time is 10s.\r\n   */\r\n  pollTime?: number;\r\n  /**\r\n   * (TEthersProvider)\r\n   */\r\n  provider?: TEthersProvider | undefined;\r\n  /**\r\n   * (boolean) :: invoke the callback after initialization\r\n   */\r\n  leadingTrigger?: boolean;\r\n}\r\n\r\n/**\r\n * #### Summary\r\n * A hook that will periodically invoke a callback.\r\n * It can use one of the two options to do so\r\n * - onBlock: the block event is used to invoke callback\r\n * - Polling: invoke the callback periodically via polling. The minimum time is 10s.\r\n *\r\n * #### Notes\r\n * The callback can be invoked once on leading edge when leadTrigger conditions are satisfied\r\n * - For example you may want to wait for the provider to initalize before first invocation.\r\n * - \uD83D\uDC69\uD83C\uDFFD\u200D\uD83C\uDFEB A provider is needed for onBlock.\r\n *\r\n * @category Hooks\r\n *\r\n * @param callback\r\n * @param options\r\n * @param args variable arguments for callback\r\n */\r\nexport const useOnRepetition = (\r\n  callback: (..._args: any[]) => void | Promise<void>,\r\n  options: IUseOnRepetitionOptions,\r\n  ...args: any[]\r\n): void => {\r\n  const isPolling = options?.pollTime != null && options.pollTime > 0;\r\n  const readyForEvents = options?.provider && !isPolling && options?.provider?.network?.chainId > 0;\r\n  const readyForLeadTrigger = (readyForEvents || isPolling) && options?.leadingTrigger;\r\n  const isFirstCall = useRef(true);\r\n\r\n  // created a strigified args to use for deps\r\n  const argDeps = JSON.stringify(args ?? []);\r\n\r\n  // create a callback for the input function\r\n  const callFunctionWithArgs = useCallback(() => {\r\n    if (DEBUG) console.log('create callback');\r\n    if (callback) {\r\n      if (args && args.length > 0) {\r\n        void callback(...args);\r\n      } else {\r\n        void callback();\r\n      }\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [callback, argDeps]);\r\n\r\n  // If event based, create a listener if we have a function & a provider\r\n  const listener = useCallback(\r\n    (_blockNumber: number): void => {\r\n      if (readyForEvents) callFunctionWithArgs();\r\n    },\r\n    [callFunctionWithArgs, readyForEvents]\r\n  );\r\n\r\n  // connect a listener to the network to listen for changes\r\n  useEffect(() => {\r\n    if (readyForEvents) {\r\n      options?.provider?.addListener?.('block', listener);\r\n    }\r\n\r\n    return (): void => {\r\n      options?.provider?.removeListener?.('block', listener);\r\n    };\r\n  }, [options.provider, readyForEvents, listener]);\r\n\r\n  // Set up the interval if its using polling\r\n  useEffect(() => {\r\n    const tick = (): void => {\r\n      if (DEBUG) console.log('polling: call function');\r\n      callFunctionWithArgs();\r\n    };\r\n\r\n    if (isPolling) {\r\n      const safePollTime = (options?.pollTime ?? 0) > 10000 ? options.pollTime : 10000;\r\n      const id = setInterval(tick, safePollTime);\r\n      return (): void => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [options.pollTime, isPolling, callFunctionWithArgs]);\r\n\r\n  // if the arguments have changed, reset the isFirstCall reference\r\n  useEffect(() => {\r\n    if (!isFirstCall.current) {\r\n      isFirstCall.current = true;\r\n    }\r\n  }, [argDeps]);\r\n\r\n  // trigger a first call to populate data.  Only if leadingTrigger is true\r\n  useEffect(() => {\r\n    if (readyForLeadTrigger && callFunctionWithArgs != null && isFirstCall?.current === true) {\r\n      isFirstCall.current = false;\r\n      callFunctionWithArgs();\r\n    }\r\n  }, [callFunctionWithArgs, readyForLeadTrigger]);\r\n};\r\n", "import { useState, useEffect, useCallback } from 'react';\nimport { useIsMounted } from 'usehooks-ts';\n\nimport { useBlockNumberContext, useEthersContext } from '~~/context';\n\n/**\n * #### Summary\n * Get the current timestamp from the latest block\n *\n * #### Notes\n * - updates triggered by {@link BlockNumberContext}\n * - uses the current provider {@link ethersProvider} from {@link useEthersContext}\n *\n * @category Hooks\n *\n * @param pollTime\n * @returns\n */\nexport const useTimestamp = (): number => {\n  const isMounted = useIsMounted();\n  const { ethersProvider } = useEthersContext();\n  const blockNumber = useBlockNumberContext();\n\n  const [timestamp, setTimestamp] = useState<number>(0);\n\n  const callFunc = useCallback(async (): Promise<void> => {\n    if (blockNumber != null) {\n      const block = await ethersProvider?.getBlock(blockNumber);\n      if (block?.timestamp != null) {\n        const nextTimestamp = block.timestamp;\n        if (isMounted()) setTimestamp(nextTimestamp);\n      }\n    }\n  }, [blockNumber, ethersProvider, isMounted]);\n\n  useEffect(() => {\n    void callFunc();\n  }, [blockNumber, callFunc]);\n\n  return timestamp;\n};\n", "import { useState, useEffect, useCallback } from 'react';\nimport { useIsMounted } from 'usehooks-ts';\n\nimport { useBlockNumberContext } from '~~/context';\nimport { signerHasNetwork } from '~~/functions';\nimport { TEthersSigner } from '~~/models';\n\n/**\n * #### Summary\n * Get the address from the signer\n *\n * @category Hooks\n *\n * @param signer\n * @returns\n */\nexport const useUserAddress = (signer: TEthersSigner | undefined): string | undefined => {\n  const isMounted = useIsMounted();\n  const [userAddress, setUserAddress] = useState<string>();\n  const blockNumber = useBlockNumberContext();\n\n  const callFunc = useCallback(async (): Promise<void> => {\n    if (signerHasNetwork(signer)) {\n      const address = await signer?.getAddress();\n      if (isMounted()) {\n        setUserAddress(address);\n      }\n    }\n  }, [isMounted, signer]);\n\n  useEffect(() => {\n    void callFunc();\n  }, [blockNumber, callFunc]);\n\n  return userAddress;\n};\n", "/* eslint-disable @typescript-eslint/no-unsafe-assignment */\r\nimport { Web3Provider } from '@ethersproject/providers';\r\nimport { useCallback, useEffect, useRef } from 'react';\r\nimport Web3Modal, { ICoreOptions, ThemeColors } from 'web3modal';\r\nimport '~~/helpers/__global';\r\n\r\nimport { TEthersProvider } from '~~/models';\r\nimport { const_web3DialogClosedByUser } from '~~/models/constants/common';\r\n\r\n/**\r\n * The current state of Web3Modal\r\n *\r\n * @category Hooks\r\n */\r\nexport type TWeb3ModalState = {\r\n  /**\r\n   * Is the modal initalizing\r\n   */\r\n  initializing: boolean;\r\n  /**\r\n   * A callback to open the modal\r\n   */\r\n  openWeb3ModalCallback: () => void;\r\n  /**\r\n   * A callback to close the modal\r\n   */\r\n  logoutOfWeb3ModalCallback: () => void;\r\n  /**\r\n   * A callback to change the modal theme\r\n   */\r\n  updateWeb3ModalThemeCallback: (theme: ThemeColors | string) => void;\r\n};\r\n/**\r\n * #### Summary\r\n * A hook that makes it easy to interact and use [web3Modal](https://github.com/Web3Modal/web3modal)\r\n * - provides callback to open, logout and update the modal theme\r\n *\r\n * #### Notes\r\n * - \uD83E\uDD1A\uD83C\uDFFD Consider using the context provider {@link ethersProvider} and {@link EthersModalConnector} instead.\r\n *\r\n * @category Hooks\r\n *\r\n * @param web3ModalConfig\r\n * @param setCurrentEthersProvider\r\n * @returns\r\n */\r\nexport const useWeb3Modal = (\r\n  web3ModalConfig: Partial<ICoreOptions>,\r\n  setCurrentEthersProvider: (newEthersProvider: TEthersProvider | undefined) => void\r\n): TWeb3ModalState => {\r\n  const web3ModalProviderRef = useRef<Web3Modal>();\r\n  const initalizingRef = useRef<boolean>();\r\n\r\n  /**\r\n   * initalize web3 object and save it to state\r\n   */\r\n  useEffect(() => {\r\n    if (!Web3Modal) {\r\n      throw 'Web3Modal is a peer dependancy to use this hook';\r\n    }\r\n    web3ModalProviderRef.current = new Web3Modal(web3ModalConfig ?? {});\r\n    initalizingRef.current = true;\r\n    setCurrentEthersProvider(undefined);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [web3ModalConfig]);\r\n\r\n  /**\r\n   * a callback to reload the page and clear cache\r\n   */\r\n  const reloadPage = useCallback(() => {\r\n    return (_param: any): void => {\r\n      web3ModalProviderRef.current?.cachedProvider &&\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 1);\r\n    };\r\n  }, []);\r\n\r\n  /**\r\n   * log out of web3modal provider\r\n   */\r\n  const logoutOfWeb3ModalCallback = useCallback(\r\n    (reload: boolean = true): void => {\r\n      initalizingRef.current = false;\r\n      setCurrentEthersProvider(undefined);\r\n      if (reload) {\r\n        reloadPage();\r\n      }\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [setCurrentEthersProvider]\r\n  );\r\n\r\n  /**\r\n   * the function that setups up and loads the web3modal\r\n   */\r\n  const loadWeb3Modal = useCallback(async () => {\r\n    try {\r\n      initalizingRef.current = true;\r\n      const provider = await web3ModalProviderRef.current?.connect();\r\n      setCurrentEthersProvider(new Web3Provider(provider, 'any'));\r\n\r\n      /* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call */\r\n      if (provider?.on) {\r\n        provider.on('chainChanged', (chainId: number) => {\r\n          console.log(`chain changed to ${chainId}! updating providers`);\r\n          setCurrentEthersProvider(new Web3Provider(provider, 'any'));\r\n        });\r\n\r\n        provider.on('accountsChanged', () => {\r\n          console.log(`account changed!`);\r\n          setCurrentEthersProvider(new Web3Provider(provider, 'any'));\r\n        });\r\n\r\n        // Subscribe to session disconnection\r\n        provider.on('disconnect', (code: any, reason: any) => {\r\n          console.log(code, reason);\r\n          void logoutOfWeb3ModalCallback();\r\n          setCurrentEthersProvider(undefined);\r\n        });\r\n      }\r\n      /* eslint-enable */\r\n    } catch (e) {\r\n      if ((e as string).includes(const_web3DialogClosedByUser)) {\r\n        console.log(e);\r\n      } else {\r\n        throw e;\r\n      }\r\n    } finally {\r\n      initalizingRef.current = false;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [setCurrentEthersProvider]);\r\n\r\n  /**\r\n   * On initalization, load modal\r\n   */\r\n  useEffect(() => {\r\n    if (web3ModalProviderRef.current?.cachedProvider) {\r\n      void loadWeb3Modal();\r\n    }\r\n  }, [loadWeb3Modal]);\r\n\r\n  /**\r\n   * a callback to open the modal\r\n   */\r\n  const openWeb3ModalCallback = useCallback(() => {\r\n    setCurrentEthersProvider(undefined);\r\n    web3ModalProviderRef.current?.clearCachedProvider();\r\n    void loadWeb3Modal();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [loadWeb3Modal]);\r\n\r\n  const updateWeb3ModalThemeCallback = useCallback((theme: ThemeColors | string) => {\r\n    web3ModalProviderRef.current?.updateTheme(theme);\r\n  }, []);\r\n\r\n  return {\r\n    initializing: initalizingRef.current ?? false,\r\n    openWeb3ModalCallback,\r\n    logoutOfWeb3ModalCallback,\r\n    updateWeb3ModalThemeCallback,\r\n  };\r\n};\r\n", "import { useCallback, useRef, useState } from 'react';\nimport useDebouncedCallback from './useDebouncedCallback';\nfunction valueEquality(left, right) {\n    return left === right;\n}\nfunction adjustFunctionValueOfSetState(value) {\n    return typeof value === 'function' ? function () { return value; } : value;\n}\nfunction useStateIgnoreCallback(initialState) {\n    var _a = useState(adjustFunctionValueOfSetState(initialState)), state = _a[0], setState = _a[1];\n    var setStateIgnoreCallback = useCallback(function (value) { return setState(adjustFunctionValueOfSetState(value)); }, []);\n    return [state, setStateIgnoreCallback];\n}\nexport default function useDebounce(value, delay, options) {\n    var eq = (options && options.equalityFn) || valueEquality;\n    var _a = useStateIgnoreCallback(value), state = _a[0], dispatch = _a[1];\n    var debounced = useDebouncedCallback(useCallback(function (value) { return dispatch(value); }, [dispatch]), delay, options);\n    var previousValue = useRef(value);\n    if (!eq(previousValue.current, value)) {\n        debounced(value);\n        previousValue.current = value;\n    }\n    return [state, { cancel: debounced.cancel, isPending: debounced.isPending, flush: debounced.flush }];\n}\n", "import { useRef, useEffect, useMemo } from 'react';\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Specify invoking on the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback(func, wait, options) {\n    var _this = this;\n    var lastCallTime = useRef(null);\n    var lastInvokeTime = useRef(0);\n    var timerId = useRef(null);\n    var lastArgs = useRef([]);\n    var lastThis = useRef();\n    var result = useRef();\n    var funcRef = useRef(func);\n    var mounted = useRef(true);\n    funcRef.current = func;\n    // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n    var useRAF = !wait && wait !== 0 && typeof window !== 'undefined';\n    if (typeof func !== 'function') {\n        throw new TypeError('Expected a function');\n    }\n    wait = +wait || 0;\n    options = options || {};\n    var leading = !!options.leading;\n    var trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n    var maxing = 'maxWait' in options;\n    var maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n    useEffect(function () {\n        mounted.current = true;\n        return function () {\n            mounted.current = false;\n        };\n    }, []);\n    // You may have a question, why we have so many code under the useMemo definition.\n    //\n    // This was made as we want to escape from useCallback hell and\n    // not to initialize a number of functions each time useDebouncedCallback is called.\n    //\n    // It means that we have less garbage for our GC calls which improves performance.\n    // Also, it makes this library smaller.\n    //\n    // And the last reason, that the code without lots of useCallback with deps is easier to read.\n    // You have only one place for that.\n    var debounced = useMemo(function () {\n        var invokeFunc = function (time) {\n            var args = lastArgs.current;\n            var thisArg = lastThis.current;\n            lastArgs.current = lastThis.current = null;\n            lastInvokeTime.current = time;\n            return (result.current = funcRef.current.apply(thisArg, args));\n        };\n        var startTimer = function (pendingFunc, wait) {\n            if (useRAF)\n                cancelAnimationFrame(timerId.current);\n            timerId.current = useRAF ? requestAnimationFrame(pendingFunc) : setTimeout(pendingFunc, wait);\n        };\n        var shouldInvoke = function (time) {\n            if (!mounted.current)\n                return false;\n            var timeSinceLastCall = time - lastCallTime.current;\n            var timeSinceLastInvoke = time - lastInvokeTime.current;\n            // Either this is the first call, activity has stopped and we're at the\n            // trailing edge, the system time has gone backwards and we're treating\n            // it as the trailing edge, or we've hit the `maxWait` limit.\n            return (!lastCallTime.current ||\n                timeSinceLastCall >= wait ||\n                timeSinceLastCall < 0 ||\n                (maxing && timeSinceLastInvoke >= maxWait));\n        };\n        var trailingEdge = function (time) {\n            timerId.current = null;\n            // Only invoke if we have `lastArgs` which means `func` has been\n            // debounced at least once.\n            if (trailing && lastArgs.current) {\n                return invokeFunc(time);\n            }\n            lastArgs.current = lastThis.current = null;\n            return result.current;\n        };\n        var timerExpired = function () {\n            var time = Date.now();\n            if (shouldInvoke(time)) {\n                return trailingEdge(time);\n            }\n            // https://github.com/xnimorz/use-debounce/issues/97\n            if (!mounted.current) {\n                return;\n            }\n            // Remaining wait calculation\n            var timeSinceLastCall = time - lastCallTime.current;\n            var timeSinceLastInvoke = time - lastInvokeTime.current;\n            var timeWaiting = wait - timeSinceLastCall;\n            var remainingWait = maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n            // Restart the timer\n            startTimer(timerExpired, remainingWait);\n        };\n        var func = function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var time = Date.now();\n            var isInvoking = shouldInvoke(time);\n            lastArgs.current = args;\n            lastThis.current = _this;\n            lastCallTime.current = time;\n            if (isInvoking) {\n                if (!timerId.current && mounted.current) {\n                    // Reset any `maxWait` timer.\n                    lastInvokeTime.current = lastCallTime.current;\n                    // Start the timer for the trailing edge.\n                    startTimer(timerExpired, wait);\n                    // Invoke the leading edge.\n                    return leading ? invokeFunc(lastCallTime.current) : result.current;\n                }\n                if (maxing) {\n                    // Handle invocations in a tight loop.\n                    startTimer(timerExpired, wait);\n                    return invokeFunc(lastCallTime.current);\n                }\n            }\n            if (!timerId.current) {\n                startTimer(timerExpired, wait);\n            }\n            return result.current;\n        };\n        func.cancel = function () {\n            if (timerId.current) {\n                useRAF ? cancelAnimationFrame(timerId.current) : clearTimeout(timerId.current);\n            }\n            lastInvokeTime.current = 0;\n            lastArgs.current = lastCallTime.current = lastThis.current = timerId.current = null;\n        };\n        func.isPending = function () {\n            return !!timerId.current;\n        };\n        func.flush = function () {\n            return !timerId.current ? result.current : trailingEdge(Date.now());\n        };\n        return func;\n    }, [leading, maxing, wait, maxWait, trailing, useRAF]);\n    return debounced;\n}\n"],
  "mappings": "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",
  "names": []
}
