import {
  require_querystring
} from "./chunk-ZFVBVDWF.js";
import {
  crypto_exports,
  init_crypto,
  require_bn,
  require_dist2 as require_dist,
  require_elliptic,
  require_eth_sig_util,
  require_json_stable_stringify,
  require_noop,
  require_semaphore,
  require_src
} from "./chunk-ECH3LXRM.js";
import "./chunk-PA7HBL7M.js";
import {
  require_eth_json_rpc_filters,
  require_fast_safe_stringify,
  require_immutable,
  require_js,
  require_polling,
  require_subscriptionManager
} from "./chunk-2D3B6PX5.js";
import {
  require_util
} from "./chunk-AU42HW6U.js";
import {
  require_buffer
} from "./chunk-5DWCCEEY.js";
import "./chunk-SSY6J6BT.js";
import "./chunk-P7B7HGVM.js";
import {
  require_isArray,
  require_isArrayLike,
  require_isObject,
  require_keys
} from "./chunk-YLZEUPJL.js";
import "./chunk-K6V6NNJN.js";
import {
  require_events
} from "./chunk-775XWLPQ.js";
import {
  buffer_exports,
  init_buffer
} from "./chunk-ZJS3N4JA.js";
import {
  __commonJS,
  __esm,
  __export,
  __require,
  __spreadValues,
  init_define_process_env
} from "./chunk-VNKJPIOO.js";

// node_modules/authereum/node_modules/penpal/lib/constants.js
var require_constants = __commonJS({
  "node_modules/authereum/node_modules/penpal/lib/constants.js"(exports) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DATA_CLONE_ERROR = exports.MESSAGE = exports.REJECTED = exports.FULFILLED = exports.REPLY = exports.CALL = exports.HANDSHAKE_REPLY = exports.HANDSHAKE = void 0;
    var HANDSHAKE = "handshake";
    exports.HANDSHAKE = HANDSHAKE;
    var HANDSHAKE_REPLY = "handshake-reply";
    exports.HANDSHAKE_REPLY = HANDSHAKE_REPLY;
    var CALL = "call";
    exports.CALL = CALL;
    var REPLY = "reply";
    exports.REPLY = REPLY;
    var FULFILLED = "fulfilled";
    exports.FULFILLED = FULFILLED;
    var REJECTED = "rejected";
    exports.REJECTED = REJECTED;
    var MESSAGE = "message";
    exports.MESSAGE = MESSAGE;
    var DATA_CLONE_ERROR = "DataCloneError";
    exports.DATA_CLONE_ERROR = DATA_CLONE_ERROR;
  }
});

// node_modules/authereum/node_modules/penpal/lib/errorCodes.js
var require_errorCodes = __commonJS({
  "node_modules/authereum/node_modules/penpal/lib/errorCodes.js"(exports) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.ERR_NO_IFRAME_SRC = exports.ERR_NOT_IN_IFRAME = exports.ERR_CONNECTION_TIMEOUT = exports.ERR_CONNECTION_DESTROYED = void 0;
    var ERR_CONNECTION_DESTROYED = "ConnectionDestroyed";
    exports.ERR_CONNECTION_DESTROYED = ERR_CONNECTION_DESTROYED;
    var ERR_CONNECTION_TIMEOUT = "ConnectionTimeout";
    exports.ERR_CONNECTION_TIMEOUT = ERR_CONNECTION_TIMEOUT;
    var ERR_NOT_IN_IFRAME = "NotInIframe";
    exports.ERR_NOT_IN_IFRAME = ERR_NOT_IN_IFRAME;
    var ERR_NO_IFRAME_SRC = "NoIframeSrc";
    exports.ERR_NO_IFRAME_SRC = ERR_NO_IFRAME_SRC;
  }
});

// node_modules/authereum/node_modules/penpal/lib/createDestructor.js
var require_createDestructor = __commonJS({
  "node_modules/authereum/node_modules/penpal/lib/createDestructor.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = () => {
      const callbacks = [];
      let destroyed = false;
      return {
        destroy() {
          destroyed = true;
          callbacks.forEach((callback) => {
            callback();
          });
        },
        onDestroy(callback) {
          destroyed ? callback() : callbacks.push(callback);
        }
      };
    };
    exports.default = _default;
    module.exports = exports.default;
  }
});

// node_modules/authereum/node_modules/penpal/lib/getOriginFromSrc.js
var require_getOriginFromSrc = __commonJS({
  "node_modules/authereum/node_modules/penpal/lib/getOriginFromSrc.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var DEFAULT_PORTS = {
      "http:": "80",
      "https:": "443"
    };
    var URL_REGEX = /^(https?:)?\/\/([^/:]+)?(:(\d+))?/;
    var opaqueOriginSchemes = ["file:", "data:"];
    var _default = (src) => {
      if (src && opaqueOriginSchemes.find((scheme) => src.startsWith(scheme))) {
        return "null";
      }
      const location = document.location;
      const regexResult = URL_REGEX.exec(src);
      let protocol;
      let hostname;
      let port;
      if (regexResult) {
        protocol = regexResult[1] ? regexResult[1] : location.protocol;
        hostname = regexResult[2];
        port = regexResult[4];
      } else {
        protocol = location.protocol;
        hostname = location.hostname;
        port = location.port;
      }
      const portSuffix = port && port !== DEFAULT_PORTS[protocol] ? `:${port}` : "";
      return `${protocol}//${hostname}${portSuffix}`;
    };
    exports.default = _default;
    module.exports = exports.default;
  }
});

// node_modules/authereum/node_modules/penpal/lib/createLogger.js
var require_createLogger = __commonJS({
  "node_modules/authereum/node_modules/penpal/lib/createLogger.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _default = (debug) => {
      return function() {
        if (debug) {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          console.log("[Penpal]", ...args);
        }
      };
    };
    exports.default = _default;
    module.exports = exports.default;
  }
});

// node_modules/authereum/node_modules/penpal/lib/errorSerialization.js
var require_errorSerialization = __commonJS({
  "node_modules/authereum/node_modules/penpal/lib/errorSerialization.js"(exports) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.deserializeError = exports.serializeError = void 0;
    var serializeError = (_ref) => {
      let name = _ref.name, message = _ref.message, stack = _ref.stack;
      return {
        name,
        message,
        stack
      };
    };
    exports.serializeError = serializeError;
    var deserializeError = (obj) => {
      const deserializedError = new Error();
      Object.keys(obj).forEach((key) => deserializedError[key] = obj[key]);
      return deserializedError;
    };
    exports.deserializeError = deserializeError;
  }
});

// node_modules/authereum/node_modules/penpal/lib/connectCallReceiver.js
var require_connectCallReceiver = __commonJS({
  "node_modules/authereum/node_modules/penpal/lib/connectCallReceiver.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _constants = require_constants();
    var _errorSerialization = require_errorSerialization();
    var _default = (info, methods, log) => {
      const localName = info.localName, local = info.local, remote = info.remote, originForSending = info.originForSending, originForReceiving = info.originForReceiving;
      let destroyed = false;
      log(`${localName}: Connecting call receiver`);
      const handleMessageEvent = (event) => {
        if (event.source !== remote || event.data.penpal !== _constants.CALL) {
          return;
        }
        if (event.origin !== originForReceiving) {
          log(`${localName} received message from origin ${event.origin} which did not match expected origin ${originForReceiving}`);
          return;
        }
        const _event$data = event.data, methodName = _event$data.methodName, args = _event$data.args, id = _event$data.id;
        log(`${localName}: Received ${methodName}() call`);
        const createPromiseHandler = (resolution) => {
          return (returnValue) => {
            log(`${localName}: Sending ${methodName}() reply`);
            if (destroyed) {
              log(`${localName}: Unable to send ${methodName}() reply due to destroyed connection`);
              return;
            }
            const message = {
              penpal: _constants.REPLY,
              id,
              resolution,
              returnValue
            };
            if (resolution === _constants.REJECTED && returnValue instanceof Error) {
              message.returnValue = (0, _errorSerialization.serializeError)(returnValue);
              message.returnValueIsError = true;
            }
            try {
              remote.postMessage(message, originForSending);
            } catch (err) {
              if (err.name === _constants.DATA_CLONE_ERROR) {
                remote.postMessage({
                  penpal: _constants.REPLY,
                  id,
                  resolution: _constants.REJECTED,
                  returnValue: (0, _errorSerialization.serializeError)(err),
                  returnValueIsError: true
                }, originForSending);
              }
              throw err;
            }
          };
        };
        new Promise((resolve) => resolve(methods[methodName].apply(methods, args))).then(createPromiseHandler(_constants.FULFILLED), createPromiseHandler(_constants.REJECTED));
      };
      local.addEventListener(_constants.MESSAGE, handleMessageEvent);
      return () => {
        destroyed = true;
        local.removeEventListener(_constants.MESSAGE, handleMessageEvent);
      };
    };
    exports.default = _default;
    module.exports = exports.default;
  }
});

// node_modules/authereum/node_modules/penpal/lib/generateId.js
var require_generateId = __commonJS({
  "node_modules/authereum/node_modules/penpal/lib/generateId.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var id = 0;
    var _default = () => ++id;
    exports.default = _default;
    module.exports = exports.default;
  }
});

// node_modules/authereum/node_modules/penpal/lib/connectCallSender.js
var require_connectCallSender = __commonJS({
  "node_modules/authereum/node_modules/penpal/lib/connectCallSender.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _constants = require_constants();
    var _errorCodes = require_errorCodes();
    var _generateId = _interopRequireDefault(require_generateId());
    var _errorSerialization = require_errorSerialization();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = (callSender, info, methodNames, destroyConnection, log) => {
      const localName = info.localName, local = info.local, remote = info.remote, originForSending = info.originForSending, originForReceiving = info.originForReceiving;
      let destroyed = false;
      log(`${localName}: Connecting call sender`);
      const createMethodProxy = (methodName) => {
        return function() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          log(`${localName}: Sending ${methodName}() call`);
          let iframeRemoved;
          try {
            if (remote.closed) {
              iframeRemoved = true;
            }
          } catch (e) {
            iframeRemoved = true;
          }
          if (iframeRemoved) {
            destroyConnection();
          }
          if (destroyed) {
            const error = new Error(`Unable to send ${methodName}() call due to destroyed connection`);
            error.code = _errorCodes.ERR_CONNECTION_DESTROYED;
            throw error;
          }
          return new Promise((resolve, reject) => {
            const id = (0, _generateId.default)();
            const handleMessageEvent = (event) => {
              if (event.source !== remote || event.data.penpal !== _constants.REPLY || event.data.id !== id) {
                return;
              }
              if (event.origin !== originForReceiving) {
                log(`${localName} received message from origin ${event.origin} which did not match expected origin ${originForReceiving}`);
                return;
              }
              log(`${localName}: Received ${methodName}() reply`);
              local.removeEventListener(_constants.MESSAGE, handleMessageEvent);
              let returnValue = event.data.returnValue;
              if (event.data.returnValueIsError) {
                returnValue = (0, _errorSerialization.deserializeError)(returnValue);
              }
              (event.data.resolution === _constants.FULFILLED ? resolve : reject)(returnValue);
            };
            local.addEventListener(_constants.MESSAGE, handleMessageEvent);
            remote.postMessage({
              penpal: _constants.CALL,
              id,
              methodName,
              args
            }, originForSending);
          });
        };
      };
      methodNames.reduce((api, methodName) => {
        api[methodName] = createMethodProxy(methodName);
        return api;
      }, callSender);
      return () => {
        destroyed = true;
      };
    };
    exports.default = _default;
    module.exports = exports.default;
  }
});

// node_modules/authereum/node_modules/penpal/lib/connectToChild.js
var require_connectToChild = __commonJS({
  "node_modules/authereum/node_modules/penpal/lib/connectToChild.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _constants = require_constants();
    var _errorCodes = require_errorCodes();
    var _createDestructor2 = _interopRequireDefault(require_createDestructor());
    var _getOriginFromSrc = _interopRequireDefault(require_getOriginFromSrc());
    var _createLogger = _interopRequireDefault(require_createLogger());
    var _connectCallReceiver = _interopRequireDefault(require_connectCallReceiver());
    var _connectCallSender = _interopRequireDefault(require_connectCallSender());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var CHECK_IFRAME_IN_DOC_INTERVAL = 6e4;
    var _default = (_ref) => {
      let iframe = _ref.iframe, _ref$methods = _ref.methods, methods = _ref$methods === void 0 ? {} : _ref$methods, childOrigin = _ref.childOrigin, timeout = _ref.timeout, debug = _ref.debug;
      const log = (0, _createLogger.default)(debug);
      const parent2 = window;
      const _createDestructor = (0, _createDestructor2.default)(), destroy = _createDestructor.destroy, onDestroy = _createDestructor.onDestroy;
      if (!childOrigin) {
        if (!iframe.src && !iframe.srcdoc) {
          const error = new Error("Iframe must have src or srcdoc property defined.");
          error.code = _errorCodes.ERR_NO_IFRAME_SRC;
          throw error;
        }
        childOrigin = (0, _getOriginFromSrc.default)(iframe.src);
      }
      const originForSending = childOrigin === "null" ? "*" : childOrigin;
      const promise = new Promise((resolveConnectionPromise, reject) => {
        let connectionTimeoutId;
        if (timeout !== void 0) {
          connectionTimeoutId = setTimeout(() => {
            const error = new Error(`Connection to child timed out after ${timeout}ms`);
            error.code = _errorCodes.ERR_CONNECTION_TIMEOUT;
            reject(error);
            destroy();
          }, timeout);
        }
        const callSender = {};
        let receiverMethodNames;
        let destroyCallReceiver;
        const handleMessage = (event) => {
          const child = iframe.contentWindow;
          if (event.source !== child || event.data.penpal !== _constants.HANDSHAKE) {
            return;
          }
          if (event.origin !== childOrigin) {
            log(`Parent received handshake from origin ${event.origin} which did not match expected origin ${childOrigin}`);
            return;
          }
          log("Parent: Received handshake, sending reply");
          event.source.postMessage({
            penpal: _constants.HANDSHAKE_REPLY,
            methodNames: Object.keys(methods)
          }, originForSending);
          const info = {
            localName: "Parent",
            local: parent2,
            remote: child,
            originForSending,
            originForReceiving: childOrigin
          };
          if (destroyCallReceiver) {
            destroyCallReceiver();
          }
          destroyCallReceiver = (0, _connectCallReceiver.default)(info, methods, log);
          onDestroy(destroyCallReceiver);
          if (receiverMethodNames) {
            receiverMethodNames.forEach((receiverMethodName) => {
              delete callSender[receiverMethodName];
            });
          }
          receiverMethodNames = event.data.methodNames;
          const destroyCallSender = (0, _connectCallSender.default)(callSender, info, receiverMethodNames, destroy, log);
          onDestroy(destroyCallSender);
          clearTimeout(connectionTimeoutId);
          resolveConnectionPromise(callSender);
        };
        parent2.addEventListener(_constants.MESSAGE, handleMessage);
        log("Parent: Awaiting handshake");
        var checkIframeInDocIntervalId = setInterval(() => {
          if (!document.contains(iframe)) {
            clearInterval(checkIframeInDocIntervalId);
            destroy();
          }
        }, CHECK_IFRAME_IN_DOC_INTERVAL);
        onDestroy(() => {
          parent2.removeEventListener(_constants.MESSAGE, handleMessage);
          clearInterval(checkIframeInDocIntervalId);
          const error = new Error("Connection destroyed");
          error.code = _errorCodes.ERR_CONNECTION_DESTROYED;
          reject(error);
        });
      });
      return {
        promise,
        destroy
      };
    };
    exports.default = _default;
    module.exports = exports.default;
  }
});

// node_modules/authereum/node_modules/penpal/lib/connectToParent.js
var require_connectToParent = __commonJS({
  "node_modules/authereum/node_modules/penpal/lib/connectToParent.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _constants = require_constants();
    var _errorCodes = require_errorCodes();
    var _createDestructor2 = _interopRequireDefault(require_createDestructor());
    var _connectCallReceiver = _interopRequireDefault(require_connectCallReceiver());
    var _connectCallSender = _interopRequireDefault(require_connectCallSender());
    var _createLogger = _interopRequireDefault(require_createLogger());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = function _default2() {
      let _ref = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$parentOrigin = _ref.parentOrigin, parentOrigin = _ref$parentOrigin === void 0 ? "*" : _ref$parentOrigin, _ref$methods = _ref.methods, methods = _ref$methods === void 0 ? {} : _ref$methods, timeout = _ref.timeout, debug = _ref.debug;
      const log = (0, _createLogger.default)(debug);
      if (window === window.top) {
        const error = new Error("connectToParent() must be called within an iframe");
        error.code = _errorCodes.ERR_NOT_IN_IFRAME;
        throw error;
      }
      const _createDestructor = (0, _createDestructor2.default)(), destroy = _createDestructor.destroy, onDestroy = _createDestructor.onDestroy;
      const child = window;
      const parent2 = child.parent;
      const promise = new Promise((resolveConnectionPromise, reject) => {
        let connectionTimeoutId;
        if (timeout !== void 0) {
          connectionTimeoutId = setTimeout(() => {
            const error = new Error(`Connection to parent timed out after ${timeout}ms`);
            error.code = _errorCodes.ERR_CONNECTION_TIMEOUT;
            reject(error);
            destroy();
          }, timeout);
        }
        const handleMessageEvent = (event) => {
          try {
            clearTimeout();
          } catch (e) {
            return;
          }
          if (event.source !== parent2 || event.data.penpal !== _constants.HANDSHAKE_REPLY) {
            return;
          }
          if (parentOrigin !== "*" && parentOrigin !== event.origin) {
            log(`Child received handshake reply from origin ${event.origin} which did not match expected origin ${parentOrigin}`);
            return;
          }
          log("Child: Received handshake reply");
          child.removeEventListener(_constants.MESSAGE, handleMessageEvent);
          const info = {
            localName: "Child",
            local: child,
            remote: parent2,
            originForSending: event.origin === "null" ? "*" : event.origin,
            originForReceiving: event.origin
          };
          const callSender = {};
          const destroyCallReceiver = (0, _connectCallReceiver.default)(info, methods, log);
          onDestroy(destroyCallReceiver);
          const destroyCallSender = (0, _connectCallSender.default)(callSender, info, event.data.methodNames, destroy, log);
          onDestroy(destroyCallSender);
          clearTimeout(connectionTimeoutId);
          resolveConnectionPromise(callSender);
        };
        child.addEventListener(_constants.MESSAGE, handleMessageEvent);
        onDestroy(() => {
          child.removeEventListener(_constants.MESSAGE, handleMessageEvent);
          const error = new Error("Connection destroyed");
          error.code = _errorCodes.ERR_CONNECTION_DESTROYED;
          reject(error);
        });
        log("Child: Sending handshake");
        parent2.postMessage({
          penpal: _constants.HANDSHAKE,
          methodNames: Object.keys(methods)
        }, parentOrigin);
      });
      return {
        promise,
        destroy
      };
    };
    exports.default = _default;
    module.exports = exports.default;
  }
});

// node_modules/authereum/node_modules/penpal/lib/index.js
var require_lib = __commonJS({
  "node_modules/authereum/node_modules/penpal/lib/index.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = void 0;
    var _connectToChild = _interopRequireDefault(require_connectToChild());
    var _connectToParent = _interopRequireDefault(require_connectToParent());
    var _errorCodes = require_errorCodes();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var _default = {
      ERR_CONNECTION_DESTROYED: _errorCodes.ERR_CONNECTION_DESTROYED,
      ERR_CONNECTION_TIMEOUT: _errorCodes.ERR_CONNECTION_TIMEOUT,
      ERR_NOT_IN_IFRAME: _errorCodes.ERR_NOT_IN_IFRAME,
      ERR_NO_IFRAME_SRC: _errorCodes.ERR_NO_IFRAME_SRC,
      connectToChild: _connectToChild.default,
      connectToParent: _connectToParent.default
    };
    exports.default = _default;
    module.exports = exports.default;
  }
});

// node_modules/authereum/node_modules/eventemitter3/index.js
var require_eventemitter3 = __commonJS({
  "node_modules/authereum/node_modules/eventemitter3/index.js"(exports, module) {
    init_define_process_env();
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    var prefix = "~";
    function Events() {
    }
    if (Object.create) {
      Events.prototype = Object.create(null);
      if (!new Events().__proto__)
        prefix = false;
    }
    function EE(fn, context, once) {
      this.fn = fn;
      this.context = context;
      this.once = once || false;
    }
    function addListener(emitter, event, fn, context, once) {
      if (typeof fn !== "function") {
        throw new TypeError("The listener must be a function");
      }
      var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
      if (!emitter._events[evt])
        emitter._events[evt] = listener, emitter._eventsCount++;
      else if (!emitter._events[evt].fn)
        emitter._events[evt].push(listener);
      else
        emitter._events[evt] = [emitter._events[evt], listener];
      return emitter;
    }
    function clearEvent(emitter, evt) {
      if (--emitter._eventsCount === 0)
        emitter._events = new Events();
      else
        delete emitter._events[evt];
    }
    function EventEmitter() {
      this._events = new Events();
      this._eventsCount = 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      var names = [], events, name;
      if (this._eventsCount === 0)
        return names;
      for (name in events = this._events) {
        if (has.call(events, name))
          names.push(prefix ? name.slice(1) : name);
      }
      if (Object.getOwnPropertySymbols) {
        return names.concat(Object.getOwnPropertySymbols(events));
      }
      return names;
    };
    EventEmitter.prototype.listeners = function listeners(event) {
      var evt = prefix ? prefix + event : event, handlers = this._events[evt];
      if (!handlers)
        return [];
      if (handlers.fn)
        return [handlers.fn];
      for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
        ee[i] = handlers[i].fn;
      }
      return ee;
    };
    EventEmitter.prototype.listenerCount = function listenerCount(event) {
      var evt = prefix ? prefix + event : event, listeners = this._events[evt];
      if (!listeners)
        return 0;
      if (listeners.fn)
        return 1;
      return listeners.length;
    };
    EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return false;
      var listeners = this._events[evt], len = arguments.length, args, i;
      if (listeners.fn) {
        if (listeners.once)
          this.removeListener(event, listeners.fn, void 0, true);
        switch (len) {
          case 1:
            return listeners.fn.call(listeners.context), true;
          case 2:
            return listeners.fn.call(listeners.context, a1), true;
          case 3:
            return listeners.fn.call(listeners.context, a1, a2), true;
          case 4:
            return listeners.fn.call(listeners.context, a1, a2, a3), true;
          case 5:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
          case 6:
            return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
        }
        for (i = 1, args = new Array(len - 1); i < len; i++) {
          args[i - 1] = arguments[i];
        }
        listeners.fn.apply(listeners.context, args);
      } else {
        var length = listeners.length, j;
        for (i = 0; i < length; i++) {
          if (listeners[i].once)
            this.removeListener(event, listeners[i].fn, void 0, true);
          switch (len) {
            case 1:
              listeners[i].fn.call(listeners[i].context);
              break;
            case 2:
              listeners[i].fn.call(listeners[i].context, a1);
              break;
            case 3:
              listeners[i].fn.call(listeners[i].context, a1, a2);
              break;
            case 4:
              listeners[i].fn.call(listeners[i].context, a1, a2, a3);
              break;
            default:
              if (!args)
                for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
              listeners[i].fn.apply(listeners[i].context, args);
          }
        }
      }
      return true;
    };
    EventEmitter.prototype.on = function on(event, fn, context) {
      return addListener(this, event, fn, context, false);
    };
    EventEmitter.prototype.once = function once(event, fn, context) {
      return addListener(this, event, fn, context, true);
    };
    EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
      var evt = prefix ? prefix + event : event;
      if (!this._events[evt])
        return this;
      if (!fn) {
        clearEvent(this, evt);
        return this;
      }
      var listeners = this._events[evt];
      if (listeners.fn) {
        if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
          clearEvent(this, evt);
        }
      } else {
        for (var i = 0, events = [], length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
        if (events.length)
          this._events[evt] = events.length === 1 ? events[0] : events;
        else
          clearEvent(this, evt);
      }
      return this;
    };
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
      var evt;
      if (event) {
        evt = prefix ? prefix + event : event;
        if (this._events[evt])
          clearEvent(this, evt);
      } else {
        this._events = new Events();
        this._eventsCount = 0;
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;
    EventEmitter.prefixed = prefix;
    EventEmitter.EventEmitter = EventEmitter;
    if (typeof module !== "undefined") {
      module.exports = EventEmitter;
    }
  }
});

// node_modules/authereum/node_modules/is-buffer/index.js
var require_is_buffer = __commonJS({
  "node_modules/authereum/node_modules/is-buffer/index.js"(exports, module) {
    init_define_process_env();
    module.exports = function isBuffer(obj) {
      return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
    };
  }
});

// node_modules/authereum/dist/version.js
var require_version = __commonJS({
  "node_modules/authereum/dist/version.js"(exports) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = "0.1.14";
  }
});

// node_modules/authereum/node_modules/async/internal/once.js
var require_once = __commonJS({
  "node_modules/authereum/node_modules/async/internal/once.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = once;
    function once(fn) {
      function wrapper(...args) {
        if (fn === null)
          return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
      }
      Object.assign(wrapper, fn);
      return wrapper;
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/async/internal/onlyOnce.js
var require_onlyOnce = __commonJS({
  "node_modules/authereum/node_modules/async/internal/onlyOnce.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = onlyOnce;
    function onlyOnce(fn) {
      return function(...args) {
        if (fn === null)
          throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, args);
      };
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/async/internal/initialParams.js
var require_initialParams = __commonJS({
  "node_modules/authereum/node_modules/async/internal/initialParams.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(fn) {
      return function(...args) {
        var callback = args.pop();
        return fn.call(this, args, callback);
      };
    };
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/async/internal/setImmediate.js
var require_setImmediate = __commonJS({
  "node_modules/authereum/node_modules/async/internal/setImmediate.js"(exports) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.fallback = fallback;
    exports.wrap = wrap;
    var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === "function" && setImmediate;
    var hasNextTick = exports.hasNextTick = typeof process === "object" && typeof process.nextTick === "function";
    function fallback(fn) {
      setTimeout(fn, 0);
    }
    function wrap(defer) {
      return (fn, ...args) => defer(() => fn(...args));
    }
    var _defer;
    if (hasSetImmediate) {
      _defer = setImmediate;
    } else if (hasNextTick) {
      _defer = process.nextTick;
    } else {
      _defer = fallback;
    }
    exports.default = wrap(_defer);
  }
});

// node_modules/authereum/node_modules/async/asyncify.js
var require_asyncify = __commonJS({
  "node_modules/authereum/node_modules/async/asyncify.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = asyncify;
    var _initialParams = require_initialParams();
    var _initialParams2 = _interopRequireDefault(_initialParams);
    var _setImmediate = require_setImmediate();
    var _setImmediate2 = _interopRequireDefault(_setImmediate);
    var _wrapAsync = require_wrapAsync();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function asyncify(func) {
      if ((0, _wrapAsync.isAsync)(func)) {
        return function(...args) {
          const callback = args.pop();
          const promise = func.apply(this, args);
          return handlePromise(promise, callback);
        };
      }
      return (0, _initialParams2.default)(function(args, callback) {
        var result;
        try {
          result = func.apply(this, args);
        } catch (e) {
          return callback(e);
        }
        if (result && typeof result.then === "function") {
          return handlePromise(result, callback);
        } else {
          callback(null, result);
        }
      });
    }
    function handlePromise(promise, callback) {
      return promise.then((value) => {
        invokeCallback(callback, null, value);
      }, (err) => {
        invokeCallback(callback, err && err.message ? err : new Error(err));
      });
    }
    function invokeCallback(callback, error, value) {
      try {
        callback(error, value);
      } catch (err) {
        (0, _setImmediate2.default)((e) => {
          throw e;
        }, err);
      }
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/async/internal/wrapAsync.js
var require_wrapAsync = __commonJS({
  "node_modules/authereum/node_modules/async/internal/wrapAsync.js"(exports) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isAsyncIterable = exports.isAsyncGenerator = exports.isAsync = void 0;
    var _asyncify = require_asyncify();
    var _asyncify2 = _interopRequireDefault(_asyncify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function isAsync(fn) {
      return fn[Symbol.toStringTag] === "AsyncFunction";
    }
    function isAsyncGenerator(fn) {
      return fn[Symbol.toStringTag] === "AsyncGenerator";
    }
    function isAsyncIterable(obj) {
      return typeof obj[Symbol.asyncIterator] === "function";
    }
    function wrapAsync(asyncFn) {
      if (typeof asyncFn !== "function")
        throw new Error("expected a function");
      return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
    }
    exports.default = wrapAsync;
    exports.isAsync = isAsync;
    exports.isAsyncGenerator = isAsyncGenerator;
    exports.isAsyncIterable = isAsyncIterable;
  }
});

// node_modules/authereum/node_modules/async/internal/awaitify.js
var require_awaitify = __commonJS({
  "node_modules/authereum/node_modules/async/internal/awaitify.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = awaitify;
    function awaitify(asyncFn, arity = asyncFn.length) {
      if (!arity)
        throw new Error("arity is undefined");
      function awaitable(...args) {
        if (typeof args[arity - 1] === "function") {
          return asyncFn.apply(this, args);
        }
        return new Promise((resolve, reject) => {
          args[arity - 1] = (err, ...cbArgs) => {
            if (err)
              return reject(err);
            resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
          };
          asyncFn.apply(this, args);
        });
      }
      return awaitable;
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/async/waterfall.js
var require_waterfall = __commonJS({
  "node_modules/authereum/node_modules/async/waterfall.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _once = require_once();
    var _once2 = _interopRequireDefault(_once);
    var _onlyOnce = require_onlyOnce();
    var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
    var _wrapAsync = require_wrapAsync();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    var _awaitify = require_awaitify();
    var _awaitify2 = _interopRequireDefault(_awaitify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function waterfall(tasks, callback) {
      callback = (0, _once2.default)(callback);
      if (!Array.isArray(tasks))
        return callback(new Error("First argument to waterfall must be an array of functions"));
      if (!tasks.length)
        return callback();
      var taskIndex = 0;
      function nextTask(args) {
        var task = (0, _wrapAsync2.default)(tasks[taskIndex++]);
        task(...args, (0, _onlyOnce2.default)(next));
      }
      function next(err, ...args) {
        if (err === false)
          return;
        if (err || taskIndex === tasks.length) {
          return callback(err, ...args);
        }
        nextTask(args);
      }
      nextTask([]);
    }
    exports.default = (0, _awaitify2.default)(waterfall);
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/breakLoop.js
var require_breakLoop = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/breakLoop.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = {};
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/once.js
var require_once2 = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/once.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = once;
    function once(fn) {
      return function() {
        if (fn === null)
          return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
      };
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/getIterator.js
var require_getIterator = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/getIterator.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(coll) {
      return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
    };
    var iteratorSymbol = typeof Symbol === "function" && Symbol.iterator;
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/iterator.js
var require_iterator = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/iterator.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = iterator;
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _getIterator = require_getIterator();
    var _getIterator2 = _interopRequireDefault(_getIterator);
    var _keys = require_keys();
    var _keys2 = _interopRequireDefault(_keys);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function createArrayIterator(coll) {
      var i = -1;
      var len = coll.length;
      return function next() {
        return ++i < len ? { value: coll[i], key: i } : null;
      };
    }
    function createES2015Iterator(iterator2) {
      var i = -1;
      return function next() {
        var item = iterator2.next();
        if (item.done)
          return null;
        i++;
        return { value: item.value, key: i };
      };
    }
    function createObjectIterator(obj) {
      var okeys = (0, _keys2.default)(obj);
      var i = -1;
      var len = okeys.length;
      return function next() {
        var key = okeys[++i];
        return i < len ? { value: obj[key], key } : null;
      };
    }
    function iterator(coll) {
      if ((0, _isArrayLike2.default)(coll)) {
        return createArrayIterator(coll);
      }
      var iterator2 = (0, _getIterator2.default)(coll);
      return iterator2 ? createES2015Iterator(iterator2) : createObjectIterator(coll);
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/onlyOnce.js
var require_onlyOnce2 = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/onlyOnce.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = onlyOnce;
    function onlyOnce(fn) {
      return function() {
        if (fn === null)
          throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
      };
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/eachOfLimit.js
var require_eachOfLimit = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/eachOfLimit.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _eachOfLimit;
    var _noop = require_noop();
    var _noop2 = _interopRequireDefault(_noop);
    var _once = require_once2();
    var _once2 = _interopRequireDefault(_once);
    var _iterator = require_iterator();
    var _iterator2 = _interopRequireDefault(_iterator);
    var _onlyOnce = require_onlyOnce2();
    var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
    var _breakLoop = require_breakLoop();
    var _breakLoop2 = _interopRequireDefault(_breakLoop);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _eachOfLimit(limit) {
      return function(obj, iteratee, callback) {
        callback = (0, _once2.default)(callback || _noop2.default);
        if (limit <= 0 || !obj) {
          return callback(null);
        }
        var nextElem = (0, _iterator2.default)(obj);
        var done = false;
        var running = 0;
        var looping = false;
        function iterateeCallback(err, value) {
          running -= 1;
          if (err) {
            done = true;
            callback(err);
          } else if (value === _breakLoop2.default || done && running <= 0) {
            done = true;
            return callback(null);
          } else if (!looping) {
            replenish();
          }
        }
        function replenish() {
          looping = true;
          while (running < limit && !done) {
            var elem = nextElem();
            if (elem === null) {
              done = true;
              if (running <= 0) {
                callback(null);
              }
              return;
            }
            running += 1;
            iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));
          }
          looping = false;
        }
        replenish();
      };
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/slice.js
var require_slice = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/slice.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = slice;
    function slice(arrayLike, start) {
      start = start | 0;
      var newLen = Math.max(arrayLike.length - start, 0);
      var newArr = Array(newLen);
      for (var idx = 0; idx < newLen; idx++) {
        newArr[idx] = arrayLike[start + idx];
      }
      return newArr;
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/initialParams.js
var require_initialParams2 = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/initialParams.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(fn) {
      return function() {
        var args = (0, _slice2.default)(arguments);
        var callback = args.pop();
        fn.call(this, args, callback);
      };
    };
    var _slice = require_slice();
    var _slice2 = _interopRequireDefault(_slice);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/setImmediate.js
var require_setImmediate2 = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/setImmediate.js"(exports) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.hasNextTick = exports.hasSetImmediate = void 0;
    exports.fallback = fallback;
    exports.wrap = wrap;
    var _slice = require_slice();
    var _slice2 = _interopRequireDefault(_slice);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === "function" && setImmediate;
    var hasNextTick = exports.hasNextTick = typeof process === "object" && typeof process.nextTick === "function";
    function fallback(fn) {
      setTimeout(fn, 0);
    }
    function wrap(defer) {
      return function(fn) {
        var args = (0, _slice2.default)(arguments, 1);
        defer(function() {
          fn.apply(null, args);
        });
      };
    }
    var _defer;
    if (hasSetImmediate) {
      _defer = setImmediate;
    } else if (hasNextTick) {
      _defer = process.nextTick;
    } else {
      _defer = fallback;
    }
    exports.default = wrap(_defer);
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/asyncify.js
var require_asyncify2 = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/asyncify.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = asyncify;
    var _isObject = require_isObject();
    var _isObject2 = _interopRequireDefault(_isObject);
    var _initialParams = require_initialParams2();
    var _initialParams2 = _interopRequireDefault(_initialParams);
    var _setImmediate = require_setImmediate2();
    var _setImmediate2 = _interopRequireDefault(_setImmediate);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function asyncify(func) {
      return (0, _initialParams2.default)(function(args, callback) {
        var result;
        try {
          result = func.apply(this, args);
        } catch (e) {
          return callback(e);
        }
        if ((0, _isObject2.default)(result) && typeof result.then === "function") {
          result.then(function(value) {
            invokeCallback(callback, null, value);
          }, function(err) {
            invokeCallback(callback, err.message ? err : new Error(err));
          });
        } else {
          callback(null, result);
        }
      });
    }
    function invokeCallback(callback, error, value) {
      try {
        callback(error, value);
      } catch (e) {
        (0, _setImmediate2.default)(rethrow, e);
      }
    }
    function rethrow(error) {
      throw error;
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/wrapAsync.js
var require_wrapAsync2 = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/wrapAsync.js"(exports) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.isAsync = void 0;
    var _asyncify = require_asyncify2();
    var _asyncify2 = _interopRequireDefault(_asyncify);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var supportsSymbol = typeof Symbol === "function";
    function isAsync(fn) {
      return supportsSymbol && fn[Symbol.toStringTag] === "AsyncFunction";
    }
    function wrapAsync(asyncFn) {
      return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
    }
    exports.default = wrapAsync;
    exports.isAsync = isAsync;
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/eachOfLimit.js
var require_eachOfLimit2 = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/eachOfLimit.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = eachOfLimit;
    var _eachOfLimit2 = require_eachOfLimit();
    var _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);
    var _wrapAsync = require_wrapAsync2();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachOfLimit(coll, limit, iteratee, callback) {
      (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/doLimit.js
var require_doLimit = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/doLimit.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = doLimit;
    function doLimit(fn, limit) {
      return function(iterable, iteratee, callback) {
        return fn(iterable, limit, iteratee, callback);
      };
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/eachOf.js
var require_eachOf = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/eachOf.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(coll, iteratee, callback) {
      var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
      eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
    };
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _breakLoop = require_breakLoop();
    var _breakLoop2 = _interopRequireDefault(_breakLoop);
    var _eachOfLimit = require_eachOfLimit2();
    var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
    var _doLimit = require_doLimit();
    var _doLimit2 = _interopRequireDefault(_doLimit);
    var _noop = require_noop();
    var _noop2 = _interopRequireDefault(_noop);
    var _once = require_once2();
    var _once2 = _interopRequireDefault(_once);
    var _onlyOnce = require_onlyOnce2();
    var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
    var _wrapAsync = require_wrapAsync2();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachOfArrayLike(coll, iteratee, callback) {
      callback = (0, _once2.default)(callback || _noop2.default);
      var index = 0, completed = 0, length = coll.length;
      if (length === 0) {
        callback(null);
      }
      function iteratorCallback(err, value) {
        if (err) {
          callback(err);
        } else if (++completed === length || value === _breakLoop2.default) {
          callback(null);
        }
      }
      for (; index < length; index++) {
        iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
      }
    }
    var eachOfGeneric = (0, _doLimit2.default)(_eachOfLimit2.default, Infinity);
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/doParallel.js
var require_doParallel = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/doParallel.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = doParallel;
    var _eachOf = require_eachOf();
    var _eachOf2 = _interopRequireDefault(_eachOf);
    var _wrapAsync = require_wrapAsync2();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function doParallel(fn) {
      return function(obj, iteratee, callback) {
        return fn(_eachOf2.default, obj, (0, _wrapAsync2.default)(iteratee), callback);
      };
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/map.js
var require_map = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/map.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _asyncMap;
    var _noop = require_noop();
    var _noop2 = _interopRequireDefault(_noop);
    var _wrapAsync = require_wrapAsync2();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _asyncMap(eachfn, arr, iteratee, callback) {
      callback = callback || _noop2.default;
      arr = arr || [];
      var results = [];
      var counter = 0;
      var _iteratee = (0, _wrapAsync2.default)(iteratee);
      eachfn(arr, function(value, _, callback2) {
        var index = counter++;
        _iteratee(value, function(err, v) {
          results[index] = v;
          callback2(err);
        });
      }, function(err) {
        callback(err, results);
      });
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/map.js
var require_map2 = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/map.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _doParallel = require_doParallel();
    var _doParallel2 = _interopRequireDefault(_doParallel);
    var _map = require_map();
    var _map2 = _interopRequireDefault(_map);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = (0, _doParallel2.default)(_map2.default);
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/withoutIndex.js
var require_withoutIndex = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/withoutIndex.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _withoutIndex;
    function _withoutIndex(iteratee) {
      return function(value, index, callback) {
        return iteratee(value, callback);
      };
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/eachLimit.js
var require_eachLimit = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/eachLimit.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = eachLimit;
    var _eachOfLimit = require_eachOfLimit();
    var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
    var _withoutIndex = require_withoutIndex();
    var _withoutIndex2 = _interopRequireDefault(_withoutIndex);
    var _wrapAsync = require_wrapAsync2();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function eachLimit(coll, limit, iteratee, callback) {
      (0, _eachOfLimit2.default)(limit)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/eachSeries.js
var require_eachSeries = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/eachSeries.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _eachLimit = require_eachLimit();
    var _eachLimit2 = _interopRequireDefault(_eachLimit);
    var _doLimit = require_doLimit();
    var _doLimit2 = _interopRequireDefault(_doLimit);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    exports.default = (0, _doLimit2.default)(_eachLimit2.default, 1);
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/util/stoplight.js
var require_stoplight = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/util/stoplight.js"(exports, module) {
    init_define_process_env();
    var EventEmitter = require_events().EventEmitter;
    var inherits = require_util().inherits;
    module.exports = Stoplight;
    inherits(Stoplight, EventEmitter);
    function Stoplight() {
      const self2 = this;
      EventEmitter.call(self2);
      self2.isLocked = true;
    }
    Stoplight.prototype.go = function() {
      const self2 = this;
      self2.isLocked = false;
      self2.emit("unlock");
    };
    Stoplight.prototype.stop = function() {
      const self2 = this;
      self2.isLocked = true;
      self2.emit("lock");
    };
    Stoplight.prototype.await = function(fn) {
      const self2 = this;
      if (self2.isLocked) {
        self2.once("unlock", fn);
      } else {
        setTimeout(fn);
      }
    };
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/util/rpc-cache-utils.js
var require_rpc_cache_utils = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/util/rpc-cache-utils.js"(exports, module) {
    init_define_process_env();
    var stringify = require_json_stable_stringify();
    module.exports = {
      cacheIdentifierForPayload,
      canCache,
      blockTagForPayload,
      paramsWithoutBlockTag,
      blockTagParamIndex,
      cacheTypeForPayload
    };
    function cacheIdentifierForPayload(payload, opts = {}) {
      if (!canCache(payload))
        return null;
      const { includeBlockRef } = opts;
      const params = includeBlockRef ? payload.params : paramsWithoutBlockTag(payload);
      return payload.method + ":" + stringify(params);
    }
    function canCache(payload) {
      return cacheTypeForPayload(payload) !== "never";
    }
    function blockTagForPayload(payload) {
      var index = blockTagParamIndex(payload);
      if (index >= payload.params.length) {
        return null;
      }
      return payload.params[index];
    }
    function paramsWithoutBlockTag(payload) {
      var index = blockTagParamIndex(payload);
      if (index >= payload.params.length) {
        return payload.params;
      }
      if (payload.method === "eth_getBlockByNumber") {
        return payload.params.slice(1);
      }
      return payload.params.slice(0, index);
    }
    function blockTagParamIndex(payload) {
      switch (payload.method) {
        case "eth_getStorageAt":
          return 2;
        case "eth_getBalance":
        case "eth_getCode":
        case "eth_getTransactionCount":
        case "eth_call":
        case "eth_estimateGas":
          return 1;
        case "eth_getBlockByNumber":
          return 0;
        default:
          return void 0;
      }
    }
    function cacheTypeForPayload(payload) {
      switch (payload.method) {
        case "web3_clientVersion":
        case "web3_sha3":
        case "eth_protocolVersion":
        case "eth_getBlockTransactionCountByHash":
        case "eth_getUncleCountByBlockHash":
        case "eth_getCode":
        case "eth_getBlockByHash":
        case "eth_getTransactionByHash":
        case "eth_getTransactionByBlockHashAndIndex":
        case "eth_getTransactionReceipt":
        case "eth_getUncleByBlockHashAndIndex":
        case "eth_getCompilers":
        case "eth_compileLLL":
        case "eth_compileSolidity":
        case "eth_compileSerpent":
        case "shh_version":
          return "perma";
        case "eth_getBlockByNumber":
        case "eth_getBlockTransactionCountByNumber":
        case "eth_getUncleCountByBlockNumber":
        case "eth_getTransactionByBlockNumberAndIndex":
        case "eth_getUncleByBlockNumberAndIndex":
          return "fork";
        case "eth_gasPrice":
        case "eth_getBalance":
        case "eth_getStorageAt":
        case "eth_getTransactionCount":
        case "eth_call":
        case "eth_estimateGas":
        case "eth_getFilterLogs":
        case "eth_getLogs":
        case "eth_blockNumber":
          return "block";
        case "net_version":
        case "net_peerCount":
        case "net_listening":
        case "eth_syncing":
        case "eth_sign":
        case "eth_coinbase":
        case "eth_mining":
        case "eth_hashrate":
        case "eth_accounts":
        case "eth_sendTransaction":
        case "eth_sendRawTransaction":
        case "eth_newFilter":
        case "eth_newBlockFilter":
        case "eth_newPendingTransactionFilter":
        case "eth_uninstallFilter":
        case "eth_getFilterChanges":
        case "eth_getWork":
        case "eth_submitWork":
        case "eth_submitHashrate":
        case "db_putString":
        case "db_getString":
        case "db_putHex":
        case "db_getHex":
        case "shh_post":
        case "shh_newIdentity":
        case "shh_hasIdentity":
        case "shh_newGroup":
        case "shh_addToGroup":
        case "shh_newFilter":
        case "shh_uninstallFilter":
        case "shh_getFilterChanges":
        case "shh_getMessages":
          return "never";
      }
    }
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/util/random-id.js
var require_random_id = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/util/random-id.js"(exports, module) {
    init_define_process_env();
    var extraDigits = 3;
    module.exports = createRandomId;
    function createRandomId() {
      var datePart = new Date().getTime() * Math.pow(10, extraDigits);
      var extraPart = Math.floor(Math.random() * Math.pow(10, extraDigits));
      return datePart + extraPart;
    }
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/util/create-payload.js
var require_create_payload = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/util/create-payload.js"(exports, module) {
    init_define_process_env();
    var getRandomId = require_random_id();
    var extend = require_immutable();
    module.exports = createPayload;
    function createPayload(data) {
      return extend({
        id: getRandomId(),
        jsonrpc: "2.0",
        params: []
      }, data);
    }
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/index.js
var require_web3_provider_engine = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/index.js"(exports, module) {
    init_define_process_env();
    var EventEmitter = require_events().EventEmitter;
    var inherits = require_util().inherits;
    var ethUtil = require_dist();
    var EthBlockTracker = require_polling();
    var map = require_map2();
    var eachSeries = require_eachSeries();
    var Stoplight = require_stoplight();
    var cacheUtils = require_rpc_cache_utils();
    var createPayload = require_create_payload();
    var noop = function() {
    };
    module.exports = Web3ProviderEngine;
    inherits(Web3ProviderEngine, EventEmitter);
    function Web3ProviderEngine(opts) {
      const self2 = this;
      EventEmitter.call(self2);
      self2.setMaxListeners(30);
      opts = opts || {};
      const directProvider = { sendAsync: self2._handleAsync.bind(self2) };
      const blockTrackerProvider = opts.blockTrackerProvider || directProvider;
      self2._blockTracker = opts.blockTracker || new EthBlockTracker({
        provider: blockTrackerProvider,
        pollingInterval: opts.pollingInterval || 4e3,
        setSkipCacheFlag: true
      });
      self2._ready = new Stoplight();
      self2.currentBlock = null;
      self2._providers = [];
    }
    Web3ProviderEngine.prototype.start = function(cb = noop) {
      const self2 = this;
      self2._ready.go();
      self2._blockTracker.on("latest", (blockNumber) => {
        self2._getBlockByNumber(blockNumber, (err, block) => {
          if (err) {
            this.emit("error", err);
            return;
          }
          if (!block) {
            this.emit("error", new Error("Could not find block"));
            return;
          }
          const bufferBlock = toBufferBlock(block);
          self2._setCurrentBlock(bufferBlock);
          self2.emit("rawBlock", block);
          self2.emit("latest", block);
        });
      });
      self2._blockTracker.on("sync", self2.emit.bind(self2, "sync"));
      self2._blockTracker.on("error", self2.emit.bind(self2, "error"));
      self2._running = true;
      self2.emit("start");
    };
    Web3ProviderEngine.prototype.stop = function() {
      const self2 = this;
      self2._blockTracker.removeAllListeners();
      self2._running = false;
      self2.emit("stop");
    };
    Web3ProviderEngine.prototype.isRunning = function() {
      const self2 = this;
      return self2._running;
    };
    Web3ProviderEngine.prototype.addProvider = function(source, index) {
      const self2 = this;
      if (typeof index === "number") {
        self2._providers.splice(index, 0, source);
      } else {
        self2._providers.push(source);
      }
      source.setEngine(this);
    };
    Web3ProviderEngine.prototype.removeProvider = function(source) {
      const self2 = this;
      const index = self2._providers.indexOf(source);
      if (index < 0)
        throw new Error("Provider not found.");
      self2._providers.splice(index, 1);
    };
    Web3ProviderEngine.prototype.send = function(payload) {
      throw new Error("Web3ProviderEngine does not support synchronous requests.");
    };
    Web3ProviderEngine.prototype.sendAsync = function(payload, cb) {
      const self2 = this;
      self2._ready.await(function() {
        if (Array.isArray(payload)) {
          map(payload, self2._handleAsync.bind(self2), cb);
        } else {
          self2._handleAsync(payload, cb);
        }
      });
    };
    Web3ProviderEngine.prototype._getBlockByNumber = function(blockNumber, cb) {
      const req = createPayload({ method: "eth_getBlockByNumber", params: [blockNumber, false], skipCache: true });
      this._handleAsync(req, (err, res) => {
        if (err)
          return cb(err);
        return cb(null, res.result);
      });
    };
    Web3ProviderEngine.prototype._handleAsync = function(payload, finished) {
      var self2 = this;
      var currentProvider = -1;
      var result = null;
      var error = null;
      var stack = [];
      next();
      function next(after) {
        currentProvider += 1;
        stack.unshift(after);
        if (currentProvider >= self2._providers.length) {
          end(new Error('Request for method "' + payload.method + '" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'));
        } else {
          try {
            var provider = self2._providers[currentProvider];
            provider.handleRequest(payload, next, end);
          } catch (e) {
            end(e);
          }
        }
      }
      function end(_error, _result) {
        error = _error;
        result = _result;
        eachSeries(stack, function(fn, callback) {
          if (fn) {
            fn(error, result, callback);
          } else {
            callback();
          }
        }, function() {
          var resultObj = {
            id: payload.id,
            jsonrpc: payload.jsonrpc,
            result
          };
          if (error != null) {
            resultObj.error = {
              message: error.stack || error.message || error,
              code: -32e3
            };
            finished(error, resultObj);
          } else {
            finished(null, resultObj);
          }
        });
      }
    };
    Web3ProviderEngine.prototype._setCurrentBlock = function(block) {
      const self2 = this;
      self2.currentBlock = block;
      self2.emit("block", block);
    };
    function toBufferBlock(jsonBlock) {
      return {
        number: ethUtil.toBuffer(jsonBlock.number),
        hash: ethUtil.toBuffer(jsonBlock.hash),
        parentHash: ethUtil.toBuffer(jsonBlock.parentHash),
        nonce: ethUtil.toBuffer(jsonBlock.nonce),
        mixHash: ethUtil.toBuffer(jsonBlock.mixHash),
        sha3Uncles: ethUtil.toBuffer(jsonBlock.sha3Uncles),
        logsBloom: ethUtil.toBuffer(jsonBlock.logsBloom),
        transactionsRoot: ethUtil.toBuffer(jsonBlock.transactionsRoot),
        stateRoot: ethUtil.toBuffer(jsonBlock.stateRoot),
        receiptsRoot: ethUtil.toBuffer(jsonBlock.receiptRoot || jsonBlock.receiptsRoot),
        miner: ethUtil.toBuffer(jsonBlock.miner),
        difficulty: ethUtil.toBuffer(jsonBlock.difficulty),
        totalDifficulty: ethUtil.toBuffer(jsonBlock.totalDifficulty),
        size: ethUtil.toBuffer(jsonBlock.size),
        extraData: ethUtil.toBuffer(jsonBlock.extraData),
        gasLimit: ethUtil.toBuffer(jsonBlock.gasLimit),
        gasUsed: ethUtil.toBuffer(jsonBlock.gasUsed),
        timestamp: ethUtil.toBuffer(jsonBlock.timestamp),
        transactions: jsonBlock.transactions
      };
    }
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/waterfall.js
var require_waterfall2 = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/waterfall.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = function(tasks, callback) {
      callback = (0, _once2.default)(callback || _noop2.default);
      if (!(0, _isArray2.default)(tasks))
        return callback(new Error("First argument to waterfall must be an array of functions"));
      if (!tasks.length)
        return callback();
      var taskIndex = 0;
      function nextTask(args) {
        var task = (0, _wrapAsync2.default)(tasks[taskIndex++]);
        args.push((0, _onlyOnce2.default)(next));
        task.apply(null, args);
      }
      function next(err) {
        if (err || taskIndex === tasks.length) {
          return callback.apply(null, arguments);
        }
        nextTask((0, _slice2.default)(arguments, 1));
      }
      nextTask([]);
    };
    var _isArray = require_isArray();
    var _isArray2 = _interopRequireDefault(_isArray);
    var _noop = require_noop();
    var _noop2 = _interopRequireDefault(_noop);
    var _once = require_once2();
    var _once2 = _interopRequireDefault(_once);
    var _slice = require_slice();
    var _slice2 = _interopRequireDefault(_slice);
    var _onlyOnce = require_onlyOnce2();
    var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
    var _wrapAsync = require_wrapAsync2();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/parallel.js
var require_parallel = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/internal/parallel.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = _parallel;
    var _noop = require_noop();
    var _noop2 = _interopRequireDefault(_noop);
    var _isArrayLike = require_isArrayLike();
    var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
    var _slice = require_slice();
    var _slice2 = _interopRequireDefault(_slice);
    var _wrapAsync = require_wrapAsync2();
    var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _parallel(eachfn, tasks, callback) {
      callback = callback || _noop2.default;
      var results = (0, _isArrayLike2.default)(tasks) ? [] : {};
      eachfn(tasks, function(task, key, callback2) {
        (0, _wrapAsync2.default)(task)(function(err, result) {
          if (arguments.length > 2) {
            result = (0, _slice2.default)(arguments, 1);
          }
          results[key] = result;
          callback2(err);
        });
      }, function(err) {
        callback(err, results);
      });
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/parallel.js
var require_parallel2 = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/node_modules/async/parallel.js"(exports, module) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = parallelLimit;
    var _eachOf = require_eachOf();
    var _eachOf2 = _interopRequireDefault(_eachOf);
    var _parallel = require_parallel();
    var _parallel2 = _interopRequireDefault(_parallel);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function parallelLimit(tasks, callback) {
      (0, _parallel2.default)(_eachOf2.default, tasks, callback);
    }
    module.exports = exports["default"];
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/subproviders/subprovider.js
var require_subprovider = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/subproviders/subprovider.js"(exports, module) {
    init_define_process_env();
    var createPayload = require_create_payload();
    module.exports = SubProvider;
    function SubProvider() {
    }
    SubProvider.prototype.setEngine = function(engine) {
      const self2 = this;
      if (self2.engine)
        return;
      self2.engine = engine;
      engine.on("block", function(block) {
        self2.currentBlock = block;
      });
      engine.on("start", function() {
        self2.start();
      });
      engine.on("stop", function() {
        self2.stop();
      });
    };
    SubProvider.prototype.handleRequest = function(payload, next, end) {
      throw new Error("Subproviders should override `handleRequest`.");
    };
    SubProvider.prototype.emitPayload = function(payload, cb) {
      const self2 = this;
      self2.engine.sendAsync(createPayload(payload), cb);
    };
    SubProvider.prototype.stop = function() {
    };
    SubProvider.prototype.start = function() {
    };
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/util/estimate-gas.js
var require_estimate_gas = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/util/estimate-gas.js"(exports, module) {
    init_define_process_env();
    var createPayload = require_create_payload();
    module.exports = estimateGas;
    function estimateGas(provider, txParams, cb) {
      provider.sendAsync(createPayload({
        method: "eth_estimateGas",
        params: [txParams]
      }), function(err, res) {
        if (err) {
          if (err.message === "no contract code at given address") {
            return cb(null, "0xcf08");
          } else {
            return cb(err);
          }
        }
        cb(null, res.result);
      });
    }
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/subproviders/hooked-wallet.js
var require_hooked_wallet = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/subproviders/hooked-wallet.js"(exports, module) {
    init_define_process_env();
    var waterfall = require_waterfall2();
    var parallel = require_parallel2();
    var inherits = require_util().inherits;
    var ethUtil = require_dist();
    var sigUtil = require_eth_sig_util();
    var extend = require_immutable();
    var Semaphore = require_semaphore();
    var Subprovider = require_subprovider();
    var estimateGas = require_estimate_gas();
    var hexRegex = /^[0-9A-Fa-f]+$/g;
    module.exports = HookedWalletSubprovider;
    inherits(HookedWalletSubprovider, Subprovider);
    function HookedWalletSubprovider(opts) {
      const self2 = this;
      self2.nonceLock = Semaphore(1);
      if (opts.getAccounts)
        self2.getAccounts = opts.getAccounts;
      if (opts.processTransaction)
        self2.processTransaction = opts.processTransaction;
      if (opts.processSignTransaction)
        self2.processSignTransaction = opts.processSignTransaction;
      if (opts.processMessage)
        self2.processMessage = opts.processMessage;
      if (opts.processPersonalMessage)
        self2.processPersonalMessage = opts.processPersonalMessage;
      if (opts.processTypedMessage)
        self2.processTypedMessage = opts.processTypedMessage;
      self2.approveTransaction = opts.approveTransaction || self2.autoApprove;
      self2.approveMessage = opts.approveMessage || self2.autoApprove;
      self2.approvePersonalMessage = opts.approvePersonalMessage || self2.autoApprove;
      self2.approveTypedMessage = opts.approveTypedMessage || self2.autoApprove;
      self2.signTransaction = opts.signTransaction || mustProvideInConstructor("signTransaction");
      self2.signMessage = opts.signMessage || mustProvideInConstructor("signMessage");
      self2.signPersonalMessage = opts.signPersonalMessage || mustProvideInConstructor("signPersonalMessage");
      self2.signTypedMessage = opts.signTypedMessage || mustProvideInConstructor("signTypedMessage");
      if (opts.recoverPersonalSignature)
        self2.recoverPersonalSignature = opts.recoverPersonalSignature;
      if (opts.publishTransaction)
        self2.publishTransaction = opts.publishTransaction;
      self2.estimateGas = opts.estimateGas || self2.estimateGas;
      self2.getGasPrice = opts.getGasPrice || self2.getGasPrice;
    }
    HookedWalletSubprovider.prototype.handleRequest = function(payload, next, end) {
      const self2 = this;
      self2._parityRequests = {};
      self2._parityRequestCount = 0;
      let txParams, msgParams, extraParams;
      let message, address;
      switch (payload.method) {
        case "eth_coinbase":
          self2.getAccounts(function(err, accounts) {
            if (err)
              return end(err);
            let result = accounts[0] || null;
            end(null, result);
          });
          return;
        case "eth_accounts":
          self2.getAccounts(function(err, accounts) {
            if (err)
              return end(err);
            end(null, accounts);
          });
          return;
        case "eth_sendTransaction":
          txParams = payload.params[0];
          waterfall([
            (cb) => self2.validateTransaction(txParams, cb),
            (cb) => self2.processTransaction(txParams, cb)
          ], end);
          return;
        case "eth_signTransaction":
          txParams = payload.params[0];
          waterfall([
            (cb) => self2.validateTransaction(txParams, cb),
            (cb) => self2.processSignTransaction(txParams, cb)
          ], end);
          return;
        case "eth_sign":
          address = payload.params[0];
          message = payload.params[1];
          extraParams = payload.params[2] || {};
          msgParams = extend(extraParams, {
            from: address,
            data: message
          });
          waterfall([
            (cb) => self2.validateMessage(msgParams, cb),
            (cb) => self2.processMessage(msgParams, cb)
          ], end);
          return;
        case "personal_sign":
          return function() {
            const first = payload.params[0];
            const second = payload.params[1];
            if (resemblesData(second) && resemblesAddress(first)) {
              let warning = `The eth_personalSign method requires params ordered `;
              warning += `[message, address]. This was previously handled incorrectly, `;
              warning += `and has been corrected automatically. `;
              warning += `Please switch this param order for smooth behavior in the future.`;
              console.warn(warning);
              address = payload.params[0];
              message = payload.params[1];
            } else {
              message = payload.params[0];
              address = payload.params[1];
            }
            extraParams = payload.params[2] || {};
            msgParams = extend(extraParams, {
              from: address,
              data: message
            });
            waterfall([
              (cb) => self2.validatePersonalMessage(msgParams, cb),
              (cb) => self2.processPersonalMessage(msgParams, cb)
            ], end);
          }();
        case "personal_ecRecover":
          return function() {
            message = payload.params[0];
            let signature = payload.params[1];
            extraParams = payload.params[2] || {};
            msgParams = extend(extraParams, {
              sig: signature,
              data: message
            });
            self2.recoverPersonalSignature(msgParams, end);
          }();
        case "eth_signTypedData":
          message = payload.params[0];
          address = payload.params[1];
          extraParams = payload.params[2] || {};
          msgParams = extend(extraParams, {
            from: address,
            data: message
          });
          waterfall([
            (cb) => self2.validateTypedMessage(msgParams, cb),
            (cb) => self2.processTypedMessage(msgParams, cb)
          ], end);
          return;
        case "parity_postTransaction":
          txParams = payload.params[0];
          self2.parityPostTransaction(txParams, end);
          return;
        case "parity_postSign":
          address = payload.params[0];
          message = payload.params[1];
          self2.parityPostSign(address, message, end);
          return;
        case "parity_checkRequest":
          return function() {
            const requestId = payload.params[0];
            self2.parityCheckRequest(requestId, end);
          }();
        case "parity_defaultAccount":
          self2.getAccounts(function(err, accounts) {
            if (err)
              return end(err);
            const account = accounts[0] || null;
            end(null, account);
          });
          return;
        default:
          next();
          return;
      }
    };
    HookedWalletSubprovider.prototype.getAccounts = function(cb) {
      cb(null, []);
    };
    HookedWalletSubprovider.prototype.processTransaction = function(txParams, cb) {
      const self2 = this;
      waterfall([
        (cb2) => self2.approveTransaction(txParams, cb2),
        (didApprove, cb2) => self2.checkApproval("transaction", didApprove, cb2),
        (cb2) => self2.finalizeAndSubmitTx(txParams, cb2)
      ], cb);
    };
    HookedWalletSubprovider.prototype.processSignTransaction = function(txParams, cb) {
      const self2 = this;
      waterfall([
        (cb2) => self2.approveTransaction(txParams, cb2),
        (didApprove, cb2) => self2.checkApproval("transaction", didApprove, cb2),
        (cb2) => self2.finalizeTx(txParams, cb2)
      ], cb);
    };
    HookedWalletSubprovider.prototype.processMessage = function(msgParams, cb) {
      const self2 = this;
      waterfall([
        (cb2) => self2.approveMessage(msgParams, cb2),
        (didApprove, cb2) => self2.checkApproval("message", didApprove, cb2),
        (cb2) => self2.signMessage(msgParams, cb2)
      ], cb);
    };
    HookedWalletSubprovider.prototype.processPersonalMessage = function(msgParams, cb) {
      const self2 = this;
      waterfall([
        (cb2) => self2.approvePersonalMessage(msgParams, cb2),
        (didApprove, cb2) => self2.checkApproval("message", didApprove, cb2),
        (cb2) => self2.signPersonalMessage(msgParams, cb2)
      ], cb);
    };
    HookedWalletSubprovider.prototype.processTypedMessage = function(msgParams, cb) {
      const self2 = this;
      waterfall([
        (cb2) => self2.approveTypedMessage(msgParams, cb2),
        (didApprove, cb2) => self2.checkApproval("message", didApprove, cb2),
        (cb2) => self2.signTypedMessage(msgParams, cb2)
      ], cb);
    };
    HookedWalletSubprovider.prototype.autoApprove = function(txParams, cb) {
      cb(null, true);
    };
    HookedWalletSubprovider.prototype.checkApproval = function(type, didApprove, cb) {
      cb(didApprove ? null : new Error("User denied " + type + " signature."));
    };
    HookedWalletSubprovider.prototype.parityPostTransaction = function(txParams, cb) {
      const self2 = this;
      const count = self2._parityRequestCount;
      const reqId = `0x${count.toString(16)}`;
      self2._parityRequestCount++;
      self2.emitPayload({
        method: "eth_sendTransaction",
        params: [txParams]
      }, function(error, res) {
        if (error) {
          self2._parityRequests[reqId] = { error };
          return;
        }
        const txHash = res.result;
        self2._parityRequests[reqId] = txHash;
      });
      cb(null, reqId);
    };
    HookedWalletSubprovider.prototype.parityPostSign = function(address, message, cb) {
      const self2 = this;
      const count = self2._parityRequestCount;
      const reqId = `0x${count.toString(16)}`;
      self2._parityRequestCount++;
      self2.emitPayload({
        method: "eth_sign",
        params: [address, message]
      }, function(error, res) {
        if (error) {
          self2._parityRequests[reqId] = { error };
          return;
        }
        const result = res.result;
        self2._parityRequests[reqId] = result;
      });
      cb(null, reqId);
    };
    HookedWalletSubprovider.prototype.parityCheckRequest = function(reqId, cb) {
      const self2 = this;
      const result = self2._parityRequests[reqId] || null;
      if (!result)
        return cb(null, null);
      if (result.error)
        return cb(result.error);
      cb(null, result);
    };
    HookedWalletSubprovider.prototype.recoverPersonalSignature = function(msgParams, cb) {
      let senderHex;
      try {
        senderHex = sigUtil.recoverPersonalSignature(msgParams);
      } catch (err) {
        return cb(err);
      }
      cb(null, senderHex);
    };
    HookedWalletSubprovider.prototype.validateTransaction = function(txParams, cb) {
      const self2 = this;
      if (txParams.from === void 0)
        return cb(new Error(`Undefined address - from address required to sign transaction.`));
      self2.validateSender(txParams.from, function(err, senderIsValid) {
        if (err)
          return cb(err);
        if (!senderIsValid)
          return cb(new Error(`Unknown address - unable to sign transaction for this address: "${txParams.from}"`));
        cb();
      });
    };
    HookedWalletSubprovider.prototype.validateMessage = function(msgParams, cb) {
      const self2 = this;
      if (msgParams.from === void 0)
        return cb(new Error(`Undefined address - from address required to sign message.`));
      self2.validateSender(msgParams.from, function(err, senderIsValid) {
        if (err)
          return cb(err);
        if (!senderIsValid)
          return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`));
        cb();
      });
    };
    HookedWalletSubprovider.prototype.validatePersonalMessage = function(msgParams, cb) {
      const self2 = this;
      if (msgParams.from === void 0)
        return cb(new Error(`Undefined address - from address required to sign personal message.`));
      if (msgParams.data === void 0)
        return cb(new Error(`Undefined message - message required to sign personal message.`));
      if (!isValidHex(msgParams.data))
        return cb(new Error(`HookedWalletSubprovider - validateMessage - message was not encoded as hex.`));
      self2.validateSender(msgParams.from, function(err, senderIsValid) {
        if (err)
          return cb(err);
        if (!senderIsValid)
          return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`));
        cb();
      });
    };
    HookedWalletSubprovider.prototype.validateTypedMessage = function(msgParams, cb) {
      if (msgParams.from === void 0)
        return cb(new Error(`Undefined address - from address required to sign typed data.`));
      if (msgParams.data === void 0)
        return cb(new Error(`Undefined data - message required to sign typed data.`));
      this.validateSender(msgParams.from, function(err, senderIsValid) {
        if (err)
          return cb(err);
        if (!senderIsValid)
          return cb(new Error(`Unknown address - unable to sign message for this address: "${msgParams.from}"`));
        cb();
      });
    };
    HookedWalletSubprovider.prototype.validateSender = function(senderAddress, cb) {
      const self2 = this;
      if (!senderAddress)
        return cb(null, false);
      self2.getAccounts(function(err, accounts) {
        if (err)
          return cb(err);
        const senderIsValid = accounts.map(toLowerCase).indexOf(senderAddress.toLowerCase()) !== -1;
        cb(null, senderIsValid);
      });
    };
    HookedWalletSubprovider.prototype.finalizeAndSubmitTx = function(txParams, cb) {
      const self2 = this;
      self2.nonceLock.take(function() {
        waterfall([
          self2.fillInTxExtras.bind(self2, txParams),
          self2.signTransaction.bind(self2),
          self2.publishTransaction.bind(self2)
        ], function(err, txHash) {
          self2.nonceLock.leave();
          if (err)
            return cb(err);
          cb(null, txHash);
        });
      });
    };
    HookedWalletSubprovider.prototype.finalizeTx = function(txParams, cb) {
      const self2 = this;
      self2.nonceLock.take(function() {
        waterfall([
          self2.fillInTxExtras.bind(self2, txParams),
          self2.signTransaction.bind(self2)
        ], function(err, signedTx) {
          self2.nonceLock.leave();
          if (err)
            return cb(err);
          cb(null, { raw: signedTx, tx: txParams });
        });
      });
    };
    HookedWalletSubprovider.prototype.publishTransaction = function(rawTx, cb) {
      const self2 = this;
      self2.emitPayload({
        method: "eth_sendRawTransaction",
        params: [rawTx]
      }, function(err, res) {
        if (err)
          return cb(err);
        cb(null, res.result);
      });
    };
    HookedWalletSubprovider.prototype.estimateGas = function(txParams, cb) {
      const self2 = this;
      estimateGas(self2.engine, txParams, cb);
    };
    HookedWalletSubprovider.prototype.getGasPrice = function(cb) {
      const self2 = this;
      self2.emitPayload({ method: "eth_gasPrice", params: [] }, function(err, res) {
        if (err)
          return cb(err);
        cb(null, res.result);
      });
    };
    HookedWalletSubprovider.prototype.fillInTxExtras = function(txParams, cb) {
      const self2 = this;
      const address = txParams.from;
      const tasks = {};
      if (txParams.gasPrice === void 0) {
        tasks.gasPrice = self2.getGasPrice.bind(self2);
      }
      if (txParams.nonce === void 0) {
        tasks.nonce = self2.emitPayload.bind(self2, { method: "eth_getTransactionCount", params: [address, "pending"] });
      }
      if (txParams.gas === void 0) {
        tasks.gas = self2.estimateGas.bind(self2, cloneTxParams(txParams));
      }
      parallel(tasks, function(err, taskResults) {
        if (err)
          return cb(err);
        const result = {};
        if (taskResults.gasPrice)
          result.gasPrice = taskResults.gasPrice;
        if (taskResults.nonce)
          result.nonce = taskResults.nonce.result;
        if (taskResults.gas)
          result.gas = taskResults.gas;
        cb(null, extend(txParams, result));
      });
    };
    function cloneTxParams(txParams) {
      return {
        from: txParams.from,
        to: txParams.to,
        value: txParams.value,
        data: txParams.data,
        gas: txParams.gas,
        gasPrice: txParams.gasPrice,
        nonce: txParams.nonce
      };
    }
    function toLowerCase(string) {
      return string.toLowerCase();
    }
    function resemblesAddress(string) {
      const fixed = ethUtil.addHexPrefix(string);
      const isValid = ethUtil.isValidAddress(fixed);
      return isValid;
    }
    function resemblesData(string) {
      const fixed = ethUtil.addHexPrefix(string);
      const isValidAddress = ethUtil.isValidAddress(fixed);
      return !isValidAddress && isValidHex(string);
    }
    function isValidHex(data) {
      const isString = typeof data === "string";
      if (!isString)
        return false;
      const isHexPrefixed = data.slice(0, 2) === "0x";
      if (!isHexPrefixed)
        return false;
      const nonPrefixed = data.slice(2);
      const isValid = nonPrefixed.match(hexRegex);
      return isValid;
    }
    function mustProvideInConstructor(methodName) {
      return function(params, cb) {
        cb(new Error('ProviderEngine - HookedWalletSubprovider - Must provide "' + methodName + '" fn in constructor options'));
      };
    }
  }
});

// node_modules/global/window.js
var require_window = __commonJS({
  "node_modules/global/window.js"(exports, module) {
    init_define_process_env();
    var win;
    if (typeof window !== "undefined") {
      win = window;
    } else if (typeof global !== "undefined") {
      win = global;
    } else if (typeof self !== "undefined") {
      win = self;
    } else {
      win = {};
    }
    module.exports = win;
  }
});

// node_modules/is-function/index.js
var require_is_function = __commonJS({
  "node_modules/is-function/index.js"(exports, module) {
    init_define_process_env();
    module.exports = isFunction;
    var toString = Object.prototype.toString;
    function isFunction(fn) {
      if (!fn) {
        return false;
      }
      var string = toString.call(fn);
      return string === "[object Function]" || typeof fn === "function" && string !== "[object RegExp]" || typeof window !== "undefined" && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt);
    }
  }
});

// node_modules/parse-headers/parse-headers.js
var require_parse_headers = __commonJS({
  "node_modules/parse-headers/parse-headers.js"(exports, module) {
    init_define_process_env();
    var trim = function(string) {
      return string.replace(/^\s+|\s+$/g, "");
    };
    var isArray = function(arg) {
      return Object.prototype.toString.call(arg) === "[object Array]";
    };
    module.exports = function(headers) {
      if (!headers)
        return {};
      var result = {};
      var headersArr = trim(headers).split("\n");
      for (var i = 0; i < headersArr.length; i++) {
        var row = headersArr[i];
        var index = row.indexOf(":"), key = trim(row.slice(0, index)).toLowerCase(), value = trim(row.slice(index + 1));
        if (typeof result[key] === "undefined") {
          result[key] = value;
        } else if (isArray(result[key])) {
          result[key].push(value);
        } else {
          result[key] = [result[key], value];
        }
      }
      return result;
    };
  }
});

// node_modules/xhr/index.js
var require_xhr = __commonJS({
  "node_modules/xhr/index.js"(exports, module) {
    init_define_process_env();
    "use strict";
    var window2 = require_window();
    var isFunction = require_is_function();
    var parseHeaders = require_parse_headers();
    var xtend = require_immutable();
    module.exports = createXHR;
    module.exports.default = createXHR;
    createXHR.XMLHttpRequest = window2.XMLHttpRequest || noop;
    createXHR.XDomainRequest = "withCredentials" in new createXHR.XMLHttpRequest() ? createXHR.XMLHttpRequest : window2.XDomainRequest;
    forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
      createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
        options = initParams(uri, options, callback);
        options.method = method.toUpperCase();
        return _createXHR(options);
      };
    });
    function forEachArray(array, iterator) {
      for (var i = 0; i < array.length; i++) {
        iterator(array[i]);
      }
    }
    function isEmpty(obj) {
      for (var i in obj) {
        if (obj.hasOwnProperty(i))
          return false;
      }
      return true;
    }
    function initParams(uri, options, callback) {
      var params = uri;
      if (isFunction(options)) {
        callback = options;
        if (typeof uri === "string") {
          params = { uri };
        }
      } else {
        params = xtend(options, { uri });
      }
      params.callback = callback;
      return params;
    }
    function createXHR(uri, options, callback) {
      options = initParams(uri, options, callback);
      return _createXHR(options);
    }
    function _createXHR(options) {
      if (typeof options.callback === "undefined") {
        throw new Error("callback argument missing");
      }
      var called = false;
      var callback = function cbOnce(err, response, body2) {
        if (!called) {
          called = true;
          options.callback(err, response, body2);
        }
      };
      function readystatechange() {
        if (xhr.readyState === 4) {
          setTimeout(loadFunc, 0);
        }
      }
      function getBody() {
        var body2 = void 0;
        if (xhr.response) {
          body2 = xhr.response;
        } else {
          body2 = xhr.responseText || getXml(xhr);
        }
        if (isJson) {
          try {
            body2 = JSON.parse(body2);
          } catch (e) {
          }
        }
        return body2;
      }
      function errorFunc(evt) {
        clearTimeout(timeoutTimer);
        if (!(evt instanceof Error)) {
          evt = new Error("" + (evt || "Unknown XMLHttpRequest Error"));
        }
        evt.statusCode = 0;
        return callback(evt, failureResponse);
      }
      function loadFunc() {
        if (aborted)
          return;
        var status;
        clearTimeout(timeoutTimer);
        if (options.useXDR && xhr.status === void 0) {
          status = 200;
        } else {
          status = xhr.status === 1223 ? 204 : xhr.status;
        }
        var response = failureResponse;
        var err = null;
        if (status !== 0) {
          response = {
            body: getBody(),
            statusCode: status,
            method,
            headers: {},
            url: uri,
            rawRequest: xhr
          };
          if (xhr.getAllResponseHeaders) {
            response.headers = parseHeaders(xhr.getAllResponseHeaders());
          }
        } else {
          err = new Error("Internal XMLHttpRequest Error");
        }
        return callback(err, response, response.body);
      }
      var xhr = options.xhr || null;
      if (!xhr) {
        if (options.cors || options.useXDR) {
          xhr = new createXHR.XDomainRequest();
        } else {
          xhr = new createXHR.XMLHttpRequest();
        }
      }
      var key;
      var aborted;
      var uri = xhr.url = options.uri || options.url;
      var method = xhr.method = options.method || "GET";
      var body = options.body || options.data;
      var headers = xhr.headers = options.headers || {};
      var sync = !!options.sync;
      var isJson = false;
      var timeoutTimer;
      var failureResponse = {
        body: void 0,
        headers: {},
        statusCode: 0,
        method,
        url: uri,
        rawRequest: xhr
      };
      if ("json" in options && options.json !== false) {
        isJson = true;
        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json");
        if (method !== "GET" && method !== "HEAD") {
          headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json");
          body = JSON.stringify(options.json === true ? body : options.json);
        }
      }
      xhr.onreadystatechange = readystatechange;
      xhr.onload = loadFunc;
      xhr.onerror = errorFunc;
      xhr.onprogress = function() {
      };
      xhr.onabort = function() {
        aborted = true;
      };
      xhr.ontimeout = errorFunc;
      xhr.open(method, uri, !sync, options.username, options.password);
      if (!sync) {
        xhr.withCredentials = !!options.withCredentials;
      }
      if (!sync && options.timeout > 0) {
        timeoutTimer = setTimeout(function() {
          if (aborted)
            return;
          aborted = true;
          xhr.abort("timeout");
          var e = new Error("XMLHttpRequest timeout");
          e.code = "ETIMEDOUT";
          errorFunc(e);
        }, options.timeout);
      }
      if (xhr.setRequestHeader) {
        for (key in headers) {
          if (headers.hasOwnProperty(key)) {
            xhr.setRequestHeader(key, headers[key]);
          }
        }
      } else if (options.headers && !isEmpty(options.headers)) {
        throw new Error("Headers cannot be set on an XDomainRequest object");
      }
      if ("responseType" in options) {
        xhr.responseType = options.responseType;
      }
      if ("beforeSend" in options && typeof options.beforeSend === "function") {
        options.beforeSend(xhr);
      }
      xhr.send(body || null);
      return xhr;
    }
    function getXml(xhr) {
      try {
        if (xhr.responseType === "document") {
          return xhr.responseXML;
        }
        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror";
        if (xhr.responseType === "" && !firefoxBugTakenEffect) {
          return xhr.responseXML;
        }
      } catch (e) {
      }
      return null;
    }
    function noop() {
    }
  }
});

// browser-external:request
var request_exports = {};
__export(request_exports, {
  default: () => request_default
});
var request_default;
var init_request = __esm({
  "browser-external:request"() {
    init_define_process_env();
    request_default = new Proxy({}, {
      get() {
        throw new Error('Module "request" has been externalized for browser compatibility and cannot be accessed in client code.');
      }
    });
  }
});

// node_modules/eth-json-rpc-errors/src/classes.js
var require_classes = __commonJS({
  "node_modules/eth-json-rpc-errors/src/classes.js"(exports, module) {
    init_define_process_env();
    var safeStringify = require_fast_safe_stringify();
    var JsonRpcError = class extends Error {
      constructor(code, message, data) {
        if (!Number.isInteger(code))
          throw new Error('"code" must be an integer.');
        if (!message || typeof message !== "string")
          throw new Error('"message" must be a nonempty string.');
        super(message);
        this.code = code;
        if (data !== void 0)
          this.data = data;
      }
      serialize() {
        const serialized = {
          code: this.code,
          message: this.message
        };
        if (this.data !== void 0)
          serialized.data = this.data;
        if (this.stack)
          serialized.stack = this.stack;
        return serialized;
      }
      toString() {
        return safeStringify(this.serialize(), stringifyReplacer, 2);
      }
    };
    var EthJsonRpcError = class extends JsonRpcError {
      constructor(code, message, data) {
        if (!isValidEthCode(code)) {
          throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
        }
        super(code, message, data);
      }
    };
    function isValidEthCode(code) {
      return Number.isInteger(code) && code >= 1e3 && code <= 4999;
    }
    function stringifyReplacer(_, value) {
      if (value === "[Circular]") {
        return;
      }
      return value;
    }
    module.exports = {
      JsonRpcError,
      EthJsonRpcError
    };
  }
});

// node_modules/eth-json-rpc-errors/src/errorValues.json
var require_errorValues = __commonJS({
  "node_modules/eth-json-rpc-errors/src/errorValues.json"(exports, module) {
    module.exports = {
      "-32700": {
        standard: "JSON RPC 2.0",
        message: "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
      },
      "-32600": {
        standard: "JSON RPC 2.0",
        message: "The JSON sent is not a valid Request object."
      },
      "-32601": {
        standard: "JSON RPC 2.0",
        message: "The method does not exist / is not available."
      },
      "-32602": {
        standard: "JSON RPC 2.0",
        message: "Invalid method parameter(s)."
      },
      "-32603": {
        standard: "JSON RPC 2.0",
        message: "Internal JSON-RPC error."
      },
      "4001": {
        standard: "EIP 1193",
        message: "User rejected the request."
      },
      "4100": {
        standard: "EIP 1193",
        message: "The requested account and/or method has not been authorized by the user."
      },
      "4200": {
        standard: "EIP 1193",
        message: "The requested method is not supported by this Ethereum provider."
      }
    };
  }
});

// node_modules/eth-json-rpc-errors/src/errorCodes.json
var require_errorCodes2 = __commonJS({
  "node_modules/eth-json-rpc-errors/src/errorCodes.json"(exports, module) {
    module.exports = {
      jsonRpc: {
        parse: -32700,
        invalidRequest: -32600,
        methodNotFound: -32601,
        invalidParams: -32602,
        internal: -32603
      },
      eth: {
        userRejectedRequest: 4001,
        unauthorized: 4100,
        unsupportedMethod: 4200
      }
    };
  }
});

// node_modules/eth-json-rpc-errors/src/utils.js
var require_utils = __commonJS({
  "node_modules/eth-json-rpc-errors/src/utils.js"(exports, module) {
    init_define_process_env();
    var errorValues = require_errorValues();
    var FALLBACK_ERROR_CODE = require_errorCodes2().jsonRpc.internal;
    var { JsonRpcError } = require_classes();
    var JSON_RPC_SERVER_ERROR_MESSAGE = "Unspecified server error.";
    var FALLBACK_MESSAGE = "Unspecified error message. This is  bug, please report it.";
    var FALLBACK_ERROR = {
      code: FALLBACK_ERROR_CODE,
      message: getMessageFromCode(FALLBACK_ERROR_CODE)
    };
    function getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {
      if (Number.isInteger(code)) {
        const codeString = code.toString();
        if (errorValues[codeString])
          return errorValues[codeString].message;
        if (isJsonRpcServerError(code))
          return JSON_RPC_SERVER_ERROR_MESSAGE;
      }
      return fallbackMessage;
    }
    function isValidCode(code) {
      if (!Number.isInteger(code))
        return false;
      const codeString = code.toString();
      if (errorValues[codeString])
        return true;
      if (isJsonRpcServerError(code))
        return true;
      return false;
    }
    function serializeError(error, fallbackError = FALLBACK_ERROR) {
      if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== "string") {
        throw new Error("fallbackError must contain integer number code and string message.");
      }
      if (typeof error === "object" && error instanceof JsonRpcError) {
        return error.serialize();
      }
      const serialized = {};
      if (error && isValidCode(error.code)) {
        serialized.code = error.code;
        if (error.message && typeof error.message === "string") {
          serialized.message = error.message;
          if (error.hasOwnProperty("data"))
            serialized.data = error.data;
        } else {
          serialized.message = getMessageFromCode(serialized.code);
          serialized.data = { originalError: assignOriginalError(error) };
        }
      } else {
        serialized.code = fallbackError.code;
        serialized.message = error && error.message ? error.message : fallbackError.message;
        serialized.data = { originalError: assignOriginalError(error) };
      }
      if (error && error.stack)
        serialized.stack = error.stack;
      return serialized;
    }
    function isJsonRpcServerError(code) {
      return code >= -32099 && code <= -32e3;
    }
    function assignOriginalError(error) {
      if (error && typeof error === "object" && !Array.isArray(error)) {
        return Object.assign({}, error);
      }
      return error;
    }
    module.exports = {
      getMessageFromCode,
      isValidCode,
      serializeError,
      JSON_RPC_SERVER_ERROR_MESSAGE
    };
  }
});

// node_modules/eth-json-rpc-errors/src/errors.js
var require_errors = __commonJS({
  "node_modules/eth-json-rpc-errors/src/errors.js"(exports, module) {
    init_define_process_env();
    var { JsonRpcError, EthJsonRpcError } = require_classes();
    var { getMessageFromCode } = require_utils();
    var ERROR_CODES = require_errorCodes2();
    module.exports = {
      parse: (message, data) => getJsonRpcError(ERROR_CODES.jsonRpc.parse, message, data),
      invalidRequest: (message, data) => getJsonRpcError(ERROR_CODES.jsonRpc.invalidRequest, message, data),
      invalidParams: (message, data) => getJsonRpcError(ERROR_CODES.jsonRpc.invalidParams, message, data),
      methodNotFound: (message, data) => getJsonRpcError(ERROR_CODES.jsonRpc.methodNotFound, message, data),
      internal: (message, data) => getJsonRpcError(ERROR_CODES.jsonRpc.internal, message, data),
      server: (code, message, data) => {
        if (!Number.isInteger(code) || code > -32e3 || code < -32099) {
          throw new Error('"code" must be an integer such that: -32099 <= code <= -32000');
        }
        return getJsonRpcError(code, message, data);
      },
      eth: {
        userRejectedRequest: (message, data) => {
          return getEthJsonRpcError(ERROR_CODES.eth.userRejectedRequest, message, data);
        },
        unauthorized: (message, data) => {
          return getEthJsonRpcError(ERROR_CODES.eth.unauthorized, message, data);
        },
        unsupportedMethod: (message, data) => {
          return getEthJsonRpcError(ERROR_CODES.eth.unsupportedMethod, message, data);
        },
        custom: (code, message, data) => {
          if (!message || typeof message !== "string")
            throw new Error('"message" must be a nonempty string');
          return new EthJsonRpcError(code, message, data);
        }
      }
    };
    function getJsonRpcError(code, message, data) {
      return new JsonRpcError(code, message || getMessageFromCode(code), data);
    }
    function getEthJsonRpcError(code, message, data) {
      return new EthJsonRpcError(code, message || getMessageFromCode(code), data);
    }
  }
});

// node_modules/eth-json-rpc-errors/index.js
var require_eth_json_rpc_errors = __commonJS({
  "node_modules/eth-json-rpc-errors/index.js"(exports, module) {
    init_define_process_env();
    var { JsonRpcError, EthJsonRpcError } = require_classes();
    var {
      serializeError,
      getMessageFromCode
    } = require_utils();
    var errors = require_errors();
    var ERROR_CODES = require_errorCodes2();
    module.exports = {
      errors,
      JsonRpcError,
      EthJsonRpcError,
      serializeError,
      getMessageFromCode,
      ERROR_CODES
    };
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/subproviders/rpc.js
var require_rpc = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/subproviders/rpc.js"(exports, module) {
    init_define_process_env();
    var xhr = process.browser ? require_xhr() : (init_request(), request_exports);
    var inherits = require_util().inherits;
    var createPayload = require_create_payload();
    var Subprovider = require_subprovider();
    var { errors: rpcErrors } = require_eth_json_rpc_errors();
    module.exports = RpcSource;
    inherits(RpcSource, Subprovider);
    function RpcSource(opts) {
      const self2 = this;
      self2.rpcUrl = opts.rpcUrl;
    }
    RpcSource.prototype.handleRequest = function(payload, next, end) {
      const self2 = this;
      const targetUrl = self2.rpcUrl;
      let newPayload = createPayload(payload);
      xhr({
        uri: targetUrl,
        method: "POST",
        headers: {
          "Accept": "application/json",
          "Content-Type": "application/json"
        },
        body: JSON.stringify(newPayload),
        rejectUnauthorized: false,
        timeout: 2e4
      }, function(err, res, body) {
        if (err)
          return end(rpcErrors.internal(err));
        switch (res.statusCode) {
          case 405:
            return end(rpcErrors.methodNotFound());
          case 504:
            return function() {
              let msg = `Gateway timeout. The request took too long to process. `;
              msg += `This can happen when querying logs over too wide a block range.`;
              return end(rpcErrors.internal(msg));
            }();
          case 429:
            return function() {
              const err2 = new Error(`Too Many Requests`);
              return end(rpcErrors.internal(err2));
            }();
          default:
            if (res.statusCode != 200) {
              return end(rpcErrors.internal(res.body));
            }
        }
        let data;
        try {
          data = JSON.parse(body);
        } catch (err2) {
          console.error(err2.stack);
          return end(rpcErrors.internal(err2));
        }
        if (data.error)
          return end(data.error);
        end(null, data.result);
      });
    };
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js
var require_json_rpc_engine_middleware = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/subproviders/json-rpc-engine-middleware.js"(exports, module) {
    init_define_process_env();
    var Subprovider = require_subprovider();
    var JsonRpcEngineMiddlewareSubprovider = class extends Subprovider {
      constructor(constructorFn) {
        super();
        if (!constructorFn)
          throw new Error("JsonRpcEngineMiddlewareSubprovider - no constructorFn specified");
        this._constructorFn = constructorFn;
      }
      setEngine(engine) {
        if (this.middleware)
          throw new Error("JsonRpcEngineMiddlewareSubprovider - subprovider added to engine twice");
        const blockTracker = engine._blockTracker;
        const middleware = this._constructorFn({ engine, provider: engine, blockTracker });
        if (!middleware)
          throw new Error("JsonRpcEngineMiddlewareSubprovider - _constructorFn did not return middleware");
        if (typeof middleware !== "function")
          throw new Error("JsonRpcEngineMiddlewareSubprovider - specified middleware is not a function");
        this.middleware = middleware;
      }
      handleRequest(req, provEngNext, provEngEnd) {
        const res = { id: req.id };
        this.middleware(req, res, middlewareNext, middlewareEnd);
        function middlewareNext(handler) {
          provEngNext((err, result, cb) => {
            if (err) {
              delete res.result;
              res.error = { message: err.message || err };
            } else {
              res.result = result;
            }
            if (handler) {
              handler(cb);
            } else {
              cb();
            }
          });
        }
        function middlewareEnd(err) {
          if (err)
            return provEngEnd(err);
          provEngEnd(null, res.result);
        }
      }
    };
    module.exports = JsonRpcEngineMiddlewareSubprovider;
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/subproviders/subscriptions.js
var require_subscriptions = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/subproviders/subscriptions.js"(exports, module) {
    init_define_process_env();
    var ProviderSubprovider = require_json_rpc_engine_middleware();
    var createSubscriptionManager = require_subscriptionManager();
    var SubscriptionsSubprovider = class extends ProviderSubprovider {
      constructor() {
        super(({ blockTracker, provider, engine }) => {
          const { events, middleware } = createSubscriptionManager({ blockTracker, provider });
          events.on("notification", (data) => engine.emit("data", null, data));
          return middleware;
        });
      }
    };
    module.exports = SubscriptionsSubprovider;
  }
});

// node_modules/authereum/node_modules/web3-provider-engine/subproviders/filters.js
var require_filters = __commonJS({
  "node_modules/authereum/node_modules/web3-provider-engine/subproviders/filters.js"(exports, module) {
    init_define_process_env();
    var ProviderSubprovider = require_json_rpc_engine_middleware();
    var createFilterMiddleware = require_eth_json_rpc_filters();
    var SubscriptionsSubprovider = class extends ProviderSubprovider {
      constructor() {
        super(({ blockTracker, provider, engine }) => {
          return createFilterMiddleware({ blockTracker, provider });
        });
      }
    };
    module.exports = SubscriptionsSubprovider;
  }
});

// node_modules/authereum/node_modules/pify/index.js
var require_pify = __commonJS({
  "node_modules/authereum/node_modules/pify/index.js"(exports, module) {
    init_define_process_env();
    "use strict";
    var processFn = (fn, options) => function(...args) {
      const P = options.promiseModule;
      return new P((resolve, reject) => {
        if (options.multiArgs) {
          args.push((...result) => {
            if (options.errorFirst) {
              if (result[0]) {
                reject(result);
              } else {
                result.shift();
                resolve(result);
              }
            } else {
              resolve(result);
            }
          });
        } else if (options.errorFirst) {
          args.push((error, result) => {
            if (error) {
              reject(error);
            } else {
              resolve(result);
            }
          });
        } else {
          args.push(resolve);
        }
        fn.apply(this, args);
      });
    };
    module.exports = (input, options) => {
      options = Object.assign({
        exclude: [/.+(Sync|Stream)$/],
        errorFirst: true,
        promiseModule: Promise
      }, options);
      const objType = typeof input;
      if (!(input !== null && (objType === "object" || objType === "function"))) {
        throw new TypeError(`Expected \`input\` to be a \`Function\` or \`Object\`, got \`${input === null ? "null" : objType}\``);
      }
      const filter = (key) => {
        const match = (pattern) => typeof pattern === "string" ? key === pattern : pattern.test(key);
        return options.include ? options.include.some(match) : !options.exclude.some(match);
      };
      let ret;
      if (objType === "function") {
        ret = function(...args) {
          return options.excludeMain ? input(...args) : processFn(input, options).apply(this, args);
        };
      } else {
        ret = Object.create(Object.getPrototypeOf(input));
      }
      for (const key in input) {
        const property = input[key];
        ret[key] = typeof property === "function" && filter(key) ? processFn(property, options) : property;
      }
      return ret;
    };
  }
});

// node_modules/underscore/underscore.js
var require_underscore = __commonJS({
  "node_modules/underscore/underscore.js"(exports, module) {
    init_define_process_env();
    (function() {
      var root = typeof self == "object" && self.self === self && self || typeof global == "object" && global.global === global && global || this || {};
      var previousUnderscore = root._;
      var ArrayProto = Array.prototype, ObjProto = Object.prototype;
      var SymbolProto = typeof Symbol !== "undefined" ? Symbol.prototype : null;
      var push = ArrayProto.push, slice = ArrayProto.slice, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
      var nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeCreate = Object.create;
      var Ctor = function() {
      };
      var _ = function(obj) {
        if (obj instanceof _)
          return obj;
        if (!(this instanceof _))
          return new _(obj);
        this._wrapped = obj;
      };
      if (typeof exports != "undefined" && !exports.nodeType) {
        if (typeof module != "undefined" && !module.nodeType && module.exports) {
          exports = module.exports = _;
        }
        exports._ = _;
      } else {
        root._ = _;
      }
      _.VERSION = "1.9.1";
      var optimizeCb = function(func, context, argCount) {
        if (context === void 0)
          return func;
        switch (argCount == null ? 3 : argCount) {
          case 1:
            return function(value) {
              return func.call(context, value);
            };
          case 3:
            return function(value, index, collection) {
              return func.call(context, value, index, collection);
            };
          case 4:
            return function(accumulator, value, index, collection) {
              return func.call(context, accumulator, value, index, collection);
            };
        }
        return function() {
          return func.apply(context, arguments);
        };
      };
      var builtinIteratee;
      var cb = function(value, context, argCount) {
        if (_.iteratee !== builtinIteratee)
          return _.iteratee(value, context);
        if (value == null)
          return _.identity;
        if (_.isFunction(value))
          return optimizeCb(value, context, argCount);
        if (_.isObject(value) && !_.isArray(value))
          return _.matcher(value);
        return _.property(value);
      };
      _.iteratee = builtinIteratee = function(value, context) {
        return cb(value, context, Infinity);
      };
      var restArguments = function(func, startIndex) {
        startIndex = startIndex == null ? func.length - 1 : +startIndex;
        return function() {
          var length = Math.max(arguments.length - startIndex, 0), rest = Array(length), index = 0;
          for (; index < length; index++) {
            rest[index] = arguments[index + startIndex];
          }
          switch (startIndex) {
            case 0:
              return func.call(this, rest);
            case 1:
              return func.call(this, arguments[0], rest);
            case 2:
              return func.call(this, arguments[0], arguments[1], rest);
          }
          var args = Array(startIndex + 1);
          for (index = 0; index < startIndex; index++) {
            args[index] = arguments[index];
          }
          args[startIndex] = rest;
          return func.apply(this, args);
        };
      };
      var baseCreate = function(prototype) {
        if (!_.isObject(prototype))
          return {};
        if (nativeCreate)
          return nativeCreate(prototype);
        Ctor.prototype = prototype;
        var result = new Ctor();
        Ctor.prototype = null;
        return result;
      };
      var shallowProperty = function(key) {
        return function(obj) {
          return obj == null ? void 0 : obj[key];
        };
      };
      var has = function(obj, path) {
        return obj != null && hasOwnProperty.call(obj, path);
      };
      var deepGet = function(obj, path) {
        var length = path.length;
        for (var i = 0; i < length; i++) {
          if (obj == null)
            return void 0;
          obj = obj[path[i]];
        }
        return length ? obj : void 0;
      };
      var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
      var getLength = shallowProperty("length");
      var isArrayLike = function(collection) {
        var length = getLength(collection);
        return typeof length == "number" && length >= 0 && length <= MAX_ARRAY_INDEX;
      };
      _.each = _.forEach = function(obj, iteratee, context) {
        iteratee = optimizeCb(iteratee, context);
        var i, length;
        if (isArrayLike(obj)) {
          for (i = 0, length = obj.length; i < length; i++) {
            iteratee(obj[i], i, obj);
          }
        } else {
          var keys = _.keys(obj);
          for (i = 0, length = keys.length; i < length; i++) {
            iteratee(obj[keys[i]], keys[i], obj);
          }
        }
        return obj;
      };
      _.map = _.collect = function(obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length, results = Array(length);
        for (var index = 0; index < length; index++) {
          var currentKey = keys ? keys[index] : index;
          results[index] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
      };
      var createReduce = function(dir) {
        var reducer = function(obj, iteratee, memo, initial) {
          var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length, index = dir > 0 ? 0 : length - 1;
          if (!initial) {
            memo = obj[keys ? keys[index] : index];
            index += dir;
          }
          for (; index >= 0 && index < length; index += dir) {
            var currentKey = keys ? keys[index] : index;
            memo = iteratee(memo, obj[currentKey], currentKey, obj);
          }
          return memo;
        };
        return function(obj, iteratee, memo, context) {
          var initial = arguments.length >= 3;
          return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
        };
      };
      _.reduce = _.foldl = _.inject = createReduce(1);
      _.reduceRight = _.foldr = createReduce(-1);
      _.find = _.detect = function(obj, predicate, context) {
        var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
        var key = keyFinder(obj, predicate, context);
        if (key !== void 0 && key !== -1)
          return obj[key];
      };
      _.filter = _.select = function(obj, predicate, context) {
        var results = [];
        predicate = cb(predicate, context);
        _.each(obj, function(value, index, list) {
          if (predicate(value, index, list))
            results.push(value);
        });
        return results;
      };
      _.reject = function(obj, predicate, context) {
        return _.filter(obj, _.negate(cb(predicate)), context);
      };
      _.every = _.all = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
          var currentKey = keys ? keys[index] : index;
          if (!predicate(obj[currentKey], currentKey, obj))
            return false;
        }
        return true;
      };
      _.some = _.any = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
          var currentKey = keys ? keys[index] : index;
          if (predicate(obj[currentKey], currentKey, obj))
            return true;
        }
        return false;
      };
      _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
        if (!isArrayLike(obj))
          obj = _.values(obj);
        if (typeof fromIndex != "number" || guard)
          fromIndex = 0;
        return _.indexOf(obj, item, fromIndex) >= 0;
      };
      _.invoke = restArguments(function(obj, path, args) {
        var contextPath, func;
        if (_.isFunction(path)) {
          func = path;
        } else if (_.isArray(path)) {
          contextPath = path.slice(0, -1);
          path = path[path.length - 1];
        }
        return _.map(obj, function(context) {
          var method = func;
          if (!method) {
            if (contextPath && contextPath.length) {
              context = deepGet(context, contextPath);
            }
            if (context == null)
              return void 0;
            method = context[path];
          }
          return method == null ? method : method.apply(context, args);
        });
      });
      _.pluck = function(obj, key) {
        return _.map(obj, _.property(key));
      };
      _.where = function(obj, attrs) {
        return _.filter(obj, _.matcher(attrs));
      };
      _.findWhere = function(obj, attrs) {
        return _.find(obj, _.matcher(attrs));
      };
      _.max = function(obj, iteratee, context) {
        var result = -Infinity, lastComputed = -Infinity, value, computed;
        if (iteratee == null || typeof iteratee == "number" && typeof obj[0] != "object" && obj != null) {
          obj = isArrayLike(obj) ? obj : _.values(obj);
          for (var i = 0, length = obj.length; i < length; i++) {
            value = obj[i];
            if (value != null && value > result) {
              result = value;
            }
          }
        } else {
          iteratee = cb(iteratee, context);
          _.each(obj, function(v, index, list) {
            computed = iteratee(v, index, list);
            if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
              result = v;
              lastComputed = computed;
            }
          });
        }
        return result;
      };
      _.min = function(obj, iteratee, context) {
        var result = Infinity, lastComputed = Infinity, value, computed;
        if (iteratee == null || typeof iteratee == "number" && typeof obj[0] != "object" && obj != null) {
          obj = isArrayLike(obj) ? obj : _.values(obj);
          for (var i = 0, length = obj.length; i < length; i++) {
            value = obj[i];
            if (value != null && value < result) {
              result = value;
            }
          }
        } else {
          iteratee = cb(iteratee, context);
          _.each(obj, function(v, index, list) {
            computed = iteratee(v, index, list);
            if (computed < lastComputed || computed === Infinity && result === Infinity) {
              result = v;
              lastComputed = computed;
            }
          });
        }
        return result;
      };
      _.shuffle = function(obj) {
        return _.sample(obj, Infinity);
      };
      _.sample = function(obj, n, guard) {
        if (n == null || guard) {
          if (!isArrayLike(obj))
            obj = _.values(obj);
          return obj[_.random(obj.length - 1)];
        }
        var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
        var length = getLength(sample);
        n = Math.max(Math.min(n, length), 0);
        var last = length - 1;
        for (var index = 0; index < n; index++) {
          var rand = _.random(index, last);
          var temp = sample[index];
          sample[index] = sample[rand];
          sample[rand] = temp;
        }
        return sample.slice(0, n);
      };
      _.sortBy = function(obj, iteratee, context) {
        var index = 0;
        iteratee = cb(iteratee, context);
        return _.pluck(_.map(obj, function(value, key, list) {
          return {
            value,
            index: index++,
            criteria: iteratee(value, key, list)
          };
        }).sort(function(left, right) {
          var a = left.criteria;
          var b = right.criteria;
          if (a !== b) {
            if (a > b || a === void 0)
              return 1;
            if (a < b || b === void 0)
              return -1;
          }
          return left.index - right.index;
        }), "value");
      };
      var group = function(behavior, partition) {
        return function(obj, iteratee, context) {
          var result = partition ? [[], []] : {};
          iteratee = cb(iteratee, context);
          _.each(obj, function(value, index) {
            var key = iteratee(value, index, obj);
            behavior(result, value, key);
          });
          return result;
        };
      };
      _.groupBy = group(function(result, value, key) {
        if (has(result, key))
          result[key].push(value);
        else
          result[key] = [value];
      });
      _.indexBy = group(function(result, value, key) {
        result[key] = value;
      });
      _.countBy = group(function(result, value, key) {
        if (has(result, key))
          result[key]++;
        else
          result[key] = 1;
      });
      var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
      _.toArray = function(obj) {
        if (!obj)
          return [];
        if (_.isArray(obj))
          return slice.call(obj);
        if (_.isString(obj)) {
          return obj.match(reStrSymbol);
        }
        if (isArrayLike(obj))
          return _.map(obj, _.identity);
        return _.values(obj);
      };
      _.size = function(obj) {
        if (obj == null)
          return 0;
        return isArrayLike(obj) ? obj.length : _.keys(obj).length;
      };
      _.partition = group(function(result, value, pass) {
        result[pass ? 0 : 1].push(value);
      }, true);
      _.first = _.head = _.take = function(array, n, guard) {
        if (array == null || array.length < 1)
          return n == null ? void 0 : [];
        if (n == null || guard)
          return array[0];
        return _.initial(array, array.length - n);
      };
      _.initial = function(array, n, guard) {
        return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
      };
      _.last = function(array, n, guard) {
        if (array == null || array.length < 1)
          return n == null ? void 0 : [];
        if (n == null || guard)
          return array[array.length - 1];
        return _.rest(array, Math.max(0, array.length - n));
      };
      _.rest = _.tail = _.drop = function(array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n);
      };
      _.compact = function(array) {
        return _.filter(array, Boolean);
      };
      var flatten = function(input, shallow, strict, output) {
        output = output || [];
        var idx = output.length;
        for (var i = 0, length = getLength(input); i < length; i++) {
          var value = input[i];
          if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
            if (shallow) {
              var j = 0, len = value.length;
              while (j < len)
                output[idx++] = value[j++];
            } else {
              flatten(value, shallow, strict, output);
              idx = output.length;
            }
          } else if (!strict) {
            output[idx++] = value;
          }
        }
        return output;
      };
      _.flatten = function(array, shallow) {
        return flatten(array, shallow, false);
      };
      _.without = restArguments(function(array, otherArrays) {
        return _.difference(array, otherArrays);
      });
      _.uniq = _.unique = function(array, isSorted, iteratee, context) {
        if (!_.isBoolean(isSorted)) {
          context = iteratee;
          iteratee = isSorted;
          isSorted = false;
        }
        if (iteratee != null)
          iteratee = cb(iteratee, context);
        var result = [];
        var seen = [];
        for (var i = 0, length = getLength(array); i < length; i++) {
          var value = array[i], computed = iteratee ? iteratee(value, i, array) : value;
          if (isSorted && !iteratee) {
            if (!i || seen !== computed)
              result.push(value);
            seen = computed;
          } else if (iteratee) {
            if (!_.contains(seen, computed)) {
              seen.push(computed);
              result.push(value);
            }
          } else if (!_.contains(result, value)) {
            result.push(value);
          }
        }
        return result;
      };
      _.union = restArguments(function(arrays) {
        return _.uniq(flatten(arrays, true, true));
      });
      _.intersection = function(array) {
        var result = [];
        var argsLength = arguments.length;
        for (var i = 0, length = getLength(array); i < length; i++) {
          var item = array[i];
          if (_.contains(result, item))
            continue;
          var j;
          for (j = 1; j < argsLength; j++) {
            if (!_.contains(arguments[j], item))
              break;
          }
          if (j === argsLength)
            result.push(item);
        }
        return result;
      };
      _.difference = restArguments(function(array, rest) {
        rest = flatten(rest, true, true);
        return _.filter(array, function(value) {
          return !_.contains(rest, value);
        });
      });
      _.unzip = function(array) {
        var length = array && _.max(array, getLength).length || 0;
        var result = Array(length);
        for (var index = 0; index < length; index++) {
          result[index] = _.pluck(array, index);
        }
        return result;
      };
      _.zip = restArguments(_.unzip);
      _.object = function(list, values) {
        var result = {};
        for (var i = 0, length = getLength(list); i < length; i++) {
          if (values) {
            result[list[i]] = values[i];
          } else {
            result[list[i][0]] = list[i][1];
          }
        }
        return result;
      };
      var createPredicateIndexFinder = function(dir) {
        return function(array, predicate, context) {
          predicate = cb(predicate, context);
          var length = getLength(array);
          var index = dir > 0 ? 0 : length - 1;
          for (; index >= 0 && index < length; index += dir) {
            if (predicate(array[index], index, array))
              return index;
          }
          return -1;
        };
      };
      _.findIndex = createPredicateIndexFinder(1);
      _.findLastIndex = createPredicateIndexFinder(-1);
      _.sortedIndex = function(array, obj, iteratee, context) {
        iteratee = cb(iteratee, context, 1);
        var value = iteratee(obj);
        var low = 0, high = getLength(array);
        while (low < high) {
          var mid = Math.floor((low + high) / 2);
          if (iteratee(array[mid]) < value)
            low = mid + 1;
          else
            high = mid;
        }
        return low;
      };
      var createIndexFinder = function(dir, predicateFind, sortedIndex) {
        return function(array, item, idx) {
          var i = 0, length = getLength(array);
          if (typeof idx == "number") {
            if (dir > 0) {
              i = idx >= 0 ? idx : Math.max(idx + length, i);
            } else {
              length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
            }
          } else if (sortedIndex && idx && length) {
            idx = sortedIndex(array, item);
            return array[idx] === item ? idx : -1;
          }
          if (item !== item) {
            idx = predicateFind(slice.call(array, i, length), _.isNaN);
            return idx >= 0 ? idx + i : -1;
          }
          for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
            if (array[idx] === item)
              return idx;
          }
          return -1;
        };
      };
      _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
      _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
      _.range = function(start, stop, step) {
        if (stop == null) {
          stop = start || 0;
          start = 0;
        }
        if (!step) {
          step = stop < start ? -1 : 1;
        }
        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var range = Array(length);
        for (var idx = 0; idx < length; idx++, start += step) {
          range[idx] = start;
        }
        return range;
      };
      _.chunk = function(array, count) {
        if (count == null || count < 1)
          return [];
        var result = [];
        var i = 0, length = array.length;
        while (i < length) {
          result.push(slice.call(array, i, i += count));
        }
        return result;
      };
      var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
        if (!(callingContext instanceof boundFunc))
          return sourceFunc.apply(context, args);
        var self2 = baseCreate(sourceFunc.prototype);
        var result = sourceFunc.apply(self2, args);
        if (_.isObject(result))
          return result;
        return self2;
      };
      _.bind = restArguments(function(func, context, args) {
        if (!_.isFunction(func))
          throw new TypeError("Bind must be called on a function");
        var bound = restArguments(function(callArgs) {
          return executeBound(func, bound, context, this, args.concat(callArgs));
        });
        return bound;
      });
      _.partial = restArguments(function(func, boundArgs) {
        var placeholder = _.partial.placeholder;
        var bound = function() {
          var position = 0, length = boundArgs.length;
          var args = Array(length);
          for (var i = 0; i < length; i++) {
            args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
          }
          while (position < arguments.length)
            args.push(arguments[position++]);
          return executeBound(func, bound, this, this, args);
        };
        return bound;
      });
      _.partial.placeholder = _;
      _.bindAll = restArguments(function(obj, keys) {
        keys = flatten(keys, false, false);
        var index = keys.length;
        if (index < 1)
          throw new Error("bindAll must be passed function names");
        while (index--) {
          var key = keys[index];
          obj[key] = _.bind(obj[key], obj);
        }
      });
      _.memoize = function(func, hasher) {
        var memoize = function(key) {
          var cache = memoize.cache;
          var address = "" + (hasher ? hasher.apply(this, arguments) : key);
          if (!has(cache, address))
            cache[address] = func.apply(this, arguments);
          return cache[address];
        };
        memoize.cache = {};
        return memoize;
      };
      _.delay = restArguments(function(func, wait, args) {
        return setTimeout(function() {
          return func.apply(null, args);
        }, wait);
      });
      _.defer = _.partial(_.delay, _, 1);
      _.throttle = function(func, wait, options) {
        var timeout, context, args, result;
        var previous = 0;
        if (!options)
          options = {};
        var later = function() {
          previous = options.leading === false ? 0 : _.now();
          timeout = null;
          result = func.apply(context, args);
          if (!timeout)
            context = args = null;
        };
        var throttled = function() {
          var now = _.now();
          if (!previous && options.leading === false)
            previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0 || remaining > wait) {
            if (timeout) {
              clearTimeout(timeout);
              timeout = null;
            }
            previous = now;
            result = func.apply(context, args);
            if (!timeout)
              context = args = null;
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining);
          }
          return result;
        };
        throttled.cancel = function() {
          clearTimeout(timeout);
          previous = 0;
          timeout = context = args = null;
        };
        return throttled;
      };
      _.debounce = function(func, wait, immediate) {
        var timeout, result;
        var later = function(context, args) {
          timeout = null;
          if (args)
            result = func.apply(context, args);
        };
        var debounced = restArguments(function(args) {
          if (timeout)
            clearTimeout(timeout);
          if (immediate) {
            var callNow = !timeout;
            timeout = setTimeout(later, wait);
            if (callNow)
              result = func.apply(this, args);
          } else {
            timeout = _.delay(later, wait, this, args);
          }
          return result;
        });
        debounced.cancel = function() {
          clearTimeout(timeout);
          timeout = null;
        };
        return debounced;
      };
      _.wrap = function(func, wrapper) {
        return _.partial(wrapper, func);
      };
      _.negate = function(predicate) {
        return function() {
          return !predicate.apply(this, arguments);
        };
      };
      _.compose = function() {
        var args = arguments;
        var start = args.length - 1;
        return function() {
          var i = start;
          var result = args[start].apply(this, arguments);
          while (i--)
            result = args[i].call(this, result);
          return result;
        };
      };
      _.after = function(times, func) {
        return function() {
          if (--times < 1) {
            return func.apply(this, arguments);
          }
        };
      };
      _.before = function(times, func) {
        var memo;
        return function() {
          if (--times > 0) {
            memo = func.apply(this, arguments);
          }
          if (times <= 1)
            func = null;
          return memo;
        };
      };
      _.once = _.partial(_.before, 2);
      _.restArguments = restArguments;
      var hasEnumBug = !{ toString: null }.propertyIsEnumerable("toString");
      var nonEnumerableProps = [
        "valueOf",
        "isPrototypeOf",
        "toString",
        "propertyIsEnumerable",
        "hasOwnProperty",
        "toLocaleString"
      ];
      var collectNonEnumProps = function(obj, keys) {
        var nonEnumIdx = nonEnumerableProps.length;
        var constructor = obj.constructor;
        var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;
        var prop = "constructor";
        if (has(obj, prop) && !_.contains(keys, prop))
          keys.push(prop);
        while (nonEnumIdx--) {
          prop = nonEnumerableProps[nonEnumIdx];
          if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
            keys.push(prop);
          }
        }
      };
      _.keys = function(obj) {
        if (!_.isObject(obj))
          return [];
        if (nativeKeys)
          return nativeKeys(obj);
        var keys = [];
        for (var key in obj)
          if (has(obj, key))
            keys.push(key);
        if (hasEnumBug)
          collectNonEnumProps(obj, keys);
        return keys;
      };
      _.allKeys = function(obj) {
        if (!_.isObject(obj))
          return [];
        var keys = [];
        for (var key in obj)
          keys.push(key);
        if (hasEnumBug)
          collectNonEnumProps(obj, keys);
        return keys;
      };
      _.values = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = Array(length);
        for (var i = 0; i < length; i++) {
          values[i] = obj[keys[i]];
        }
        return values;
      };
      _.mapObject = function(obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = _.keys(obj), length = keys.length, results = {};
        for (var index = 0; index < length; index++) {
          var currentKey = keys[index];
          results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
        }
        return results;
      };
      _.pairs = function(obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = Array(length);
        for (var i = 0; i < length; i++) {
          pairs[i] = [keys[i], obj[keys[i]]];
        }
        return pairs;
      };
      _.invert = function(obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
          result[obj[keys[i]]] = keys[i];
        }
        return result;
      };
      _.functions = _.methods = function(obj) {
        var names = [];
        for (var key in obj) {
          if (_.isFunction(obj[key]))
            names.push(key);
        }
        return names.sort();
      };
      var createAssigner = function(keysFunc, defaults) {
        return function(obj) {
          var length = arguments.length;
          if (defaults)
            obj = Object(obj);
          if (length < 2 || obj == null)
            return obj;
          for (var index = 1; index < length; index++) {
            var source = arguments[index], keys = keysFunc(source), l = keys.length;
            for (var i = 0; i < l; i++) {
              var key = keys[i];
              if (!defaults || obj[key] === void 0)
                obj[key] = source[key];
            }
          }
          return obj;
        };
      };
      _.extend = createAssigner(_.allKeys);
      _.extendOwn = _.assign = createAssigner(_.keys);
      _.findKey = function(obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = _.keys(obj), key;
        for (var i = 0, length = keys.length; i < length; i++) {
          key = keys[i];
          if (predicate(obj[key], key, obj))
            return key;
        }
      };
      var keyInObj = function(value, key, obj) {
        return key in obj;
      };
      _.pick = restArguments(function(obj, keys) {
        var result = {}, iteratee = keys[0];
        if (obj == null)
          return result;
        if (_.isFunction(iteratee)) {
          if (keys.length > 1)
            iteratee = optimizeCb(iteratee, keys[1]);
          keys = _.allKeys(obj);
        } else {
          iteratee = keyInObj;
          keys = flatten(keys, false, false);
          obj = Object(obj);
        }
        for (var i = 0, length = keys.length; i < length; i++) {
          var key = keys[i];
          var value = obj[key];
          if (iteratee(value, key, obj))
            result[key] = value;
        }
        return result;
      });
      _.omit = restArguments(function(obj, keys) {
        var iteratee = keys[0], context;
        if (_.isFunction(iteratee)) {
          iteratee = _.negate(iteratee);
          if (keys.length > 1)
            context = keys[1];
        } else {
          keys = _.map(flatten(keys, false, false), String);
          iteratee = function(value, key) {
            return !_.contains(keys, key);
          };
        }
        return _.pick(obj, iteratee, context);
      });
      _.defaults = createAssigner(_.allKeys, true);
      _.create = function(prototype, props) {
        var result = baseCreate(prototype);
        if (props)
          _.extendOwn(result, props);
        return result;
      };
      _.clone = function(obj) {
        if (!_.isObject(obj))
          return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
      };
      _.tap = function(obj, interceptor) {
        interceptor(obj);
        return obj;
      };
      _.isMatch = function(object, attrs) {
        var keys = _.keys(attrs), length = keys.length;
        if (object == null)
          return !length;
        var obj = Object(object);
        for (var i = 0; i < length; i++) {
          var key = keys[i];
          if (attrs[key] !== obj[key] || !(key in obj))
            return false;
        }
        return true;
      };
      var eq, deepEq;
      eq = function(a, b, aStack, bStack) {
        if (a === b)
          return a !== 0 || 1 / a === 1 / b;
        if (a == null || b == null)
          return false;
        if (a !== a)
          return b !== b;
        var type = typeof a;
        if (type !== "function" && type !== "object" && typeof b != "object")
          return false;
        return deepEq(a, b, aStack, bStack);
      };
      deepEq = function(a, b, aStack, bStack) {
        if (a instanceof _)
          a = a._wrapped;
        if (b instanceof _)
          b = b._wrapped;
        var className = toString.call(a);
        if (className !== toString.call(b))
          return false;
        switch (className) {
          case "[object RegExp]":
          case "[object String]":
            return "" + a === "" + b;
          case "[object Number]":
            if (+a !== +a)
              return +b !== +b;
            return +a === 0 ? 1 / +a === 1 / b : +a === +b;
          case "[object Date]":
          case "[object Boolean]":
            return +a === +b;
          case "[object Symbol]":
            return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
        }
        var areArrays = className === "[object Array]";
        if (!areArrays) {
          if (typeof a != "object" || typeof b != "object")
            return false;
          var aCtor = a.constructor, bCtor = b.constructor;
          if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ("constructor" in a && "constructor" in b)) {
            return false;
          }
        }
        aStack = aStack || [];
        bStack = bStack || [];
        var length = aStack.length;
        while (length--) {
          if (aStack[length] === a)
            return bStack[length] === b;
        }
        aStack.push(a);
        bStack.push(b);
        if (areArrays) {
          length = a.length;
          if (length !== b.length)
            return false;
          while (length--) {
            if (!eq(a[length], b[length], aStack, bStack))
              return false;
          }
        } else {
          var keys = _.keys(a), key;
          length = keys.length;
          if (_.keys(b).length !== length)
            return false;
          while (length--) {
            key = keys[length];
            if (!(has(b, key) && eq(a[key], b[key], aStack, bStack)))
              return false;
          }
        }
        aStack.pop();
        bStack.pop();
        return true;
      };
      _.isEqual = function(a, b) {
        return eq(a, b);
      };
      _.isEmpty = function(obj) {
        if (obj == null)
          return true;
        if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)))
          return obj.length === 0;
        return _.keys(obj).length === 0;
      };
      _.isElement = function(obj) {
        return !!(obj && obj.nodeType === 1);
      };
      _.isArray = nativeIsArray || function(obj) {
        return toString.call(obj) === "[object Array]";
      };
      _.isObject = function(obj) {
        var type = typeof obj;
        return type === "function" || type === "object" && !!obj;
      };
      _.each(["Arguments", "Function", "String", "Number", "Date", "RegExp", "Error", "Symbol", "Map", "WeakMap", "Set", "WeakSet"], function(name) {
        _["is" + name] = function(obj) {
          return toString.call(obj) === "[object " + name + "]";
        };
      });
      if (!_.isArguments(arguments)) {
        _.isArguments = function(obj) {
          return has(obj, "callee");
        };
      }
      var nodelist = root.document && root.document.childNodes;
      if (typeof /./ != "function" && typeof Int8Array != "object" && typeof nodelist != "function") {
        _.isFunction = function(obj) {
          return typeof obj == "function" || false;
        };
      }
      _.isFinite = function(obj) {
        return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
      };
      _.isNaN = function(obj) {
        return _.isNumber(obj) && isNaN(obj);
      };
      _.isBoolean = function(obj) {
        return obj === true || obj === false || toString.call(obj) === "[object Boolean]";
      };
      _.isNull = function(obj) {
        return obj === null;
      };
      _.isUndefined = function(obj) {
        return obj === void 0;
      };
      _.has = function(obj, path) {
        if (!_.isArray(path)) {
          return has(obj, path);
        }
        var length = path.length;
        for (var i = 0; i < length; i++) {
          var key = path[i];
          if (obj == null || !hasOwnProperty.call(obj, key)) {
            return false;
          }
          obj = obj[key];
        }
        return !!length;
      };
      _.noConflict = function() {
        root._ = previousUnderscore;
        return this;
      };
      _.identity = function(value) {
        return value;
      };
      _.constant = function(value) {
        return function() {
          return value;
        };
      };
      _.noop = function() {
      };
      _.property = function(path) {
        if (!_.isArray(path)) {
          return shallowProperty(path);
        }
        return function(obj) {
          return deepGet(obj, path);
        };
      };
      _.propertyOf = function(obj) {
        if (obj == null) {
          return function() {
          };
        }
        return function(path) {
          return !_.isArray(path) ? obj[path] : deepGet(obj, path);
        };
      };
      _.matcher = _.matches = function(attrs) {
        attrs = _.extendOwn({}, attrs);
        return function(obj) {
          return _.isMatch(obj, attrs);
        };
      };
      _.times = function(n, iteratee, context) {
        var accum = Array(Math.max(0, n));
        iteratee = optimizeCb(iteratee, context, 1);
        for (var i = 0; i < n; i++)
          accum[i] = iteratee(i);
        return accum;
      };
      _.random = function(min, max) {
        if (max == null) {
          max = min;
          min = 0;
        }
        return min + Math.floor(Math.random() * (max - min + 1));
      };
      _.now = Date.now || function() {
        return new Date().getTime();
      };
      var escapeMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;"
      };
      var unescapeMap = _.invert(escapeMap);
      var createEscaper = function(map) {
        var escaper = function(match) {
          return map[match];
        };
        var source = "(?:" + _.keys(map).join("|") + ")";
        var testRegexp = RegExp(source);
        var replaceRegexp = RegExp(source, "g");
        return function(string) {
          string = string == null ? "" : "" + string;
          return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
        };
      };
      _.escape = createEscaper(escapeMap);
      _.unescape = createEscaper(unescapeMap);
      _.result = function(obj, path, fallback) {
        if (!_.isArray(path))
          path = [path];
        var length = path.length;
        if (!length) {
          return _.isFunction(fallback) ? fallback.call(obj) : fallback;
        }
        for (var i = 0; i < length; i++) {
          var prop = obj == null ? void 0 : obj[path[i]];
          if (prop === void 0) {
            prop = fallback;
            i = length;
          }
          obj = _.isFunction(prop) ? prop.call(obj) : prop;
        }
        return obj;
      };
      var idCounter = 0;
      _.uniqueId = function(prefix) {
        var id = ++idCounter + "";
        return prefix ? prefix + id : id;
      };
      _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
      };
      var noMatch = /(.)^/;
      var escapes = {
        "'": "'",
        "\\": "\\",
        "\r": "r",
        "\n": "n",
        "\u2028": "u2028",
        "\u2029": "u2029"
      };
      var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;
      var escapeChar = function(match) {
        return "\\" + escapes[match];
      };
      _.template = function(text, settings, oldSettings) {
        if (!settings && oldSettings)
          settings = oldSettings;
        settings = _.defaults({}, settings, _.templateSettings);
        var matcher = RegExp([
          (settings.escape || noMatch).source,
          (settings.interpolate || noMatch).source,
          (settings.evaluate || noMatch).source
        ].join("|") + "|$", "g");
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
          source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
          index = offset + match.length;
          if (escape) {
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
          } else if (interpolate) {
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
          } else if (evaluate) {
            source += "';\n" + evaluate + "\n__p+='";
          }
          return match;
        });
        source += "';\n";
        if (!settings.variable)
          source = "with(obj||{}){\n" + source + "}\n";
        source = "var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n" + source + "return __p;\n";
        var render;
        try {
          render = new Function(settings.variable || "obj", "_", source);
        } catch (e) {
          e.source = source;
          throw e;
        }
        var template = function(data) {
          return render.call(this, data, _);
        };
        var argument = settings.variable || "obj";
        template.source = "function(" + argument + "){\n" + source + "}";
        return template;
      };
      _.chain = function(obj) {
        var instance = _(obj);
        instance._chain = true;
        return instance;
      };
      var chainResult = function(instance, obj) {
        return instance._chain ? _(obj).chain() : obj;
      };
      _.mixin = function(obj) {
        _.each(_.functions(obj), function(name) {
          var func = _[name] = obj[name];
          _.prototype[name] = function() {
            var args = [this._wrapped];
            push.apply(args, arguments);
            return chainResult(this, func.apply(_, args));
          };
        });
        return _;
      };
      _.mixin(_);
      _.each(["pop", "push", "reverse", "shift", "sort", "splice", "unshift"], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
          var obj = this._wrapped;
          method.apply(obj, arguments);
          if ((name === "shift" || name === "splice") && obj.length === 0)
            delete obj[0];
          return chainResult(this, obj);
        };
      });
      _.each(["concat", "join", "slice"], function(name) {
        var method = ArrayProto[name];
        _.prototype[name] = function() {
          return chainResult(this, method.apply(this._wrapped, arguments));
        };
      });
      _.prototype.value = function() {
        return this._wrapped;
      };
      _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
      _.prototype.toString = function() {
        return String(this._wrapped);
      };
      if (typeof define == "function" && define.amd) {
        define("underscore", [], function() {
          return _;
        });
      }
    })();
  }
});

// node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js
var require_bn2 = __commonJS({
  "node_modules/ethjs-unit/node_modules/bn.js/lib/bn.js"(exports, module) {
    init_define_process_env();
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        Buffer2 = require_buffer().Buffer;
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
        }
        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }
        if (number[0] === "-") {
          this.negative = 1;
        }
        this.strip();
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r <<= 4;
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 10;
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 10;
          } else {
            r |= c & 15;
          }
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            r += c - 49 + 10;
          } else if (c >= 17) {
            r += c - 17 + 10;
          } else {
            r += c;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/number-to-bn/node_modules/bn.js/lib/bn.js
var require_bn3 = __commonJS({
  "node_modules/number-to-bn/node_modules/bn.js/lib/bn.js"(exports, module) {
    init_define_process_env();
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        Buffer2 = require_buffer().Buffer;
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
        }
        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }
        if (number[0] === "-") {
          this.negative = 1;
        }
        this.strip();
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r <<= 4;
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 10;
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 10;
          } else {
            r |= c & 15;
          }
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            r += c - 49 + 10;
          } else if (c >= 17) {
            r += c - 17 + 10;
          } else {
            r += c;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/number-to-bn/src/index.js
var require_src2 = __commonJS({
  "node_modules/number-to-bn/src/index.js"(exports, module) {
    init_define_process_env();
    var BN = require_bn3();
    var stripHexPrefix = require_src();
    module.exports = function numberToBN(arg) {
      if (typeof arg === "string" || typeof arg === "number") {
        var multiplier = new BN(1);
        var formattedString = String(arg).toLowerCase().trim();
        var isHexPrefixed = formattedString.substr(0, 2) === "0x" || formattedString.substr(0, 3) === "-0x";
        var stringArg = stripHexPrefix(formattedString);
        if (stringArg.substr(0, 1) === "-") {
          stringArg = stripHexPrefix(stringArg.slice(1));
          multiplier = new BN(-1, 10);
        }
        stringArg = stringArg === "" ? "0" : stringArg;
        if (!stringArg.match(/^-?[0-9]+$/) && stringArg.match(/^[0-9A-Fa-f]+$/) || stringArg.match(/^[a-fA-F]+$/) || isHexPrefixed === true && stringArg.match(/^[0-9A-Fa-f]+$/)) {
          return new BN(stringArg, 16).mul(multiplier);
        }
        if ((stringArg.match(/^-?[0-9]+$/) || stringArg === "") && isHexPrefixed === false) {
          return new BN(stringArg, 10).mul(multiplier);
        }
      } else if (typeof arg === "object" && arg.toString && (!arg.pop && !arg.push)) {
        if (arg.toString(10).match(/^-?[0-9]+$/) && (arg.mul || arg.dividedToIntegerBy)) {
          return new BN(arg.toString(10), 10);
        }
      }
      throw new Error("[number-to-bn] while converting number " + JSON.stringify(arg) + " to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.");
    };
  }
});

// node_modules/ethjs-unit/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/ethjs-unit/lib/index.js"(exports, module) {
    init_define_process_env();
    "use strict";
    var BN = require_bn2();
    var numberToBN = require_src2();
    var zero = new BN(0);
    var negative1 = new BN(-1);
    var unitMap = {
      "noether": "0",
      "wei": "1",
      "kwei": "1000",
      "Kwei": "1000",
      "babbage": "1000",
      "femtoether": "1000",
      "mwei": "1000000",
      "Mwei": "1000000",
      "lovelace": "1000000",
      "picoether": "1000000",
      "gwei": "1000000000",
      "Gwei": "1000000000",
      "shannon": "1000000000",
      "nanoether": "1000000000",
      "nano": "1000000000",
      "szabo": "1000000000000",
      "microether": "1000000000000",
      "micro": "1000000000000",
      "finney": "1000000000000000",
      "milliether": "1000000000000000",
      "milli": "1000000000000000",
      "ether": "1000000000000000000",
      "kether": "1000000000000000000000",
      "grand": "1000000000000000000000",
      "mether": "1000000000000000000000000",
      "gether": "1000000000000000000000000000",
      "tether": "1000000000000000000000000000000"
    };
    function getValueOfUnit(unitInput) {
      var unit = unitInput ? unitInput.toLowerCase() : "ether";
      var unitValue = unitMap[unit];
      if (typeof unitValue !== "string") {
        throw new Error("[ethjs-unit] the unit provided " + unitInput + " doesn't exists, please use the one of the following units " + JSON.stringify(unitMap, null, 2));
      }
      return new BN(unitValue, 10);
    }
    function numberToString(arg) {
      if (typeof arg === "string") {
        if (!arg.match(/^-?[0-9.]+$/)) {
          throw new Error("while converting number to string, invalid number value '" + arg + "', should be a number matching (^-?[0-9.]+).");
        }
        return arg;
      } else if (typeof arg === "number") {
        return String(arg);
      } else if (typeof arg === "object" && arg.toString && (arg.toTwos || arg.dividedToIntegerBy)) {
        if (arg.toPrecision) {
          return String(arg.toPrecision());
        } else {
          return arg.toString(10);
        }
      }
      throw new Error("while converting number to string, invalid number value '" + arg + "' type " + typeof arg + ".");
    }
    function fromWei(weiInput, unit, optionsInput) {
      var wei = numberToBN(weiInput);
      var negative = wei.lt(zero);
      var base = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;
      var options = optionsInput || {};
      if (negative) {
        wei = wei.mul(negative1);
      }
      var fraction = wei.mod(base).toString(10);
      while (fraction.length < baseLength) {
        fraction = "0" + fraction;
      }
      if (!options.pad) {
        fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
      }
      var whole = wei.div(base).toString(10);
      if (options.commify) {
        whole = whole.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      }
      var value = "" + whole + (fraction == "0" ? "" : "." + fraction);
      if (negative) {
        value = "-" + value;
      }
      return value;
    }
    function toWei(etherInput, unit) {
      var ether = numberToString(etherInput);
      var base = getValueOfUnit(unit);
      var baseLength = unitMap[unit].length - 1 || 1;
      var negative = ether.substring(0, 1) === "-";
      if (negative) {
        ether = ether.substring(1);
      }
      if (ether === ".") {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei, invalid value");
      }
      var comps = ether.split(".");
      if (comps.length > 2) {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei,  too many decimal points");
      }
      var whole = comps[0], fraction = comps[1];
      if (!whole) {
        whole = "0";
      }
      if (!fraction) {
        fraction = "0";
      }
      if (fraction.length > baseLength) {
        throw new Error("[ethjs-unit] while converting number " + etherInput + " to wei, too many decimal places");
      }
      while (fraction.length < baseLength) {
        fraction += "0";
      }
      whole = new BN(whole);
      fraction = new BN(fraction);
      var wei = whole.mul(base).add(fraction);
      if (negative) {
        wei = wei.mul(negative1);
      }
      return new BN(wei.toString(10), 10);
    }
    module.exports = {
      unitMap,
      numberToString,
      getValueOfUnit,
      fromWei,
      toWei
    };
  }
});

// node_modules/authereum/node_modules/web3-utils/node_modules/bn.js/lib/bn.js
var require_bn4 = __commonJS({
  "node_modules/authereum/node_modules/web3-utils/node_modules/bn.js/lib/bn.js"(exports, module) {
    init_define_process_env();
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        Buffer2 = (init_buffer(), buffer_exports).Buffer;
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
        }
        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }
        if (number[0] === "-") {
          this.negative = 1;
        }
        this.strip();
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this.strip();
      };
      function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r <<= 4;
          if (c >= 49 && c <= 54) {
            r |= c - 49 + 10;
          } else if (c >= 17 && c <= 22) {
            r |= c - 17 + 10;
          } else {
            r |= c & 15;
          }
        }
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
        }
        this.strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            r += c - 49 + 10;
          } else if (c >= 17) {
            r += c - 17 + 10;
          } else {
            r += c;
          }
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype.strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      BN.prototype.inspect = function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      };
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
      };
      BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer2 !== "undefined");
        return this.toArrayLike(Buffer2, endian, length);
      };
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        this.strip();
        var littleEndian = endian === "le";
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
          for (i = 0; i < reqLength - byteLength; i++) {
            res[i] = 0;
          }
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[reqLength - i - 1] = b;
          }
        } else {
          for (i = 0; !q.isZero(); i++) {
            b = q.andln(255);
            q.iushrn(8);
            res[i] = b;
          }
          for (; i < reqLength; i++) {
            res[i] = 0;
          }
        }
        return res;
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this.strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this.strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this.strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this.strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this.strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this.strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out.strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out.strip();
      }
      function jumboMulTo(self2, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this.strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this.strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this.strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) < num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this.strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this.strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q.strip();
        }
        a.strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return acc;
      };
      BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        return this.strip();
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this.strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          r.strip();
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/utf8/utf8.js
var require_utf8 = __commonJS({
  "node_modules/utf8/utf8.js"(exports) {
    init_define_process_env();
    (function(root) {
      var stringFromCharCode = String.fromCharCode;
      function ucs2decode(string) {
        var output = [];
        var counter = 0;
        var length = string.length;
        var value;
        var extra;
        while (counter < length) {
          value = string.charCodeAt(counter++);
          if (value >= 55296 && value <= 56319 && counter < length) {
            extra = string.charCodeAt(counter++);
            if ((extra & 64512) == 56320) {
              output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
            } else {
              output.push(value);
              counter--;
            }
          } else {
            output.push(value);
          }
        }
        return output;
      }
      function ucs2encode(array) {
        var length = array.length;
        var index = -1;
        var value;
        var output = "";
        while (++index < length) {
          value = array[index];
          if (value > 65535) {
            value -= 65536;
            output += stringFromCharCode(value >>> 10 & 1023 | 55296);
            value = 56320 | value & 1023;
          }
          output += stringFromCharCode(value);
        }
        return output;
      }
      function checkScalarValue(codePoint) {
        if (codePoint >= 55296 && codePoint <= 57343) {
          throw Error("Lone surrogate U+" + codePoint.toString(16).toUpperCase() + " is not a scalar value");
        }
      }
      function createByte(codePoint, shift) {
        return stringFromCharCode(codePoint >> shift & 63 | 128);
      }
      function encodeCodePoint(codePoint) {
        if ((codePoint & 4294967168) == 0) {
          return stringFromCharCode(codePoint);
        }
        var symbol = "";
        if ((codePoint & 4294965248) == 0) {
          symbol = stringFromCharCode(codePoint >> 6 & 31 | 192);
        } else if ((codePoint & 4294901760) == 0) {
          checkScalarValue(codePoint);
          symbol = stringFromCharCode(codePoint >> 12 & 15 | 224);
          symbol += createByte(codePoint, 6);
        } else if ((codePoint & 4292870144) == 0) {
          symbol = stringFromCharCode(codePoint >> 18 & 7 | 240);
          symbol += createByte(codePoint, 12);
          symbol += createByte(codePoint, 6);
        }
        symbol += stringFromCharCode(codePoint & 63 | 128);
        return symbol;
      }
      function utf8encode(string) {
        var codePoints = ucs2decode(string);
        var length = codePoints.length;
        var index = -1;
        var codePoint;
        var byteString = "";
        while (++index < length) {
          codePoint = codePoints[index];
          byteString += encodeCodePoint(codePoint);
        }
        return byteString;
      }
      function readContinuationByte() {
        if (byteIndex >= byteCount) {
          throw Error("Invalid byte index");
        }
        var continuationByte = byteArray[byteIndex] & 255;
        byteIndex++;
        if ((continuationByte & 192) == 128) {
          return continuationByte & 63;
        }
        throw Error("Invalid continuation byte");
      }
      function decodeSymbol() {
        var byte1;
        var byte2;
        var byte3;
        var byte4;
        var codePoint;
        if (byteIndex > byteCount) {
          throw Error("Invalid byte index");
        }
        if (byteIndex == byteCount) {
          return false;
        }
        byte1 = byteArray[byteIndex] & 255;
        byteIndex++;
        if ((byte1 & 128) == 0) {
          return byte1;
        }
        if ((byte1 & 224) == 192) {
          byte2 = readContinuationByte();
          codePoint = (byte1 & 31) << 6 | byte2;
          if (codePoint >= 128) {
            return codePoint;
          } else {
            throw Error("Invalid continuation byte");
          }
        }
        if ((byte1 & 240) == 224) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          codePoint = (byte1 & 15) << 12 | byte2 << 6 | byte3;
          if (codePoint >= 2048) {
            checkScalarValue(codePoint);
            return codePoint;
          } else {
            throw Error("Invalid continuation byte");
          }
        }
        if ((byte1 & 248) == 240) {
          byte2 = readContinuationByte();
          byte3 = readContinuationByte();
          byte4 = readContinuationByte();
          codePoint = (byte1 & 7) << 18 | byte2 << 12 | byte3 << 6 | byte4;
          if (codePoint >= 65536 && codePoint <= 1114111) {
            return codePoint;
          }
        }
        throw Error("Invalid UTF-8 detected");
      }
      var byteArray;
      var byteCount;
      var byteIndex;
      function utf8decode(byteString) {
        byteArray = ucs2decode(byteString);
        byteCount = byteArray.length;
        byteIndex = 0;
        var codePoints = [];
        var tmp;
        while ((tmp = decodeSymbol()) !== false) {
          codePoints.push(tmp);
        }
        return ucs2encode(codePoints);
      }
      root.version = "3.0.0";
      root.encode = utf8encode;
      root.decode = utf8decode;
    })(typeof exports === "undefined" ? exports.utf8 = {} : exports);
  }
});

// node_modules/authereum/node_modules/eth-lib/lib/hash.js
var require_hash = __commonJS({
  "node_modules/authereum/node_modules/eth-lib/lib/hash.js"(exports, module) {
    init_define_process_env();
    var HEX_CHARS = "0123456789abcdef".split("");
    var KECCAK_PADDING = [1, 256, 65536, 16777216];
    var SHIFT = [0, 8, 16, 24];
    var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
    var Keccak = function Keccak2(bits) {
      return {
        blocks: [],
        reset: true,
        block: 0,
        start: 0,
        blockCount: 1600 - (bits << 1) >> 5,
        outputBlocks: bits >> 5,
        s: function(s) {
          return [].concat(s, s, s, s, s);
        }([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
      };
    };
    var update = function update2(state, message) {
      var length = message.length, blocks = state.blocks, byteCount = state.blockCount << 2, blockCount = state.blockCount, outputBlocks = state.outputBlocks, s = state.s, index = 0, i, code;
      while (index < length) {
        if (state.reset) {
          state.reset = false;
          blocks[0] = state.block;
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        if (typeof message !== "string") {
          for (i = state.start; index < length && i < byteCount; ++index) {
            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
          }
        } else {
          for (i = state.start; index < length && i < byteCount; ++index) {
            code = message.charCodeAt(index);
            if (code < 128) {
              blocks[i >> 2] |= code << SHIFT[i++ & 3];
            } else if (code < 2048) {
              blocks[i >> 2] |= (192 | code >> 6) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
            } else if (code < 55296 || code >= 57344) {
              blocks[i >> 2] |= (224 | code >> 12) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
            } else {
              code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
              blocks[i >> 2] |= (240 | code >> 18) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (128 | code >> 12 & 63) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (128 | code >> 6 & 63) << SHIFT[i++ & 3];
              blocks[i >> 2] |= (128 | code & 63) << SHIFT[i++ & 3];
            }
          }
        }
        state.lastByteIndex = i;
        if (i >= byteCount) {
          state.start = i - byteCount;
          state.block = blocks[blockCount];
          for (i = 0; i < blockCount; ++i) {
            s[i] ^= blocks[i];
          }
          f2(s);
          state.reset = true;
        } else {
          state.start = i;
        }
      }
      i = state.lastByteIndex;
      blocks[i >> 2] |= KECCAK_PADDING[i & 3];
      if (state.lastByteIndex === byteCount) {
        blocks[0] = blocks[blockCount];
        for (i = 1; i < blockCount + 1; ++i) {
          blocks[i] = 0;
        }
      }
      blocks[blockCount - 1] |= 2147483648;
      for (i = 0; i < blockCount; ++i) {
        s[i] ^= blocks[i];
      }
      f2(s);
      var hex = "", i = 0, j = 0, block;
      while (j < outputBlocks) {
        for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
          block = s[i];
          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
        }
        if (j % blockCount === 0) {
          f2(s);
          i = 0;
        }
      }
      return "0x" + hex;
    };
    var f2 = function f3(s) {
      var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
      for (n = 0; n < 48; n += 2) {
        c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
        h = c8 ^ (c2 << 1 | c3 >>> 31);
        l = c9 ^ (c3 << 1 | c2 >>> 31);
        s[0] ^= h;
        s[1] ^= l;
        s[10] ^= h;
        s[11] ^= l;
        s[20] ^= h;
        s[21] ^= l;
        s[30] ^= h;
        s[31] ^= l;
        s[40] ^= h;
        s[41] ^= l;
        h = c0 ^ (c4 << 1 | c5 >>> 31);
        l = c1 ^ (c5 << 1 | c4 >>> 31);
        s[2] ^= h;
        s[3] ^= l;
        s[12] ^= h;
        s[13] ^= l;
        s[22] ^= h;
        s[23] ^= l;
        s[32] ^= h;
        s[33] ^= l;
        s[42] ^= h;
        s[43] ^= l;
        h = c2 ^ (c6 << 1 | c7 >>> 31);
        l = c3 ^ (c7 << 1 | c6 >>> 31);
        s[4] ^= h;
        s[5] ^= l;
        s[14] ^= h;
        s[15] ^= l;
        s[24] ^= h;
        s[25] ^= l;
        s[34] ^= h;
        s[35] ^= l;
        s[44] ^= h;
        s[45] ^= l;
        h = c4 ^ (c8 << 1 | c9 >>> 31);
        l = c5 ^ (c9 << 1 | c8 >>> 31);
        s[6] ^= h;
        s[7] ^= l;
        s[16] ^= h;
        s[17] ^= l;
        s[26] ^= h;
        s[27] ^= l;
        s[36] ^= h;
        s[37] ^= l;
        s[46] ^= h;
        s[47] ^= l;
        h = c6 ^ (c0 << 1 | c1 >>> 31);
        l = c7 ^ (c1 << 1 | c0 >>> 31);
        s[8] ^= h;
        s[9] ^= l;
        s[18] ^= h;
        s[19] ^= l;
        s[28] ^= h;
        s[29] ^= l;
        s[38] ^= h;
        s[39] ^= l;
        s[48] ^= h;
        s[49] ^= l;
        b0 = s[0];
        b1 = s[1];
        b32 = s[11] << 4 | s[10] >>> 28;
        b33 = s[10] << 4 | s[11] >>> 28;
        b14 = s[20] << 3 | s[21] >>> 29;
        b15 = s[21] << 3 | s[20] >>> 29;
        b46 = s[31] << 9 | s[30] >>> 23;
        b47 = s[30] << 9 | s[31] >>> 23;
        b28 = s[40] << 18 | s[41] >>> 14;
        b29 = s[41] << 18 | s[40] >>> 14;
        b20 = s[2] << 1 | s[3] >>> 31;
        b21 = s[3] << 1 | s[2] >>> 31;
        b2 = s[13] << 12 | s[12] >>> 20;
        b3 = s[12] << 12 | s[13] >>> 20;
        b34 = s[22] << 10 | s[23] >>> 22;
        b35 = s[23] << 10 | s[22] >>> 22;
        b16 = s[33] << 13 | s[32] >>> 19;
        b17 = s[32] << 13 | s[33] >>> 19;
        b48 = s[42] << 2 | s[43] >>> 30;
        b49 = s[43] << 2 | s[42] >>> 30;
        b40 = s[5] << 30 | s[4] >>> 2;
        b41 = s[4] << 30 | s[5] >>> 2;
        b22 = s[14] << 6 | s[15] >>> 26;
        b23 = s[15] << 6 | s[14] >>> 26;
        b4 = s[25] << 11 | s[24] >>> 21;
        b5 = s[24] << 11 | s[25] >>> 21;
        b36 = s[34] << 15 | s[35] >>> 17;
        b37 = s[35] << 15 | s[34] >>> 17;
        b18 = s[45] << 29 | s[44] >>> 3;
        b19 = s[44] << 29 | s[45] >>> 3;
        b10 = s[6] << 28 | s[7] >>> 4;
        b11 = s[7] << 28 | s[6] >>> 4;
        b42 = s[17] << 23 | s[16] >>> 9;
        b43 = s[16] << 23 | s[17] >>> 9;
        b24 = s[26] << 25 | s[27] >>> 7;
        b25 = s[27] << 25 | s[26] >>> 7;
        b6 = s[36] << 21 | s[37] >>> 11;
        b7 = s[37] << 21 | s[36] >>> 11;
        b38 = s[47] << 24 | s[46] >>> 8;
        b39 = s[46] << 24 | s[47] >>> 8;
        b30 = s[8] << 27 | s[9] >>> 5;
        b31 = s[9] << 27 | s[8] >>> 5;
        b12 = s[18] << 20 | s[19] >>> 12;
        b13 = s[19] << 20 | s[18] >>> 12;
        b44 = s[29] << 7 | s[28] >>> 25;
        b45 = s[28] << 7 | s[29] >>> 25;
        b26 = s[38] << 8 | s[39] >>> 24;
        b27 = s[39] << 8 | s[38] >>> 24;
        b8 = s[48] << 14 | s[49] >>> 18;
        b9 = s[49] << 14 | s[48] >>> 18;
        s[0] = b0 ^ ~b2 & b4;
        s[1] = b1 ^ ~b3 & b5;
        s[10] = b10 ^ ~b12 & b14;
        s[11] = b11 ^ ~b13 & b15;
        s[20] = b20 ^ ~b22 & b24;
        s[21] = b21 ^ ~b23 & b25;
        s[30] = b30 ^ ~b32 & b34;
        s[31] = b31 ^ ~b33 & b35;
        s[40] = b40 ^ ~b42 & b44;
        s[41] = b41 ^ ~b43 & b45;
        s[2] = b2 ^ ~b4 & b6;
        s[3] = b3 ^ ~b5 & b7;
        s[12] = b12 ^ ~b14 & b16;
        s[13] = b13 ^ ~b15 & b17;
        s[22] = b22 ^ ~b24 & b26;
        s[23] = b23 ^ ~b25 & b27;
        s[32] = b32 ^ ~b34 & b36;
        s[33] = b33 ^ ~b35 & b37;
        s[42] = b42 ^ ~b44 & b46;
        s[43] = b43 ^ ~b45 & b47;
        s[4] = b4 ^ ~b6 & b8;
        s[5] = b5 ^ ~b7 & b9;
        s[14] = b14 ^ ~b16 & b18;
        s[15] = b15 ^ ~b17 & b19;
        s[24] = b24 ^ ~b26 & b28;
        s[25] = b25 ^ ~b27 & b29;
        s[34] = b34 ^ ~b36 & b38;
        s[35] = b35 ^ ~b37 & b39;
        s[44] = b44 ^ ~b46 & b48;
        s[45] = b45 ^ ~b47 & b49;
        s[6] = b6 ^ ~b8 & b0;
        s[7] = b7 ^ ~b9 & b1;
        s[16] = b16 ^ ~b18 & b10;
        s[17] = b17 ^ ~b19 & b11;
        s[26] = b26 ^ ~b28 & b20;
        s[27] = b27 ^ ~b29 & b21;
        s[36] = b36 ^ ~b38 & b30;
        s[37] = b37 ^ ~b39 & b31;
        s[46] = b46 ^ ~b48 & b40;
        s[47] = b47 ^ ~b49 & b41;
        s[8] = b8 ^ ~b0 & b2;
        s[9] = b9 ^ ~b1 & b3;
        s[18] = b18 ^ ~b10 & b12;
        s[19] = b19 ^ ~b11 & b13;
        s[28] = b28 ^ ~b20 & b22;
        s[29] = b29 ^ ~b21 & b23;
        s[38] = b38 ^ ~b30 & b32;
        s[39] = b39 ^ ~b31 & b33;
        s[48] = b48 ^ ~b40 & b42;
        s[49] = b49 ^ ~b41 & b43;
        s[0] ^= RC[n];
        s[1] ^= RC[n + 1];
      }
    };
    var keccak = function keccak2(bits) {
      return function(str) {
        var msg;
        if (str.slice(0, 2) === "0x") {
          msg = [];
          for (var i = 2, l = str.length; i < l; i += 2) {
            msg.push(parseInt(str.slice(i, i + 2), 16));
          }
        } else {
          msg = str;
        }
        return update(Keccak(bits, bits), msg);
      };
    };
    module.exports = {
      keccak256: keccak(256),
      keccak512: keccak(512),
      keccak256s: keccak(256),
      keccak512s: keccak(512)
    };
  }
});

// node_modules/authereum/node_modules/web3-utils/src/utils.js
var require_utils2 = __commonJS({
  "node_modules/authereum/node_modules/web3-utils/src/utils.js"(exports, module) {
    init_define_process_env();
    var _ = require_underscore();
    var BN = require_bn4();
    var numberToBN = require_src2();
    var utf8 = require_utf8();
    var Hash = require_hash();
    var isBN = function(object) {
      return object instanceof BN || object && object.constructor && object.constructor.name === "BN";
    };
    var isBigNumber = function(object) {
      return object && object.constructor && object.constructor.name === "BigNumber";
    };
    var toBN = function(number) {
      try {
        return numberToBN.apply(null, arguments);
      } catch (e) {
        throw new Error(e + ' Given value: "' + number + '"');
      }
    };
    var toTwosComplement = function(number) {
      return "0x" + toBN(number).toTwos(256).toString(16, 64);
    };
    var isAddress = function(address) {
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
        return false;
      } else if (/^(0x|0X)?[0-9a-f]{40}$/.test(address) || /^(0x|0X)?[0-9A-F]{40}$/.test(address)) {
        return true;
      } else {
        return checkAddressChecksum(address);
      }
    };
    var checkAddressChecksum = function(address) {
      address = address.replace(/^0x/i, "");
      var addressHash = sha3(address.toLowerCase()).replace(/^0x/i, "");
      for (var i = 0; i < 40; i++) {
        if (parseInt(addressHash[i], 16) > 7 && address[i].toUpperCase() !== address[i] || parseInt(addressHash[i], 16) <= 7 && address[i].toLowerCase() !== address[i]) {
          return false;
        }
      }
      return true;
    };
    var leftPad = function(string, chars, sign) {
      var hasPrefix = /^0x/i.test(string) || typeof string === "number";
      string = string.toString(16).replace(/^0x/i, "");
      var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + new Array(padding).join(sign ? sign : "0") + string;
    };
    var rightPad = function(string, chars, sign) {
      var hasPrefix = /^0x/i.test(string) || typeof string === "number";
      string = string.toString(16).replace(/^0x/i, "");
      var padding = chars - string.length + 1 >= 0 ? chars - string.length + 1 : 0;
      return (hasPrefix ? "0x" : "") + string + new Array(padding).join(sign ? sign : "0");
    };
    var utf8ToHex = function(str) {
      str = utf8.encode(str);
      var hex = "";
      str = str.replace(/^(?:\u0000)*/, "");
      str = str.split("").reverse().join("");
      str = str.replace(/^(?:\u0000)*/, "");
      str = str.split("").reverse().join("");
      for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0" + n : n;
      }
      return "0x" + hex;
    };
    var hexToUtf8 = function(hex) {
      if (!isHexStrict(hex))
        throw new Error('The parameter "' + hex + '" must be a valid HEX string.');
      var str = "";
      var code = 0;
      hex = hex.replace(/^0x/i, "");
      hex = hex.replace(/^(?:00)*/, "");
      hex = hex.split("").reverse().join("");
      hex = hex.replace(/^(?:00)*/, "");
      hex = hex.split("").reverse().join("");
      var l = hex.length;
      for (var i = 0; i < l; i += 2) {
        code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
      }
      return utf8.decode(str);
    };
    var hexToNumber = function(value) {
      if (!value) {
        return value;
      }
      return toBN(value).toNumber();
    };
    var hexToNumberString = function(value) {
      if (!value)
        return value;
      return toBN(value).toString(10);
    };
    var numberToHex = function(value) {
      if (_.isNull(value) || _.isUndefined(value)) {
        return value;
      }
      if (!isFinite(value) && !isHexStrict(value)) {
        throw new Error('Given input "' + value + '" is not a number.');
      }
      var number = toBN(value);
      var result = number.toString(16);
      return number.lt(new BN(0)) ? "-0x" + result.substr(1) : "0x" + result;
    };
    var bytesToHex = function(bytes) {
      for (var hex = [], i = 0; i < bytes.length; i++) {
        hex.push((bytes[i] >>> 4).toString(16));
        hex.push((bytes[i] & 15).toString(16));
      }
      return "0x" + hex.join("");
    };
    var hexToBytes = function(hex) {
      hex = hex.toString(16);
      if (!isHexStrict(hex)) {
        throw new Error('Given value "' + hex + '" is not a valid hex string.');
      }
      hex = hex.replace(/^0x/i, "");
      for (var bytes = [], c = 0; c < hex.length; c += 2)
        bytes.push(parseInt(hex.substr(c, 2), 16));
      return bytes;
    };
    var toHex = function(value, returnType) {
      if (isAddress(value)) {
        return returnType ? "address" : "0x" + value.toLowerCase().replace(/^0x/i, "");
      }
      if (_.isBoolean(value)) {
        return returnType ? "bool" : value ? "0x01" : "0x00";
      }
      if (_.isObject(value) && !isBigNumber(value) && !isBN(value)) {
        return returnType ? "string" : utf8ToHex(JSON.stringify(value));
      }
      if (_.isString(value)) {
        if (value.indexOf("-0x") === 0 || value.indexOf("-0X") === 0) {
          return returnType ? "int256" : numberToHex(value);
        } else if (value.indexOf("0x") === 0 || value.indexOf("0X") === 0) {
          return returnType ? "bytes" : value;
        } else if (!isFinite(value)) {
          return returnType ? "string" : utf8ToHex(value);
        }
      }
      return returnType ? value < 0 ? "int256" : "uint256" : numberToHex(value);
    };
    var isHexStrict = function(hex) {
      return (_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(hex);
    };
    var isHex = function(hex) {
      return (_.isString(hex) || _.isNumber(hex)) && /^(-0x|0x)?[0-9a-f]*$/i.test(hex);
    };
    var isBloom = function(bloom) {
      if (!/^(0x)?[0-9a-f]{512}$/i.test(bloom)) {
        return false;
      } else if (/^(0x)?[0-9a-f]{512}$/.test(bloom) || /^(0x)?[0-9A-F]{512}$/.test(bloom)) {
        return true;
      }
      return false;
    };
    var isTopic = function(topic) {
      if (!/^(0x)?[0-9a-f]{64}$/i.test(topic)) {
        return false;
      } else if (/^(0x)?[0-9a-f]{64}$/.test(topic) || /^(0x)?[0-9A-F]{64}$/.test(topic)) {
        return true;
      }
      return false;
    };
    var SHA3_NULL_S = "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470";
    var sha3 = function(value) {
      if (isBN(value)) {
        value = value.toString();
      }
      if (isHexStrict(value) && /^0x/i.test(value.toString())) {
        value = hexToBytes(value);
      }
      var returnValue = Hash.keccak256(value);
      if (returnValue === SHA3_NULL_S) {
        return null;
      } else {
        return returnValue;
      }
    };
    sha3._Hash = Hash;
    module.exports = {
      BN,
      isBN,
      isBigNumber,
      toBN,
      isAddress,
      isBloom,
      isTopic,
      checkAddressChecksum,
      utf8ToHex,
      hexToUtf8,
      hexToNumber,
      hexToNumberString,
      numberToHex,
      toHex,
      hexToBytes,
      bytesToHex,
      isHex,
      isHexStrict,
      leftPad,
      rightPad,
      toTwosComplement,
      sha3
    };
  }
});

// node_modules/authereum/node_modules/web3-utils/src/soliditySha3.js
var require_soliditySha3 = __commonJS({
  "node_modules/authereum/node_modules/web3-utils/src/soliditySha3.js"(exports, module) {
    init_define_process_env();
    var _ = require_underscore();
    var BN = require_bn4();
    var utils = require_utils2();
    var _elementaryName = function(name) {
      if (name.startsWith("int[")) {
        return "int256" + name.slice(3);
      } else if (name === "int") {
        return "int256";
      } else if (name.startsWith("uint[")) {
        return "uint256" + name.slice(4);
      } else if (name === "uint") {
        return "uint256";
      } else if (name.startsWith("fixed[")) {
        return "fixed128x128" + name.slice(5);
      } else if (name === "fixed") {
        return "fixed128x128";
      } else if (name.startsWith("ufixed[")) {
        return "ufixed128x128" + name.slice(6);
      } else if (name === "ufixed") {
        return "ufixed128x128";
      }
      return name;
    };
    var _parseTypeN = function(type) {
      var typesize = /^\D+(\d+).*$/.exec(type);
      return typesize ? parseInt(typesize[1], 10) : null;
    };
    var _parseTypeNArray = function(type) {
      var arraySize = /^\D+\d*\[(\d+)\]$/.exec(type);
      return arraySize ? parseInt(arraySize[1], 10) : null;
    };
    var _parseNumber = function(arg) {
      var type = typeof arg;
      if (type === "string") {
        if (utils.isHexStrict(arg)) {
          return new BN(arg.replace(/0x/i, ""), 16);
        } else {
          return new BN(arg, 10);
        }
      } else if (type === "number") {
        return new BN(arg);
      } else if (utils.isBigNumber(arg)) {
        return new BN(arg.toString(10));
      } else if (utils.isBN(arg)) {
        return arg;
      } else {
        throw new Error(arg + " is not a number");
      }
    };
    var _solidityPack = function(type, value, arraySize) {
      var size, num;
      type = _elementaryName(type);
      if (type === "bytes") {
        if (value.replace(/^0x/i, "").length % 2 !== 0) {
          throw new Error("Invalid bytes characters " + value.length);
        }
        return value;
      } else if (type === "string") {
        return utils.utf8ToHex(value);
      } else if (type === "bool") {
        return value ? "01" : "00";
      } else if (type.startsWith("address")) {
        if (arraySize) {
          size = 64;
        } else {
          size = 40;
        }
        if (!utils.isAddress(value)) {
          throw new Error(value + " is not a valid address, or the checksum is invalid.");
        }
        return utils.leftPad(value.toLowerCase(), size);
      }
      size = _parseTypeN(type);
      if (type.startsWith("bytes")) {
        if (!size) {
          throw new Error("bytes[] not yet supported in solidity");
        }
        if (arraySize) {
          size = 32;
        }
        if (size < 1 || size > 32 || size < value.replace(/^0x/i, "").length / 2) {
          throw new Error("Invalid bytes" + size + " for " + value);
        }
        return utils.rightPad(value, size * 2);
      } else if (type.startsWith("uint")) {
        if (size % 8 || size < 8 || size > 256) {
          throw new Error("Invalid uint" + size + " size");
        }
        num = _parseNumber(value);
        if (num.bitLength() > size) {
          throw new Error("Supplied uint exceeds width: " + size + " vs " + num.bitLength());
        }
        if (num.lt(new BN(0))) {
          throw new Error("Supplied uint " + num.toString() + " is negative");
        }
        return size ? utils.leftPad(num.toString("hex"), size / 8 * 2) : num;
      } else if (type.startsWith("int")) {
        if (size % 8 || size < 8 || size > 256) {
          throw new Error("Invalid int" + size + " size");
        }
        num = _parseNumber(value);
        if (num.bitLength() > size) {
          throw new Error("Supplied int exceeds width: " + size + " vs " + num.bitLength());
        }
        if (num.lt(new BN(0))) {
          return num.toTwos(size).toString("hex");
        } else {
          return size ? utils.leftPad(num.toString("hex"), size / 8 * 2) : num;
        }
      } else {
        throw new Error("Unsupported or invalid type: " + type);
      }
    };
    var _processSoliditySha3Args = function(arg) {
      if (_.isArray(arg)) {
        throw new Error("Autodetection of array types is not supported.");
      }
      var type, value = "";
      var hexArg, arraySize;
      if (_.isObject(arg) && (arg.hasOwnProperty("v") || arg.hasOwnProperty("t") || arg.hasOwnProperty("value") || arg.hasOwnProperty("type"))) {
        type = arg.hasOwnProperty("t") ? arg.t : arg.type;
        value = arg.hasOwnProperty("v") ? arg.v : arg.value;
      } else {
        type = utils.toHex(arg, true);
        value = utils.toHex(arg);
        if (!type.startsWith("int") && !type.startsWith("uint")) {
          type = "bytes";
        }
      }
      if ((type.startsWith("int") || type.startsWith("uint")) && typeof value === "string" && !/^(-)?0x/i.test(value)) {
        value = new BN(value);
      }
      if (_.isArray(value)) {
        arraySize = _parseTypeNArray(type);
        if (arraySize && value.length !== arraySize) {
          throw new Error(type + " is not matching the given array " + JSON.stringify(value));
        } else {
          arraySize = value.length;
        }
      }
      if (_.isArray(value)) {
        hexArg = value.map(function(val) {
          return _solidityPack(type, val, arraySize).toString("hex").replace("0x", "");
        });
        return hexArg.join("");
      } else {
        hexArg = _solidityPack(type, value, arraySize);
        return hexArg.toString("hex").replace("0x", "");
      }
    };
    var soliditySha3 = function() {
      var args = Array.prototype.slice.call(arguments);
      var hexArgs = _.map(args, _processSoliditySha3Args);
      return utils.sha3("0x" + hexArgs.join(""));
    };
    module.exports = soliditySha3;
  }
});

// node_modules/randomhex/src/crypto.js
var require_crypto = __commonJS({
  "node_modules/randomhex/src/crypto.js"(exports, module) {
    init_define_process_env();
    module.exports = (init_crypto(), crypto_exports);
  }
});

// node_modules/randomhex/src/index.js
var require_src3 = __commonJS({
  "node_modules/randomhex/src/index.js"(exports, module) {
    init_define_process_env();
    var randomHex = function(size, callback) {
      var crypto2 = require_crypto();
      var isCallback = typeof callback === "function";
      if (size > 65536) {
        if (isCallback) {
          callback(new Error("Requested too many random bytes."));
        } else {
          throw new Error("Requested too many random bytes.");
        }
      }
      ;
      if (typeof crypto2 !== "undefined" && crypto2.randomBytes) {
        if (isCallback) {
          crypto2.randomBytes(size, function(err, result) {
            if (!err) {
              callback(null, "0x" + result.toString("hex"));
            } else {
              callback(error);
            }
          });
        } else {
          return "0x" + crypto2.randomBytes(size).toString("hex");
        }
      } else {
        var cryptoLib;
        if (typeof crypto2 !== "undefined") {
          cryptoLib = crypto2;
        } else if (typeof msCrypto !== "undefined") {
          cryptoLib = msCrypto;
        }
        if (cryptoLib && cryptoLib.getRandomValues) {
          var randomBytes = cryptoLib.getRandomValues(new Uint8Array(size));
          var returnValue = "0x" + Array.from(randomBytes).map(function(arr) {
            return arr.toString(16);
          }).join("");
          if (isCallback) {
            callback(null, returnValue);
          } else {
            return returnValue;
          }
        } else {
          var error = new Error(`No "crypto" object available. This Browser doesn't support generating secure random bytes.`);
          if (isCallback) {
            callback(error);
          } else {
            throw error;
          }
        }
      }
    };
    module.exports = randomHex;
  }
});

// node_modules/authereum/node_modules/web3-utils/src/index.js
var require_src4 = __commonJS({
  "node_modules/authereum/node_modules/web3-utils/src/index.js"(exports, module) {
    init_define_process_env();
    var _ = require_underscore();
    var ethjsUnit = require_lib2();
    var utils = require_utils2();
    var soliditySha3 = require_soliditySha3();
    var randomHex = require_src3();
    var _fireError = function(error, emitter, reject, callback) {
      if (_.isObject(error) && !(error instanceof Error) && error.data) {
        if (_.isObject(error.data) || _.isArray(error.data)) {
          error.data = JSON.stringify(error.data, null, 2);
        }
        error = error.message + "\n" + error.data;
      }
      if (_.isString(error)) {
        error = new Error(error);
      }
      if (_.isFunction(callback)) {
        callback(error);
      }
      if (_.isFunction(reject)) {
        if (emitter && (_.isFunction(emitter.listeners) && emitter.listeners("error").length) || _.isFunction(callback)) {
          emitter.catch(function() {
          });
        }
        setTimeout(function() {
          reject(error);
        }, 1);
      }
      if (emitter && _.isFunction(emitter.emit)) {
        setTimeout(function() {
          emitter.emit("error", error);
          emitter.removeAllListeners();
        }, 1);
      }
      return emitter;
    };
    var _jsonInterfaceMethodToString = function(json) {
      if (_.isObject(json) && json.name && json.name.indexOf("(") !== -1) {
        return json.name;
      }
      return json.name + "(" + _flattenTypes(false, json.inputs).join(",") + ")";
    };
    var _flattenTypes = function(includeTuple, puts) {
      var types = [];
      puts.forEach(function(param) {
        if (typeof param.components === "object") {
          if (param.type.substring(0, 5) !== "tuple") {
            throw new Error("components found but type is not tuple; report on GitHub");
          }
          var suffix = "";
          var arrayBracket = param.type.indexOf("[");
          if (arrayBracket >= 0) {
            suffix = param.type.substring(arrayBracket);
          }
          var result = _flattenTypes(includeTuple, param.components);
          if (_.isArray(result) && includeTuple) {
            types.push("tuple(" + result.join(",") + ")" + suffix);
          } else if (!includeTuple) {
            types.push("(" + result.join(",") + ")" + suffix);
          } else {
            types.push("(" + result + ")");
          }
        } else {
          types.push(param.type);
        }
      });
      return types;
    };
    var hexToAscii = function(hex) {
      if (!utils.isHexStrict(hex))
        throw new Error("The parameter must be a valid HEX string.");
      var str = "";
      var i = 0, l = hex.length;
      if (hex.substring(0, 2) === "0x") {
        i = 2;
      }
      for (; i < l; i += 2) {
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
      }
      return str;
    };
    var asciiToHex = function(str) {
      if (!str)
        return "0x00";
      var hex = "";
      for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? "0" + n : n;
      }
      return "0x" + hex;
    };
    var getUnitValue = function(unit) {
      unit = unit ? unit.toLowerCase() : "ether";
      if (!ethjsUnit.unitMap[unit]) {
        throw new Error('This unit "' + unit + `" doesn't exist, please use the one of the following units` + JSON.stringify(ethjsUnit.unitMap, null, 2));
      }
      return unit;
    };
    var fromWei = function(number, unit) {
      unit = getUnitValue(unit);
      if (!utils.isBN(number) && !_.isString(number)) {
        throw new Error("Please pass numbers as strings or BigNumber objects to avoid precision errors.");
      }
      return utils.isBN(number) ? ethjsUnit.fromWei(number, unit) : ethjsUnit.fromWei(number, unit).toString(10);
    };
    var toWei = function(number, unit) {
      unit = getUnitValue(unit);
      if (!utils.isBN(number) && !_.isString(number)) {
        throw new Error("Please pass numbers as strings or BigNumber objects to avoid precision errors.");
      }
      return utils.isBN(number) ? ethjsUnit.toWei(number, unit) : ethjsUnit.toWei(number, unit).toString(10);
    };
    var toChecksumAddress = function(address) {
      if (typeof address === "undefined")
        return "";
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address))
        throw new Error('Given address "' + address + '" is not a valid Ethereum address.');
      address = address.toLowerCase().replace(/^0x/i, "");
      var addressHash = utils.sha3(address).replace(/^0x/i, "");
      var checksumAddress = "0x";
      for (var i = 0; i < address.length; i++) {
        if (parseInt(addressHash[i], 16) > 7) {
          checksumAddress += address[i].toUpperCase();
        } else {
          checksumAddress += address[i];
        }
      }
      return checksumAddress;
    };
    module.exports = {
      _fireError,
      _jsonInterfaceMethodToString,
      _flattenTypes,
      randomHex,
      _,
      BN: utils.BN,
      isBN: utils.isBN,
      isBigNumber: utils.isBigNumber,
      isHex: utils.isHex,
      isHexStrict: utils.isHexStrict,
      sha3: utils.sha3,
      keccak256: utils.sha3,
      soliditySha3,
      isAddress: utils.isAddress,
      checkAddressChecksum: utils.checkAddressChecksum,
      toChecksumAddress,
      toHex: utils.toHex,
      toBN: utils.toBN,
      bytesToHex: utils.bytesToHex,
      hexToBytes: utils.hexToBytes,
      hexToNumberString: utils.hexToNumberString,
      hexToNumber: utils.hexToNumber,
      toDecimal: utils.hexToNumber,
      numberToHex: utils.numberToHex,
      fromDecimal: utils.numberToHex,
      hexToUtf8: utils.hexToUtf8,
      hexToString: utils.hexToUtf8,
      toUtf8: utils.hexToUtf8,
      utf8ToHex: utils.utf8ToHex,
      stringToHex: utils.utf8ToHex,
      fromUtf8: utils.utf8ToHex,
      hexToAscii,
      toAscii: hexToAscii,
      asciiToHex,
      fromAscii: asciiToHex,
      unitMap: ethjsUnit.unitMap,
      toWei,
      fromWei,
      padLeft: utils.leftPad,
      leftPad: utils.leftPad,
      padRight: utils.rightPad,
      rightPad: utils.rightPad,
      toTwosComplement: utils.toTwosComplement
    };
  }
});

// node_modules/ethereum-private-key-to-public-key/index.js
var require_ethereum_private_key_to_public_key = __commonJS({
  "node_modules/ethereum-private-key-to-public-key/index.js"(exports, module) {
    init_define_process_env();
    var { publicKeyCreate } = require_elliptic();
    function privateKeyToPublicKey(privateKey) {
      if (!Buffer.isBuffer(privateKey)) {
        if (typeof privateKey !== "string") {
          throw new Error("Expected Buffer or string as argument");
        }
        privateKey = privateKey.slice(0, 2) === "0x" ? privateKey.slice(2) : privateKey;
        privateKey = Buffer.from(privateKey, "hex");
      }
      return publicKeyCreate(privateKey, false);
    }
    module.exports = privateKeyToPublicKey;
  }
});

// node_modules/keccak256/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/keccak256/dist/index.js"(exports, module) {
    init_define_process_env();
    "use strict";
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var createKeccakHash = require_js();
    var BN = require_bn();
    function keccak256(a) {
      a = toBuffer(a);
      return createKeccakHash("keccak256").update(a).digest();
    }
    function toBuffer(v) {
      if (!Buffer.isBuffer(v)) {
        if (Array.isArray(v)) {
          v = Buffer.from(v);
        } else if (typeof v === "string") {
          if (isHexString(v)) {
            v = Buffer.from(padToEven(stripHexPrefix(v)), "hex");
          } else {
            v = Buffer.from(v);
          }
        } else if (typeof v === "number") {
          v = intToBuffer(v);
        } else if (v === null || v === void 0) {
          v = Buffer.allocUnsafe(0);
        } else if (BN.isBN(v)) {
          v = v.toArrayLike(Buffer);
        } else if (v.toArray) {
          v = Buffer.from(v.toArray());
        } else {
          throw new Error("invalid type");
        }
      }
      return v;
    }
    function isHexString(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
      }
      if (length && value.length !== 2 + 2 * length) {
        return false;
      }
      return true;
    }
    function padToEven(value) {
      var a = value;
      if (typeof a !== "string") {
        throw new Error("while padding to even, value must be string, is currently " + (typeof a === "undefined" ? "undefined" : _typeof(a)) + ", while padToEven.");
      }
      if (a.length % 2) {
        a = "0" + a;
      }
      return a;
    }
    function stripHexPrefix(str) {
      if (typeof str !== "string") {
        return str;
      }
      return isHexPrefixed(str) ? str.slice(2) : str;
    }
    function isHexPrefixed(str) {
      if (typeof str !== "string") {
        throw new Error("value must be type 'string', is currently type " + (typeof str === "undefined" ? "undefined" : _typeof(str)) + ", while checking isHexPrefixed.");
      }
      return str.slice(0, 2) === "0x";
    }
    function intToBuffer(i) {
      var hex = intToHex(i);
      return Buffer.from(padToEven(hex.slice(2)), "hex");
    }
    function intToHex(i) {
      var hex = i.toString(16);
      return "0x" + hex;
    }
    if (typeof window !== "undefined") {
      window.keccak256 = keccak256;
    }
    module.exports = keccak256;
  }
});

// node_modules/ethereum-checksum-address/index.js
var require_ethereum_checksum_address = __commonJS({
  "node_modules/ethereum-checksum-address/index.js"(exports, module) {
    init_define_process_env();
    var keccak256 = require_dist2();
    function toChecksumAddress(address, chainId = null) {
      if (typeof address !== "string") {
        return "";
      }
      if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {
        throw new Error(`Given address "${address}" is not a valid Ethereum address.`);
      }
      const stripAddress = stripHexPrefix(address).toLowerCase();
      const prefix = chainId != null ? chainId.toString() + "0x" : "";
      const keccakHash = keccak256(prefix + stripAddress).toString("hex").replace(/^0x/i, "");
      let checksumAddress = "0x";
      for (let i = 0; i < stripAddress.length; i++) {
        checksumAddress += parseInt(keccakHash[i], 16) >= 8 ? stripAddress[i].toUpperCase() : stripAddress[i];
      }
      return checksumAddress;
    }
    function checkAddressChecksum(address, chainId = null) {
      const stripAddress = stripHexPrefix(address).toLowerCase();
      const prefix = chainId != null ? chainId.toString() + "0x" : "";
      const keccakHash = keccak256(prefix + stripAddress).toString("hex").replace(/^0x/i, "");
      for (let i = 0; i < stripAddress.length; i++) {
        let output = parseInt(keccakHash[i], 16) >= 8 ? stripAddress[i].toUpperCase() : stripAddress[i];
        if (stripHexPrefix(address)[i] !== output) {
          return false;
        }
      }
      return true;
    }
    function stripHexPrefix(string) {
      return string.slice(0, 2) === "0x" ? string.slice(2) : string;
    }
    module.exports = {
      toChecksumAddress,
      checkAddressChecksum
    };
  }
});

// node_modules/ethereum-public-key-to-address/index.js
var require_ethereum_public_key_to_address = __commonJS({
  "node_modules/ethereum-public-key-to-address/index.js"(exports, module) {
    init_define_process_env();
    var { publicKeyConvert } = require_elliptic();
    var keccak256 = require_dist2();
    var { toChecksumAddress } = require_ethereum_checksum_address();
    function publicKeyToAddress(publicKey) {
      if (!Buffer.isBuffer(publicKey)) {
        if (typeof publicKey !== "string") {
          throw new Error("Expected Buffer or string as argument");
        }
        publicKey = publicKey.slice(0, 2) === "0x" ? publicKey.slice(2) : publicKey;
        publicKey = Buffer.from(publicKey, "hex");
      }
      publicKey = publicKeyConvert(publicKey, false).slice(1);
      return toChecksumAddress(keccak256(publicKey).slice(-20).toString("hex"));
    }
    module.exports = publicKeyToAddress;
  }
});

// node_modules/ethereum-private-key-to-address/index.js
var require_ethereum_private_key_to_address = __commonJS({
  "node_modules/ethereum-private-key-to-address/index.js"(exports, module) {
    init_define_process_env();
    var privateKeyToPublicKey = require_ethereum_private_key_to_public_key();
    var publicKeyToAddress = require_ethereum_public_key_to_address();
    function privateKeyToAddress(privateKey) {
      if (!Buffer.isBuffer(privateKey)) {
        if (typeof privateKey !== "string") {
          throw new Error("Expected Buffer or string as argument");
        }
        privateKey = privateKey.slice(0, 2) === "0x" ? privateKey.slice(2) : privateKey;
        privateKey = Buffer.from(privateKey, "hex");
      }
      return publicKeyToAddress(privateKeyToPublicKey(privateKey));
    }
    module.exports = privateKeyToAddress;
  }
});

// node_modules/authereum/node_modules/ethers/dist/ethers.min.js
var require_ethers_min = __commonJS({
  "node_modules/authereum/node_modules/ethers/dist/ethers.min.js"(exports, module) {
    init_define_process_env();
    !function(e) {
      if (typeof exports == "object" && typeof module != "undefined")
        module.exports = e();
      else if (typeof define == "function" && define.amd)
        define([], e);
      else {
        (typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this).ethers = e();
      }
    }(function() {
      return function o(s, a, u) {
        function l(t, e2) {
          if (!a[t]) {
            if (!s[t]) {
              var r = typeof __require == "function" && __require;
              if (!e2 && r)
                return r(t, true);
              if (h)
                return h(t, true);
              var n = new Error("Cannot find module '" + t + "'");
              throw n.code = "MODULE_NOT_FOUND", n;
            }
            var i = a[t] = { exports: {} };
            s[t][0].call(i.exports, function(e3) {
              return l(s[t][1][e3] || e3);
            }, i, i.exports, o, s, a, u);
          }
          return a[t].exports;
        }
        for (var h = typeof __require == "function" && __require, e = 0; e < u.length; e++)
          l(u[e]);
        return l;
      }({ 1: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true }), r.version = "4.0.47";
      }, {}], 2: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        var n = e("./utils/properties"), i = (o.isSigner = function(e2) {
          return n.isType(e2, "Signer");
        }, o);
        function o() {
          n.setType(this, "Signer");
        }
        r.Signer = i;
      }, { "./utils/properties": 74 }], 3: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        var n = e("./utils/bignumber");
        r.AddressZero = "0x0000000000000000000000000000000000000000";
        r.HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
        r.EtherSymbol = "\u039E";
        var i = n.bigNumberify(-1);
        r.NegativeOne = i;
        var o = n.bigNumberify(0);
        r.Zero = o;
        var s = n.bigNumberify(1);
        r.One = s;
        var a = n.bigNumberify(2);
        r.Two = a;
        var u = n.bigNumberify("1000000000000000000");
        r.WeiPerEther = u;
        var l = n.bigNumberify("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
        r.MaxUint256 = l;
      }, { "./utils/bignumber": 63 }], 4: [function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e2, t2) {
          e2.__proto__ = t2;
        } || function(e2, t2) {
          for (var r2 in t2)
            t2.hasOwnProperty(r2) && (e2[r2] = t2[r2]);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var s, u = e("./constants"), l = o(e("./errors")), h = e("./utils/abi-coder"), a = e("./utils/address"), f2 = e("./utils/bignumber"), c = e("./utils/bytes"), d = e("./utils/interface"), p = e("./utils/properties"), v = e("./providers/abstract-provider"), y = e("./abstract-signer"), m = (s = y.Signer, i(g, s), g.prototype.getAddress = function() {
          return Promise.resolve(this.address);
        }, g.prototype._fail = function(e2, t2) {
          return Promise.resolve().then(function() {
            l.throwError(e2, l.UNSUPPORTED_OPERATION, { operation: t2 });
          });
        }, g.prototype.signMessage = function(e2) {
          return this._fail("VoidSigner cannot sign messages", "signMessage");
        }, g.prototype.sendTransaction = function(e2) {
          return this._fail("VoidSigner cannot sign transactions", "sendTransaction");
        }, g.prototype.connect = function(e2) {
          return new g(this.address, e2);
        }, g);
        function g(e2, t2) {
          var r2 = s.call(this) || this;
          return p.defineReadOnly(r2, "address", e2), p.defineReadOnly(r2, "provider", t2), r2;
        }
        r.VoidSigner = m;
        var b = { chainId: true, data: true, from: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true };
        function w(o2, e2, s2) {
          var a2 = o2.interface.functions[e2];
          return function() {
            for (var e3 = [], t2 = 0; t2 < arguments.length; t2++)
              e3[t2] = arguments[t2];
            var i2 = {}, r2 = null;
            if (e3.length === a2.inputs.length + 1 && typeof e3[e3.length - 1] == "object") {
              for (var n2 in (i2 = p.shallowCopy(e3.pop())).blockTag != null && (r2 = i2.blockTag), delete i2.blockTag, i2)
                if (!b[n2])
                  throw new Error("unknown transaction override " + n2);
            }
            if (e3.length != a2.inputs.length)
              throw new Error("incorrect number of arguments");
            return ["data", "to"].forEach(function(e4) {
              i2[e4] != null && l.throwError("cannot override " + e4, l.UNSUPPORTED_OPERATION, { operation: e4 });
            }), i2.to = o2._deployed(r2).then(function() {
              return o2.addressPromise;
            }), function n3(i3, o3, e4) {
              if (Array.isArray(e4)) {
                var s3 = [];
                return e4.forEach(function(e5, t4) {
                  var r4 = null;
                  r4 = Array.isArray(o3) ? o3[t4] : o3[e5.name], s3.push(n3(i3, r4, e5));
                }), Promise.all(s3);
              }
              if (e4.type === "address")
                return i3.resolveName(o3);
              if (e4.type === "tuple")
                return n3(i3, o3, e4.components);
              var t3 = e4.type.match(/(.*)(\[[0-9]*\]$)/);
              if (t3) {
                if (!Array.isArray(o3))
                  throw new Error("invalid value for array");
                var r3 = [], a3 = { components: e4.components, type: t3[1] };
                return o3.forEach(function(e5) {
                  r3.push(n3(i3, e5, a3));
                }), Promise.all(r3);
              }
              return Promise.resolve(o3);
            }(o2.provider, e3, a2.inputs).then(function(n3) {
              if (i2.data = a2.encode(n3), a2.type === "call")
                return s2 ? Promise.resolve(u.Zero) : (o2.provider || l.throwError("call (constant functions) require a provider or a signer with a provider", l.UNSUPPORTED_OPERATION, { operation: "call" }), ["gasLimit", "gasPrice", "value"].forEach(function(e4) {
                  if (i2[e4] != null)
                    throw new Error("call cannot override " + e4);
                }), i2.from == null && o2.signer && (i2.from = o2.signer.getAddress()), o2.provider.call(i2, r2).then(function(t3) {
                  if (c.hexDataLength(t3) % 32 == 4 && c.hexDataSlice(t3, 0, 4) === "0x08c379a0") {
                    var e4 = h.defaultAbiCoder.decode(["string"], c.hexDataSlice(t3, 4));
                    l.throwError("call revert exception", l.CALL_EXCEPTION, { address: o2.address, args: n3, method: a2.signature, errorSignature: "Error(string)", errorArgs: [e4], reason: e4, transaction: i2 });
                  }
                  try {
                    var r3 = a2.decode(t3);
                    return a2.outputs.length === 1 && (r3 = r3[0]), r3;
                  } catch (e5) {
                    throw t3 === "0x" && 0 < a2.outputs.length && l.throwError("call exception", l.CALL_EXCEPTION, { address: o2.address, method: a2.signature, args: n3 }), e5;
                  }
                }));
              if (a2.type === "transaction")
                return s2 ? (o2.provider || l.throwError("estimate gas require a provider or a signer with a provider", l.UNSUPPORTED_OPERATION, { operation: "estimateGas" }), i2.from == null && o2.signer && (i2.from = o2.signer.getAddress()), o2.provider.estimateGas(i2)) : (i2.gasLimit == null && a2.gas != null && (i2.gasLimit = f2.bigNumberify(a2.gas).add(21e3)), o2.signer || l.throwError("sending a transaction requires a signer", l.UNSUPPORTED_OPERATION, { operation: "sendTransaction" }), i2.from != null && l.throwError("cannot override from in a transaction", l.UNSUPPORTED_OPERATION, { operation: "sendTransaction" }), o2.signer.sendTransaction(i2).then(function(e4) {
                  var t3 = e4.wait.bind(e4);
                  return e4.wait = function(e5) {
                    return t3(e5).then(function(n4) {
                      return n4.events = n4.logs.map(function(e6) {
                        var t4 = p.deepCopy(e6), r3 = o2.interface.parseLog(e6);
                        return r3 && (t4.args = r3.values, t4.decode = r3.decode, t4.event = r3.name, t4.eventSignature = r3.signature), t4.removeListener = function() {
                          return o2.provider;
                        }, t4.getBlock = function() {
                          return o2.provider.getBlock(n4.blockHash);
                        }, t4.getTransaction = function() {
                          return o2.provider.getTransaction(n4.transactionHash);
                        }, t4.getTransactionReceipt = function() {
                          return Promise.resolve(n4);
                        }, t4;
                      }), n4;
                    });
                  }, e4;
                }));
              throw new Error("invalid type - " + a2.type);
            });
          };
        }
        function _(e2) {
          return !e2.address || e2.topics != null && e2.topics.length !== 0 ? (e2.address || "*") + "@" + (e2.topics ? e2.topics.join(":") : "") : "*";
        }
        var M = (A.prototype.deployed = function() {
          return this._deployed();
        }, A.prototype._deployed = function(e2) {
          var t2 = this;
          return this._deployedPromise || (this.deployTransaction ? this._deployedPromise = this.deployTransaction.wait().then(function() {
            return t2;
          }) : this._deployedPromise = this.provider.getCode(this.address, e2).then(function(e3) {
            return e3 === "0x" && l.throwError("contract not deployed", l.UNSUPPORTED_OPERATION, { contractAddress: t2.address, operation: "getDeployed" }), t2;
          })), this._deployedPromise;
        }, A.prototype.fallback = function(e2) {
          var t2 = this;
          this.signer || l.throwError("sending a transaction requires a signer", l.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
          var r2 = p.shallowCopy(e2 || {});
          return ["from", "to"].forEach(function(e3) {
            r2[e3] != null && l.throwError("cannot override " + e3, l.UNSUPPORTED_OPERATION, { operation: e3 });
          }), r2.to = this.addressPromise, this.deployed().then(function() {
            return t2.signer.sendTransaction(r2);
          });
        }, A.prototype.connect = function(e2) {
          typeof e2 == "string" && (e2 = new m(e2, this.provider));
          var t2 = new A(this.address, this.interface, e2);
          return this.deployTransaction && p.defineReadOnly(t2, "deployTransaction", this.deployTransaction), t2;
        }, A.prototype.attach = function(e2) {
          return new A(e2, this.interface, this.signer || this.provider);
        }, A.isIndexed = function(e2) {
          return d.Interface.isIndexed(e2);
        }, A.prototype._getEventFilter = function(e2) {
          var r2 = this;
          if (typeof e2 == "string") {
            if (e2 === "*")
              return { prepareEvent: function(e3) {
                var t3 = r2.interface.parseLog(e3);
                return t3 && (e3.args = t3.values, e3.decode = t3.decode, e3.event = t3.name, e3.eventSignature = t3.signature), [e3];
              }, eventTag: "*", filter: { address: this.address } };
            e2.indexOf("(") !== -1 && (e2 = h.formatSignature(h.parseSignature("event " + e2)));
            var n2 = this.interface.events[e2];
            n2 || l.throwError("unknown event - " + e2, l.INVALID_ARGUMENT, { argumnet: "eventName", value: e2 });
            var t2 = { address: this.address, topics: [n2.topic] };
            return { prepareEvent: function(e3) {
              var t3 = n2.decode(e3.data, e3.topics);
              e3.args = t3;
              var r3 = Array.prototype.slice.call(t3);
              return r3.push(e3), r3;
            }, event: n2, eventTag: _(t2), filter: t2 };
          }
          var i2 = { address: this.address }, o2 = null;
          if (e2.topics && e2.topics[0]) {
            for (var s2 in i2.topics = e2.topics, this.interface.events)
              if (s2.indexOf("(") !== -1) {
                var a2 = this.interface.events[s2];
                if (a2.topic === e2.topics[0].toLowerCase()) {
                  o2 = a2;
                  break;
                }
              }
          }
          return { prepareEvent: function(e3) {
            if (!o2)
              return [e3];
            var t3 = o2.decode(e3.data, e3.topics);
            e3.args = t3;
            var r3 = Array.prototype.slice.call(t3);
            return r3.push(e3), r3;
          }, event: o2, eventTag: _(i2), filter: i2 };
        }, A.prototype._addEventListener = function(n2, i2, e2) {
          var o2 = this;
          function t2(e3) {
            var t3 = p.deepCopy(e3), r2 = n2.prepareEvent(t3);
            n2.event && (t3.decode = n2.event.decode, t3.event = n2.event.name, t3.eventSignature = n2.event.signature), t3.removeListener = function() {
              o2.removeListener(n2.filter, i2);
            }, t3.getBlock = function() {
              return o2.provider.getBlock(e3.blockHash);
            }, t3.getTransaction = function() {
              return o2.provider.getTransaction(e3.transactionHash);
            }, t3.getTransactionReceipt = function() {
              return o2.provider.getTransactionReceipt(e3.transactionHash);
            }, o2.emit.apply(o2, [n2.filter].concat(r2));
          }
          this.provider || l.throwError("events require a provider or a signer with a provider", l.UNSUPPORTED_OPERATION, { operation: "once" }), this.provider.on(n2.filter, t2), this._events.push({ eventFilter: n2, listener: i2, wrappedListener: t2, once: e2 });
        }, A.prototype.on = function(e2, t2) {
          return this._addEventListener(this._getEventFilter(e2), t2, false), this;
        }, A.prototype.once = function(e2, t2) {
          return this._addEventListener(this._getEventFilter(e2), t2, true), this;
        }, A.prototype.addListener = function(e2, t2) {
          return this.on(e2, t2);
        }, A.prototype.emit = function(e2) {
          for (var t2 = this, r2 = [], n2 = 1; n2 < arguments.length; n2++)
            r2[n2 - 1] = arguments[n2];
          if (!this.provider)
            return false;
          var i2 = false, o2 = this._getEventFilter(e2);
          return this._events = this._events.filter(function(e3) {
            return e3.eventFilter.eventTag !== o2.eventTag || (setTimeout(function() {
              e3.listener.apply(t2, r2);
            }, 0), i2 = true, !e3.once);
          }), i2;
        }, A.prototype.listenerCount = function(e2) {
          if (!this.provider)
            return 0;
          var t2 = this._getEventFilter(e2);
          return this._events.filter(function(e3) {
            return e3.eventFilter.eventTag === t2.eventTag;
          }).length;
        }, A.prototype.listeners = function(e2) {
          if (!this.provider)
            return [];
          var t2 = this._getEventFilter(e2);
          return this._events.filter(function(e3) {
            return e3.eventFilter.eventTag === t2.eventTag;
          }).map(function(e3) {
            return e3.listener;
          });
        }, A.prototype.removeAllListeners = function(e2) {
          var t2 = this;
          if (!this.provider)
            return this;
          var r2 = this._getEventFilter(e2);
          return this._events = this._events.filter(function(e3) {
            return e3.eventFilter.eventTag !== r2.eventTag || (t2.provider.removeListener(e3.eventFilter.filter, e3.wrappedListener), false);
          }), this;
        }, A.prototype.removeListener = function(e2, t2) {
          var r2 = this;
          if (!this.provider)
            return this;
          var n2 = false, i2 = this._getEventFilter(e2);
          return this._events = this._events.filter(function(e3) {
            return e3.eventFilter.eventTag !== i2.eventTag || e3.listener !== t2 || (r2.provider.removeListener(e3.eventFilter.filter, e3.wrappedListener), !!n2 || !(n2 = true));
          }), this;
        }, A);
        function A(t2, e2, r2) {
          var n2 = this;
          if (l.checkNew(this, A), d.Interface.isInterface(e2) ? p.defineReadOnly(this, "interface", e2) : p.defineReadOnly(this, "interface", new d.Interface(e2)), y.Signer.isSigner(r2) ? (p.defineReadOnly(this, "provider", r2.provider), p.defineReadOnly(this, "signer", r2)) : v.Provider.isProvider(r2) ? (p.defineReadOnly(this, "provider", r2), p.defineReadOnly(this, "signer", null)) : l.throwError("invalid signer or provider", l.INVALID_ARGUMENT, { arg: "signerOrProvider", value: r2 }), p.defineReadOnly(this, "estimate", {}), p.defineReadOnly(this, "functions", {}), p.defineReadOnly(this, "filters", {}), Object.keys(this.interface.events).forEach(function(e3) {
            var r3 = n2.interface.events[e3];
            p.defineReadOnly(n2.filters, e3, function() {
              for (var e4 = [], t3 = 0; t3 < arguments.length; t3++)
                e4[t3] = arguments[t3];
              return { address: n2.address, topics: r3.encodeTopics(e4) };
            });
          }), this._events = [], p.defineReadOnly(this, "address", t2), this.provider)
            p.defineReadOnly(this, "addressPromise", this.provider.resolveName(t2).then(function(e3) {
              if (e3 == null)
                throw new Error("name not found");
              return e3;
            }).catch(function(e3) {
              throw e3;
            }));
          else
            try {
              p.defineReadOnly(this, "addressPromise", Promise.resolve(a.getAddress(t2)));
            } catch (e3) {
              l.throwError("provider is required to use non-address contract address", l.INVALID_ARGUMENT, { argument: "addressOrName", value: t2 });
            }
          Object.keys(this.interface.functions).forEach(function(e3) {
            var t3 = w(n2, e3, false);
            n2[e3] == null ? p.defineReadOnly(n2, e3, t3) : l.warn("WARNING: Multiple definitions for " + e3), n2.functions[e3] == null && (p.defineReadOnly(n2.functions, e3, t3), p.defineReadOnly(n2.estimate, e3, w(n2, e3, true)));
          });
        }
        r.Contract = M;
        var E = (S.prototype.getDeployTransaction = function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2[t2] = arguments[t2];
          var r2 = {};
          if (e2.length === this.interface.deployFunction.inputs.length + 1) {
            for (var n2 in r2 = p.shallowCopy(e2.pop()))
              if (!b[n2])
                throw new Error("unknown transaction override " + n2);
          }
          return ["data", "from", "to"].forEach(function(e3) {
            r2[e3] != null && l.throwError("cannot override " + e3, l.UNSUPPORTED_OPERATION, { operation: e3 });
          }), l.checkArgumentCount(e2.length, this.interface.deployFunction.inputs.length, " in Contract constructor"), r2.data = this.interface.deployFunction.encode(this.bytecode, e2), r2;
        }, S.prototype.deploy = function() {
          for (var r2 = this, e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2[t2] = arguments[t2];
          var n2 = this.getDeployTransaction.apply(this, e2);
          return this.signer.sendTransaction(n2).then(function(e3) {
            var t3 = new M(a.getContractAddress(e3), r2.interface, r2.signer);
            return p.defineReadOnly(t3, "deployTransaction", e3), t3;
          });
        }, S.prototype.attach = function(e2) {
          return new M(e2, this.interface, this.signer);
        }, S.prototype.connect = function(e2) {
          return new S(this.interface, this.bytecode, e2);
        }, S.fromSolidity = function(e2, t2) {
          e2 == null && l.throwError("missing compiler output", l.MISSING_ARGUMENT, { argument: "compilerOutput" }), typeof e2 == "string" && (e2 = JSON.parse(e2));
          var r2 = e2.abi, n2 = null;
          return e2.bytecode ? n2 = e2.bytecode : e2.evm && e2.evm.bytecode && (n2 = e2.evm.bytecode), new S(r2, n2, t2);
        }, S);
        function S(e2, t2, r2) {
          var n2 = null;
          typeof t2 == "string" ? n2 = t2 : c.isArrayish(t2) ? n2 = c.hexlify(t2) : typeof t2.object == "string" ? n2 = t2.object : l.throwError("bytecode must be a valid hex string", l.INVALID_ARGUMENT, { arg: "bytecode", value: t2 }), n2.substring(0, 2) !== "0x" && (n2 = "0x" + n2), c.isHexString(n2) || l.throwError("bytecode must be a valid hex string", l.INVALID_ARGUMENT, { arg: "bytecode", value: t2 }), n2.length % 2 != 0 && l.throwError("bytecode must be valid data (even length)", l.INVALID_ARGUMENT, { arg: "bytecode", value: t2 }), p.defineReadOnly(this, "bytecode", n2), d.Interface.isInterface(e2) ? p.defineReadOnly(this, "interface", e2) : p.defineReadOnly(this, "interface", new d.Interface(e2)), r2 && !y.Signer.isSigner(r2) && l.throwError("invalid signer", l.INVALID_ARGUMENT, { arg: "signer", value: null }), p.defineReadOnly(this, "signer", r2 || null);
        }
        r.ContractFactory = E;
      }, { "./abstract-signer": 2, "./constants": 3, "./errors": 5, "./providers/abstract-provider": 50, "./utils/abi-coder": 59, "./utils/address": 60, "./utils/bignumber": 63, "./utils/bytes": 64, "./utils/interface": 69, "./utils/properties": 74 }], 5: [function(e, t, s) {
        "use strict";
        Object.defineProperty(s, "__esModule", { value: true });
        var a = e("./_version");
        s.UNKNOWN_ERROR = "UNKNOWN_ERROR", s.NOT_IMPLEMENTED = "NOT_IMPLEMENTED", s.MISSING_NEW = "MISSING_NEW", s.CALL_EXCEPTION = "CALL_EXCEPTION", s.INVALID_ARGUMENT = "INVALID_ARGUMENT", s.MISSING_ARGUMENT = "MISSING_ARGUMENT", s.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT", s.NUMERIC_FAULT = "NUMERIC_FAULT", s.INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS", s.NONCE_EXPIRED = "NONCE_EXPIRED", s.REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED";
        var r = !(s.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION"), u = false;
        function n(e2, t2, r2) {
          if (u)
            throw new Error("unknown error");
          t2 = t2 || s.UNKNOWN_ERROR, r2 = r2 || {};
          var n2 = [];
          Object.keys(r2).forEach(function(t3) {
            try {
              n2.push(t3 + "=" + JSON.stringify(r2[t3]));
            } catch (e3) {
              n2.push(t3 + "=" + JSON.stringify(r2[t3].toString()));
            }
          }), n2.push("version=" + a.version);
          var i2 = e2;
          n2.length && (e2 += " (" + n2.join(", ") + ")");
          var o2 = new Error(e2);
          throw o2.reason = i2, o2.code = t2, Object.keys(r2).forEach(function(e3) {
            o2[e3] = r2[e3];
          }), o2;
        }
        s.throwError = n, s.checkNew = function(e2, t2) {
          e2 instanceof t2 || n("missing new", s.MISSING_NEW, { name: t2.name });
        }, s.checkArgumentCount = function(e2, t2, r2) {
          r2 = r2 || "", e2 < t2 && n("missing argument" + r2, s.MISSING_ARGUMENT, { count: e2, expectedCount: t2 }), t2 < e2 && n("too many arguments" + r2, s.UNEXPECTED_ARGUMENT, { count: e2, expectedCount: t2 });
        }, s.setCensorship = function(e2, t2) {
          r && n("error censorship permanent", s.UNSUPPORTED_OPERATION, { operation: "setCensorship" }), u = !!e2, r = !!t2;
        }, s.checkNormalize = function() {
          try {
            if (["NFD", "NFC", "NFKD", "NFKC"].forEach(function(t2) {
              try {
                "test".normalize(t2);
              } catch (e2) {
                throw new Error("missing " + t2);
              }
            }), String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769))
              throw new Error("broken implementation");
          } catch (e2) {
            n("platform missing String.prototype.normalize", s.UNSUPPORTED_OPERATION, { operation: "String.prototype.normalize", form: e2.message });
          }
        };
        var i = { debug: 1, default: 2, info: 2, warn: 3, error: 4, off: 5 }, o = i.default;
        function l(e2, t2) {
          o > i[e2] || console.log.apply(console, t2);
        }
        function h() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2[t2] = arguments[t2];
          l("warn", e2);
        }
        s.setLogLevel = function(e2) {
          var t2 = i[e2];
          t2 != null ? o = t2 : h("invliad log level - " + e2);
        }, s.warn = h, s.info = function() {
          for (var e2 = [], t2 = 0; t2 < arguments.length; t2++)
            e2[t2] = arguments[t2];
          l("info", e2);
        };
      }, { "./_version": 1 }], 6: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var i = e("./contract");
        r.Contract = i.Contract, r.ContractFactory = i.ContractFactory, r.VoidSigner = i.VoidSigner;
        var o = e("./abstract-signer");
        r.Signer = o.Signer;
        var s = e("./wallet");
        r.Wallet = s.Wallet;
        var a = n(e("./constants"));
        r.constants = a;
        var u = n(e("./errors"));
        r.errors = u;
        var l = n(e("./providers"));
        r.providers = l;
        var h = n(e("./utils"));
        r.utils = h;
        var f2 = n(e("./wordlists"));
        r.wordlists = f2;
        var c = e("./utils/shims");
        r.platform = c.platform;
        var d = e("./_version");
        r.version = d.version, r.getDefaultProvider = function(e2) {
          e2 == null && (e2 = "homestead");
          var t2 = h.getNetwork(e2);
          return t2 && t2._defaultProvider || u.throwError("unsupported getDefaultProvider network", u.UNSUPPORTED_OPERATION, { operation: "getDefaultProvider", network: e2 }), t2._defaultProvider(l);
        };
      }, { "./_version": 1, "./abstract-signer": 2, "./constants": 3, "./contract": 4, "./errors": 5, "./providers": 54, "./utils": 68, "./utils/shims": 80, "./wallet": 88, "./wordlists": 89 }], 7: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var i = n(e("./ethers"));
        r.ethers = i, function(e2) {
          for (var t2 in e2)
            r.hasOwnProperty(t2) || (r[t2] = e2[t2]);
        }(e("./ethers"));
      }, { "./ethers": 6 }], 8: [function(e, C, L) {
        "use strict";
        !function(e2) {
          function r(e3) {
            return parseInt(e3) === e3;
          }
          function n(e3) {
            if (!r(e3.length))
              return false;
            for (var t2 = 0; t2 < e3.length; t2++)
              if (!r(e3[t2]) || e3[t2] < 0 || 255 < e3[t2])
                return false;
            return true;
          }
          function o(e3, t2) {
            if (e3.buffer && ArrayBuffer.isView(e3) && e3.name === "Uint8Array")
              return t2 && (e3 = e3.slice ? e3.slice() : Array.prototype.slice.call(e3)), e3;
            if (Array.isArray(e3)) {
              if (!n(e3))
                throw new Error("Array contains invalid value: " + e3);
              return new Uint8Array(e3);
            }
            if (r(e3.length) && n(e3))
              return new Uint8Array(e3);
            throw new Error("unsupported array-like object");
          }
          function u(e3) {
            return new Uint8Array(e3);
          }
          function s(e3, t2, r2, n2, i2) {
            n2 == null && i2 == null || (e3 = e3.slice ? e3.slice(n2, i2) : Array.prototype.slice.call(e3, n2, i2)), t2.set(e3, r2);
          }
          var i, t = { toBytes: function(e3) {
            var t2 = [], r2 = 0;
            for (e3 = encodeURI(e3); r2 < e3.length; ) {
              var n2 = e3.charCodeAt(r2++);
              n2 === 37 ? (t2.push(parseInt(e3.substr(r2, 2), 16)), r2 += 2) : t2.push(n2);
            }
            return o(t2);
          }, fromBytes: function(e3) {
            for (var t2 = [], r2 = 0; r2 < e3.length; ) {
              var n2 = e3[r2];
              n2 < 128 ? (t2.push(String.fromCharCode(n2)), r2++) : 191 < n2 && n2 < 224 ? (t2.push(String.fromCharCode((31 & n2) << 6 | 63 & e3[r2 + 1])), r2 += 2) : (t2.push(String.fromCharCode((15 & n2) << 12 | (63 & e3[r2 + 1]) << 6 | 63 & e3[r2 + 2])), r2 += 3);
            }
            return t2.join("");
          } }, a = (i = "0123456789abcdef", { toBytes: function(e3) {
            for (var t2 = [], r2 = 0; r2 < e3.length; r2 += 2)
              t2.push(parseInt(e3.substr(r2, 2), 16));
            return t2;
          }, fromBytes: function(e3) {
            for (var t2 = [], r2 = 0; r2 < e3.length; r2++) {
              var n2 = e3[r2];
              t2.push(i[(240 & n2) >> 4] + i[15 & n2]);
            }
            return t2.join("");
          } }), f2 = { 16: 10, 24: 12, 32: 14 }, c = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145], d = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22], l = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125], h = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986], p = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766], v = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126], y = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436], m = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890], g = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935], b = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600], w = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480], _ = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795], M = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855], A = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150], E = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
          function S(e3) {
            for (var t2 = [], r2 = 0; r2 < e3.length; r2 += 4)
              t2.push(e3[r2] << 24 | e3[r2 + 1] << 16 | e3[r2 + 2] << 8 | e3[r2 + 3]);
            return t2;
          }
          var k = function(e3) {
            if (!(this instanceof k))
              throw Error("AES must be instanitated with `new`");
            Object.defineProperty(this, "key", { value: o(e3, true) }), this._prepare();
          };
          k.prototype._prepare = function() {
            var e3 = f2[this.key.length];
            if (e3 == null)
              throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
            this._Ke = [], this._Kd = [];
            for (var t2 = 0; t2 <= e3; t2++)
              this._Ke.push([0, 0, 0, 0]), this._Kd.push([0, 0, 0, 0]);
            var r2, n2 = 4 * (e3 + 1), i2 = this.key.length / 4, o2 = S(this.key);
            for (t2 = 0; t2 < i2; t2++)
              r2 = t2 >> 2, this._Ke[r2][t2 % 4] = o2[t2], this._Kd[e3 - r2][t2 % 4] = o2[t2];
            for (var s2, a2 = 0, u2 = i2; u2 < n2; ) {
              if (s2 = o2[i2 - 1], o2[0] ^= d[s2 >> 16 & 255] << 24 ^ d[s2 >> 8 & 255] << 16 ^ d[255 & s2] << 8 ^ d[s2 >> 24 & 255] ^ c[a2] << 24, a2 += 1, i2 != 8)
                for (t2 = 1; t2 < i2; t2++)
                  o2[t2] ^= o2[t2 - 1];
              else {
                for (t2 = 1; t2 < i2 / 2; t2++)
                  o2[t2] ^= o2[t2 - 1];
                s2 = o2[i2 / 2 - 1], o2[i2 / 2] ^= d[255 & s2] ^ d[s2 >> 8 & 255] << 8 ^ d[s2 >> 16 & 255] << 16 ^ d[s2 >> 24 & 255] << 24;
                for (t2 = i2 / 2 + 1; t2 < i2; t2++)
                  o2[t2] ^= o2[t2 - 1];
              }
              for (t2 = 0; t2 < i2 && u2 < n2; )
                l2 = u2 >> 2, h2 = u2 % 4, this._Ke[l2][h2] = o2[t2], this._Kd[e3 - l2][h2] = o2[t2++], u2++;
            }
            for (var l2 = 1; l2 < e3; l2++)
              for (var h2 = 0; h2 < 4; h2++)
                s2 = this._Kd[l2][h2], this._Kd[l2][h2] = _[s2 >> 24 & 255] ^ M[s2 >> 16 & 255] ^ A[s2 >> 8 & 255] ^ E[255 & s2];
          }, k.prototype.encrypt = function(e3) {
            if (e3.length != 16)
              throw new Error("invalid plaintext size (must be 16 bytes)");
            for (var t2 = this._Ke.length - 1, r2 = [0, 0, 0, 0], n2 = S(e3), i2 = 0; i2 < 4; i2++)
              n2[i2] ^= this._Ke[0][i2];
            for (var o2 = 1; o2 < t2; o2++) {
              for (i2 = 0; i2 < 4; i2++)
                r2[i2] = h[n2[i2] >> 24 & 255] ^ p[n2[(i2 + 1) % 4] >> 16 & 255] ^ v[n2[(i2 + 2) % 4] >> 8 & 255] ^ y[255 & n2[(i2 + 3) % 4]] ^ this._Ke[o2][i2];
              n2 = r2.slice();
            }
            var s2, a2 = u(16);
            for (i2 = 0; i2 < 4; i2++)
              s2 = this._Ke[t2][i2], a2[4 * i2] = 255 & (d[n2[i2] >> 24 & 255] ^ s2 >> 24), a2[4 * i2 + 1] = 255 & (d[n2[(i2 + 1) % 4] >> 16 & 255] ^ s2 >> 16), a2[4 * i2 + 2] = 255 & (d[n2[(i2 + 2) % 4] >> 8 & 255] ^ s2 >> 8), a2[4 * i2 + 3] = 255 & (d[255 & n2[(i2 + 3) % 4]] ^ s2);
            return a2;
          }, k.prototype.decrypt = function(e3) {
            if (e3.length != 16)
              throw new Error("invalid ciphertext size (must be 16 bytes)");
            for (var t2 = this._Kd.length - 1, r2 = [0, 0, 0, 0], n2 = S(e3), i2 = 0; i2 < 4; i2++)
              n2[i2] ^= this._Kd[0][i2];
            for (var o2 = 1; o2 < t2; o2++) {
              for (i2 = 0; i2 < 4; i2++)
                r2[i2] = m[n2[i2] >> 24 & 255] ^ g[n2[(i2 + 3) % 4] >> 16 & 255] ^ b[n2[(i2 + 2) % 4] >> 8 & 255] ^ w[255 & n2[(i2 + 1) % 4]] ^ this._Kd[o2][i2];
              n2 = r2.slice();
            }
            var s2, a2 = u(16);
            for (i2 = 0; i2 < 4; i2++)
              s2 = this._Kd[t2][i2], a2[4 * i2] = 255 & (l[n2[i2] >> 24 & 255] ^ s2 >> 24), a2[4 * i2 + 1] = 255 & (l[n2[(i2 + 3) % 4] >> 16 & 255] ^ s2 >> 16), a2[4 * i2 + 2] = 255 & (l[n2[(i2 + 2) % 4] >> 8 & 255] ^ s2 >> 8), a2[4 * i2 + 3] = 255 & (l[255 & n2[(i2 + 1) % 4]] ^ s2);
            return a2;
          };
          var N = function(e3) {
            if (!(this instanceof N))
              throw Error("AES must be instanitated with `new`");
            this.description = "Electronic Code Block", this.name = "ecb", this._aes = new k(e3);
          };
          N.prototype.encrypt = function(e3) {
            if ((e3 = o(e3)).length % 16 != 0)
              throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
            for (var t2 = u(e3.length), r2 = u(16), n2 = 0; n2 < e3.length; n2 += 16)
              s(e3, r2, 0, n2, n2 + 16), s(r2 = this._aes.encrypt(r2), t2, n2);
            return t2;
          }, N.prototype.decrypt = function(e3) {
            if ((e3 = o(e3)).length % 16 != 0)
              throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
            for (var t2 = u(e3.length), r2 = u(16), n2 = 0; n2 < e3.length; n2 += 16)
              s(e3, r2, 0, n2, n2 + 16), s(r2 = this._aes.decrypt(r2), t2, n2);
            return t2;
          };
          var x = function(e3, t2) {
            if (!(this instanceof x))
              throw Error("AES must be instanitated with `new`");
            if (this.description = "Cipher Block Chaining", this.name = "cbc", t2) {
              if (t2.length != 16)
                throw new Error("invalid initialation vector size (must be 16 bytes)");
            } else
              t2 = u(16);
            this._lastCipherblock = o(t2, true), this._aes = new k(e3);
          };
          x.prototype.encrypt = function(e3) {
            if ((e3 = o(e3)).length % 16 != 0)
              throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
            for (var t2 = u(e3.length), r2 = u(16), n2 = 0; n2 < e3.length; n2 += 16) {
              s(e3, r2, 0, n2, n2 + 16);
              for (var i2 = 0; i2 < 16; i2++)
                r2[i2] ^= this._lastCipherblock[i2];
              this._lastCipherblock = this._aes.encrypt(r2), s(this._lastCipherblock, t2, n2);
            }
            return t2;
          }, x.prototype.decrypt = function(e3) {
            if ((e3 = o(e3)).length % 16 != 0)
              throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
            for (var t2 = u(e3.length), r2 = u(16), n2 = 0; n2 < e3.length; n2 += 16) {
              s(e3, r2, 0, n2, n2 + 16), r2 = this._aes.decrypt(r2);
              for (var i2 = 0; i2 < 16; i2++)
                t2[n2 + i2] = r2[i2] ^ this._lastCipherblock[i2];
              s(e3, this._lastCipherblock, 0, n2, n2 + 16);
            }
            return t2;
          };
          var P = function(e3, t2, r2) {
            if (!(this instanceof P))
              throw Error("AES must be instanitated with `new`");
            if (this.description = "Cipher Feedback", this.name = "cfb", t2) {
              if (t2.length != 16)
                throw new Error("invalid initialation vector size (must be 16 size)");
            } else
              t2 = u(16);
            r2 = r2 || 1, this.segmentSize = r2, this._shiftRegister = o(t2, true), this._aes = new k(e3);
          };
          P.prototype.encrypt = function(e3) {
            if (e3.length % this.segmentSize != 0)
              throw new Error("invalid plaintext size (must be segmentSize bytes)");
            for (var t2, r2 = o(e3, true), n2 = 0; n2 < r2.length; n2 += this.segmentSize) {
              t2 = this._aes.encrypt(this._shiftRegister);
              for (var i2 = 0; i2 < this.segmentSize; i2++)
                r2[n2 + i2] ^= t2[i2];
              s(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), s(r2, this._shiftRegister, 16 - this.segmentSize, n2, n2 + this.segmentSize);
            }
            return r2;
          }, P.prototype.decrypt = function(e3) {
            if (e3.length % this.segmentSize != 0)
              throw new Error("invalid ciphertext size (must be segmentSize bytes)");
            for (var t2, r2 = o(e3, true), n2 = 0; n2 < r2.length; n2 += this.segmentSize) {
              t2 = this._aes.encrypt(this._shiftRegister);
              for (var i2 = 0; i2 < this.segmentSize; i2++)
                r2[n2 + i2] ^= t2[i2];
              s(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), s(e3, this._shiftRegister, 16 - this.segmentSize, n2, n2 + this.segmentSize);
            }
            return r2;
          };
          var I = function(e3, t2) {
            if (!(this instanceof I))
              throw Error("AES must be instanitated with `new`");
            if (this.description = "Output Feedback", this.name = "ofb", t2) {
              if (t2.length != 16)
                throw new Error("invalid initialation vector size (must be 16 bytes)");
            } else
              t2 = u(16);
            this._lastPrecipher = o(t2, true), this._lastPrecipherIndex = 16, this._aes = new k(e3);
          };
          I.prototype.encrypt = function(e3) {
            for (var t2 = o(e3, true), r2 = 0; r2 < t2.length; r2++)
              this._lastPrecipherIndex === 16 && (this._lastPrecipher = this._aes.encrypt(this._lastPrecipher), this._lastPrecipherIndex = 0), t2[r2] ^= this._lastPrecipher[this._lastPrecipherIndex++];
            return t2;
          }, I.prototype.decrypt = I.prototype.encrypt;
          var T = function(e3) {
            if (!(this instanceof T))
              throw Error("Counter must be instanitated with `new`");
            e3 === 0 || e3 || (e3 = 1), typeof e3 == "number" ? (this._counter = u(16), this.setValue(e3)) : this.setBytes(e3);
          };
          T.prototype.setValue = function(e3) {
            if (typeof e3 != "number" || parseInt(e3) != e3)
              throw new Error("invalid counter value (must be an integer)");
            for (var t2 = 15; 0 <= t2; --t2)
              this._counter[t2] = e3 % 256, e3 >>= 8;
          }, T.prototype.setBytes = function(e3) {
            if ((e3 = o(e3, true)).length != 16)
              throw new Error("invalid counter bytes size (must be 16 bytes)");
            this._counter = e3;
          }, T.prototype.increment = function() {
            for (var e3 = 15; 0 <= e3; e3--) {
              if (this._counter[e3] !== 255) {
                this._counter[e3]++;
                break;
              }
              this._counter[e3] = 0;
            }
          };
          var R = function(e3, t2) {
            if (!(this instanceof R))
              throw Error("AES must be instanitated with `new`");
            this.description = "Counter", this.name = "ctr", t2 instanceof T || (t2 = new T(t2)), this._counter = t2, this._remainingCounter = null, this._remainingCounterIndex = 16, this._aes = new k(e3);
          };
          R.prototype.encrypt = function(e3) {
            for (var t2 = o(e3, true), r2 = 0; r2 < t2.length; r2++)
              this._remainingCounterIndex === 16 && (this._remainingCounter = this._aes.encrypt(this._counter._counter), this._remainingCounterIndex = 0, this._counter.increment()), t2[r2] ^= this._remainingCounter[this._remainingCounterIndex++];
            return t2;
          }, R.prototype.decrypt = R.prototype.encrypt;
          var O = { AES: k, Counter: T, ModeOfOperation: { ecb: N, cbc: x, cfb: P, ofb: I, ctr: R }, utils: { hex: a, utf8: t }, padding: { pkcs7: { pad: function(e3) {
            var t2 = 16 - (e3 = o(e3, true)).length % 16, r2 = u(e3.length + t2);
            s(e3, r2);
            for (var n2 = e3.length; n2 < r2.length; n2++)
              r2[n2] = t2;
            return r2;
          }, strip: function(e3) {
            if ((e3 = o(e3, true)).length < 16)
              throw new Error("PKCS#7 invalid length");
            var t2 = e3[e3.length - 1];
            if (16 < t2)
              throw new Error("PKCS#7 padding byte out of range");
            for (var r2 = e3.length - t2, n2 = 0; n2 < t2; n2++)
              if (e3[r2 + n2] !== t2)
                throw new Error("PKCS#7 invalid padding byte");
            var i2 = u(r2);
            return s(e3, i2, 0, 0, r2), i2;
          } } }, _arrayTest: { coerceArray: o, createArray: u, copyArray: s } };
          L !== void 0 ? C.exports = O : (e2.aesjs && (O._aesjs = e2.aesjs), e2.aesjs = O);
        }(this);
      }, {}], 9: [function(A, e, t) {
        !function(e2, t2) {
          "use strict";
          function y(e3, t3) {
            if (!e3)
              throw new Error(t3 || "Assertion failed");
          }
          function r(e3, t3) {
            e3.super_ = t3;
            function r2() {
            }
            r2.prototype = t3.prototype, e3.prototype = new r2(), e3.prototype.constructor = e3;
          }
          function m(e3, t3, r2) {
            if (m.isBN(e3))
              return e3;
            this.negative = 0, this.words = null, this.length = 0, (this.red = null) !== e3 && (t3 !== "le" && t3 !== "be" || (r2 = t3, t3 = 10), this._init(e3 || 0, t3 || 10, r2 || "be"));
          }
          var n;
          typeof e2 == "object" ? e2.exports = m : t2.BN = m, (m.BN = m).wordSize = 26;
          try {
            n = A("buffer").Buffer;
          } catch (e3) {
          }
          function s(e3, t3, r2) {
            for (var n2 = 0, i2 = Math.min(e3.length, r2), o2 = t3; o2 < i2; o2++) {
              var s2 = e3.charCodeAt(o2) - 48;
              n2 <<= 4, n2 |= 49 <= s2 && s2 <= 54 ? s2 - 49 + 10 : 17 <= s2 && s2 <= 22 ? s2 - 17 + 10 : 15 & s2;
            }
            return n2;
          }
          function f2(e3, t3, r2, n2) {
            for (var i2 = 0, o2 = Math.min(e3.length, r2), s2 = t3; s2 < o2; s2++) {
              var a2 = e3.charCodeAt(s2) - 48;
              i2 *= n2, i2 += 49 <= a2 ? a2 - 49 + 10 : 17 <= a2 ? a2 - 17 + 10 : a2;
            }
            return i2;
          }
          m.isBN = function(e3) {
            return e3 instanceof m || e3 !== null && typeof e3 == "object" && e3.constructor.wordSize === m.wordSize && Array.isArray(e3.words);
          }, m.max = function(e3, t3) {
            return 0 < e3.cmp(t3) ? e3 : t3;
          }, m.min = function(e3, t3) {
            return e3.cmp(t3) < 0 ? e3 : t3;
          }, m.prototype._init = function(e3, t3, r2) {
            if (typeof e3 == "number")
              return this._initNumber(e3, t3, r2);
            if (typeof e3 == "object")
              return this._initArray(e3, t3, r2);
            t3 === "hex" && (t3 = 16), y(t3 === (0 | t3) && 2 <= t3 && t3 <= 36);
            var n2 = 0;
            (e3 = e3.toString().replace(/\s+/g, ""))[0] === "-" && n2++, t3 === 16 ? this._parseHex(e3, n2) : this._parseBase(e3, t3, n2), e3[0] === "-" && (this.negative = 1), this.strip(), r2 === "le" && this._initArray(this.toArray(), t3, r2);
          }, m.prototype._initNumber = function(e3, t3, r2) {
            e3 < 0 && (this.negative = 1, e3 = -e3), e3 < 67108864 ? (this.words = [67108863 & e3], this.length = 1) : e3 < 4503599627370496 ? (this.words = [67108863 & e3, e3 / 67108864 & 67108863], this.length = 2) : (y(e3 < 9007199254740992), this.words = [67108863 & e3, e3 / 67108864 & 67108863, 1], this.length = 3), r2 === "le" && this._initArray(this.toArray(), t3, r2);
          }, m.prototype._initArray = function(e3, t3, r2) {
            if (y(typeof e3.length == "number"), e3.length <= 0)
              return this.words = [0], this.length = 1, this;
            this.length = Math.ceil(e3.length / 3), this.words = new Array(this.length);
            for (var n2 = 0; n2 < this.length; n2++)
              this.words[n2] = 0;
            var i2, o2, s2 = 0;
            if (r2 === "be")
              for (n2 = e3.length - 1, i2 = 0; 0 <= n2; n2 -= 3)
                o2 = e3[n2] | e3[n2 - 1] << 8 | e3[n2 - 2] << 16, this.words[i2] |= o2 << s2 & 67108863, this.words[i2 + 1] = o2 >>> 26 - s2 & 67108863, 26 <= (s2 += 24) && (s2 -= 26, i2++);
            else if (r2 === "le")
              for (i2 = n2 = 0; n2 < e3.length; n2 += 3)
                o2 = e3[n2] | e3[n2 + 1] << 8 | e3[n2 + 2] << 16, this.words[i2] |= o2 << s2 & 67108863, this.words[i2 + 1] = o2 >>> 26 - s2 & 67108863, 26 <= (s2 += 24) && (s2 -= 26, i2++);
            return this.strip();
          }, m.prototype._parseHex = function(e3, t3) {
            this.length = Math.ceil((e3.length - t3) / 6), this.words = new Array(this.length);
            for (var r2 = 0; r2 < this.length; r2++)
              this.words[r2] = 0;
            var n2, i2, o2 = 0;
            for (r2 = e3.length - 6, n2 = 0; t3 <= r2; r2 -= 6)
              i2 = s(e3, r2, r2 + 6), this.words[n2] |= i2 << o2 & 67108863, this.words[n2 + 1] |= i2 >>> 26 - o2 & 4194303, 26 <= (o2 += 24) && (o2 -= 26, n2++);
            r2 + 6 !== t3 && (i2 = s(e3, t3, r2 + 6), this.words[n2] |= i2 << o2 & 67108863, this.words[n2 + 1] |= i2 >>> 26 - o2 & 4194303), this.strip();
          }, m.prototype._parseBase = function(e3, t3, r2) {
            this.words = [0];
            for (var n2 = 0, i2 = this.length = 1; i2 <= 67108863; i2 *= t3)
              n2++;
            n2--, i2 = i2 / t3 | 0;
            for (var o2 = e3.length - r2, s2 = o2 % n2, a2 = Math.min(o2, o2 - s2) + r2, u2 = 0, l2 = r2; l2 < a2; l2 += n2)
              u2 = f2(e3, l2, l2 + n2, t3), this.imuln(i2), this.words[0] + u2 < 67108864 ? this.words[0] += u2 : this._iaddn(u2);
            if (s2 != 0) {
              var h2 = 1;
              for (u2 = f2(e3, l2, e3.length, t3), l2 = 0; l2 < s2; l2++)
                h2 *= t3;
              this.imuln(h2), this.words[0] + u2 < 67108864 ? this.words[0] += u2 : this._iaddn(u2);
            }
          }, m.prototype.copy = function(e3) {
            e3.words = new Array(this.length);
            for (var t3 = 0; t3 < this.length; t3++)
              e3.words[t3] = this.words[t3];
            e3.length = this.length, e3.negative = this.negative, e3.red = this.red;
          }, m.prototype.clone = function() {
            var e3 = new m(null);
            return this.copy(e3), e3;
          }, m.prototype._expand = function(e3) {
            for (; this.length < e3; )
              this.words[this.length++] = 0;
            return this;
          }, m.prototype.strip = function() {
            for (; 1 < this.length && this.words[this.length - 1] === 0; )
              this.length--;
            return this._normSign();
          }, m.prototype._normSign = function() {
            return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
          }, m.prototype.inspect = function() {
            return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
          };
          var c = ["", "0", "00", "000", "0000", "00000", "000000", "0000000", "00000000", "000000000", "0000000000", "00000000000", "000000000000", "0000000000000", "00000000000000", "000000000000000", "0000000000000000", "00000000000000000", "000000000000000000", "0000000000000000000", "00000000000000000000", "000000000000000000000", "0000000000000000000000", "00000000000000000000000", "000000000000000000000000", "0000000000000000000000000"], d = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5], p = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 1e7, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64e6, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 243e5, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];
          function i(e3, t3, r2) {
            r2.negative = t3.negative ^ e3.negative;
            var n2 = e3.length + t3.length | 0;
            n2 = (r2.length = n2) - 1 | 0;
            var i2 = 0 | e3.words[0], o2 = 0 | t3.words[0], s2 = i2 * o2, a2 = 67108863 & s2, u2 = s2 / 67108864 | 0;
            r2.words[0] = a2;
            for (var l2 = 1; l2 < n2; l2++) {
              for (var h2 = u2 >>> 26, f3 = 67108863 & u2, c2 = Math.min(l2, t3.length - 1), d2 = Math.max(0, l2 - e3.length + 1); d2 <= c2; d2++) {
                var p2 = l2 - d2 | 0;
                h2 += (s2 = (i2 = 0 | e3.words[p2]) * (o2 = 0 | t3.words[d2]) + f3) / 67108864 | 0, f3 = 67108863 & s2;
              }
              r2.words[l2] = 0 | f3, u2 = 0 | h2;
            }
            return u2 !== 0 ? r2.words[l2] = 0 | u2 : r2.length--, r2.strip();
          }
          m.prototype.toString = function(e3, t3) {
            var r2;
            if (t3 = 0 | t3 || 1, (e3 = e3 || 10) === 16 || e3 === "hex") {
              r2 = "";
              for (var n2 = 0, i2 = 0, o2 = 0; o2 < this.length; o2++) {
                var s2 = this.words[o2], a2 = (16777215 & (s2 << n2 | i2)).toString(16);
                r2 = (i2 = s2 >>> 24 - n2 & 16777215) !== 0 || o2 !== this.length - 1 ? c[6 - a2.length] + a2 + r2 : a2 + r2, 26 <= (n2 += 2) && (n2 -= 26, o2--);
              }
              for (i2 !== 0 && (r2 = i2.toString(16) + r2); r2.length % t3 != 0; )
                r2 = "0" + r2;
              return this.negative !== 0 && (r2 = "-" + r2), r2;
            }
            if (e3 === (0 | e3) && 2 <= e3 && e3 <= 36) {
              var u2 = d[e3], l2 = p[e3];
              r2 = "";
              var h2 = this.clone();
              for (h2.negative = 0; !h2.isZero(); ) {
                var f3 = h2.modn(l2).toString(e3);
                r2 = (h2 = h2.idivn(l2)).isZero() ? f3 + r2 : c[u2 - f3.length] + f3 + r2;
              }
              for (this.isZero() && (r2 = "0" + r2); r2.length % t3 != 0; )
                r2 = "0" + r2;
              return this.negative !== 0 && (r2 = "-" + r2), r2;
            }
            y(false, "Base should be between 2 and 36");
          }, m.prototype.toNumber = function() {
            var e3 = this.words[0];
            return this.length === 2 ? e3 += 67108864 * this.words[1] : this.length === 3 && this.words[2] === 1 ? e3 += 4503599627370496 + 67108864 * this.words[1] : 2 < this.length && y(false, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -e3 : e3;
          }, m.prototype.toJSON = function() {
            return this.toString(16);
          }, m.prototype.toBuffer = function(e3, t3) {
            return y(n !== void 0), this.toArrayLike(n, e3, t3);
          }, m.prototype.toArray = function(e3, t3) {
            return this.toArrayLike(Array, e3, t3);
          }, m.prototype.toArrayLike = function(e3, t3, r2) {
            var n2 = this.byteLength(), i2 = r2 || Math.max(1, n2);
            y(n2 <= i2, "byte array longer than desired length"), y(0 < i2, "Requested array length <= 0"), this.strip();
            var o2, s2, a2 = t3 === "le", u2 = new e3(i2), l2 = this.clone();
            if (a2) {
              for (s2 = 0; !l2.isZero(); s2++)
                o2 = l2.andln(255), l2.iushrn(8), u2[s2] = o2;
              for (; s2 < i2; s2++)
                u2[s2] = 0;
            } else {
              for (s2 = 0; s2 < i2 - n2; s2++)
                u2[s2] = 0;
              for (s2 = 0; !l2.isZero(); s2++)
                o2 = l2.andln(255), l2.iushrn(8), u2[i2 - s2 - 1] = o2;
            }
            return u2;
          }, m.prototype._countBits = Math.clz32 ? function(e3) {
            return 32 - Math.clz32(e3);
          } : function(e3) {
            var t3 = e3, r2 = 0;
            return 4096 <= t3 && (r2 += 13, t3 >>>= 13), 64 <= t3 && (r2 += 7, t3 >>>= 7), 8 <= t3 && (r2 += 4, t3 >>>= 4), 2 <= t3 && (r2 += 2, t3 >>>= 2), r2 + t3;
          }, m.prototype._zeroBits = function(e3) {
            if (e3 === 0)
              return 26;
            var t3 = e3, r2 = 0;
            return (8191 & t3) == 0 && (r2 += 13, t3 >>>= 13), (127 & t3) == 0 && (r2 += 7, t3 >>>= 7), (15 & t3) == 0 && (r2 += 4, t3 >>>= 4), (3 & t3) == 0 && (r2 += 2, t3 >>>= 2), (1 & t3) == 0 && r2++, r2;
          }, m.prototype.bitLength = function() {
            var e3 = this.words[this.length - 1], t3 = this._countBits(e3);
            return 26 * (this.length - 1) + t3;
          }, m.prototype.zeroBits = function() {
            if (this.isZero())
              return 0;
            for (var e3 = 0, t3 = 0; t3 < this.length; t3++) {
              var r2 = this._zeroBits(this.words[t3]);
              if (e3 += r2, r2 !== 26)
                break;
            }
            return e3;
          }, m.prototype.byteLength = function() {
            return Math.ceil(this.bitLength() / 8);
          }, m.prototype.toTwos = function(e3) {
            return this.negative !== 0 ? this.abs().inotn(e3).iaddn(1) : this.clone();
          }, m.prototype.fromTwos = function(e3) {
            return this.testn(e3 - 1) ? this.notn(e3).iaddn(1).ineg() : this.clone();
          }, m.prototype.isNeg = function() {
            return this.negative !== 0;
          }, m.prototype.neg = function() {
            return this.clone().ineg();
          }, m.prototype.ineg = function() {
            return this.isZero() || (this.negative ^= 1), this;
          }, m.prototype.iuor = function(e3) {
            for (; this.length < e3.length; )
              this.words[this.length++] = 0;
            for (var t3 = 0; t3 < e3.length; t3++)
              this.words[t3] = this.words[t3] | e3.words[t3];
            return this.strip();
          }, m.prototype.ior = function(e3) {
            return y((this.negative | e3.negative) == 0), this.iuor(e3);
          }, m.prototype.or = function(e3) {
            return this.length > e3.length ? this.clone().ior(e3) : e3.clone().ior(this);
          }, m.prototype.uor = function(e3) {
            return this.length > e3.length ? this.clone().iuor(e3) : e3.clone().iuor(this);
          }, m.prototype.iuand = function(e3) {
            var t3;
            t3 = this.length > e3.length ? e3 : this;
            for (var r2 = 0; r2 < t3.length; r2++)
              this.words[r2] = this.words[r2] & e3.words[r2];
            return this.length = t3.length, this.strip();
          }, m.prototype.iand = function(e3) {
            return y((this.negative | e3.negative) == 0), this.iuand(e3);
          }, m.prototype.and = function(e3) {
            return this.length > e3.length ? this.clone().iand(e3) : e3.clone().iand(this);
          }, m.prototype.uand = function(e3) {
            return this.length > e3.length ? this.clone().iuand(e3) : e3.clone().iuand(this);
          }, m.prototype.iuxor = function(e3) {
            var t3, r2;
            r2 = this.length > e3.length ? (t3 = this, e3) : (t3 = e3, this);
            for (var n2 = 0; n2 < r2.length; n2++)
              this.words[n2] = t3.words[n2] ^ r2.words[n2];
            if (this !== t3)
              for (; n2 < t3.length; n2++)
                this.words[n2] = t3.words[n2];
            return this.length = t3.length, this.strip();
          }, m.prototype.ixor = function(e3) {
            return y((this.negative | e3.negative) == 0), this.iuxor(e3);
          }, m.prototype.xor = function(e3) {
            return this.length > e3.length ? this.clone().ixor(e3) : e3.clone().ixor(this);
          }, m.prototype.uxor = function(e3) {
            return this.length > e3.length ? this.clone().iuxor(e3) : e3.clone().iuxor(this);
          }, m.prototype.inotn = function(e3) {
            y(typeof e3 == "number" && 0 <= e3);
            var t3 = 0 | Math.ceil(e3 / 26), r2 = e3 % 26;
            this._expand(t3), 0 < r2 && t3--;
            for (var n2 = 0; n2 < t3; n2++)
              this.words[n2] = 67108863 & ~this.words[n2];
            return 0 < r2 && (this.words[n2] = ~this.words[n2] & 67108863 >> 26 - r2), this.strip();
          }, m.prototype.notn = function(e3) {
            return this.clone().inotn(e3);
          }, m.prototype.setn = function(e3, t3) {
            y(typeof e3 == "number" && 0 <= e3);
            var r2 = e3 / 26 | 0, n2 = e3 % 26;
            return this._expand(1 + r2), this.words[r2] = t3 ? this.words[r2] | 1 << n2 : this.words[r2] & ~(1 << n2), this.strip();
          }, m.prototype.iadd = function(e3) {
            var t3, r2, n2;
            if (this.negative !== 0 && e3.negative === 0)
              return this.negative = 0, t3 = this.isub(e3), this.negative ^= 1, this._normSign();
            if (this.negative === 0 && e3.negative !== 0)
              return e3.negative = 0, t3 = this.isub(e3), e3.negative = 1, t3._normSign();
            n2 = this.length > e3.length ? (r2 = this, e3) : (r2 = e3, this);
            for (var i2 = 0, o2 = 0; o2 < n2.length; o2++)
              t3 = (0 | r2.words[o2]) + (0 | n2.words[o2]) + i2, this.words[o2] = 67108863 & t3, i2 = t3 >>> 26;
            for (; i2 !== 0 && o2 < r2.length; o2++)
              t3 = (0 | r2.words[o2]) + i2, this.words[o2] = 67108863 & t3, i2 = t3 >>> 26;
            if (this.length = r2.length, i2 !== 0)
              this.words[this.length] = i2, this.length++;
            else if (r2 !== this)
              for (; o2 < r2.length; o2++)
                this.words[o2] = r2.words[o2];
            return this;
          }, m.prototype.add = function(e3) {
            var t3;
            return e3.negative !== 0 && this.negative === 0 ? (e3.negative = 0, t3 = this.sub(e3), e3.negative ^= 1, t3) : e3.negative === 0 && this.negative !== 0 ? (this.negative = 0, t3 = e3.sub(this), this.negative = 1, t3) : this.length > e3.length ? this.clone().iadd(e3) : e3.clone().iadd(this);
          }, m.prototype.isub = function(e3) {
            if (e3.negative !== 0) {
              e3.negative = 0;
              var t3 = this.iadd(e3);
              return e3.negative = 1, t3._normSign();
            }
            if (this.negative !== 0)
              return this.negative = 0, this.iadd(e3), this.negative = 1, this._normSign();
            var r2, n2, i2 = this.cmp(e3);
            if (i2 === 0)
              return this.negative = 0, this.length = 1, this.words[0] = 0, this;
            n2 = 0 < i2 ? (r2 = this, e3) : (r2 = e3, this);
            for (var o2 = 0, s2 = 0; s2 < n2.length; s2++)
              o2 = (t3 = (0 | r2.words[s2]) - (0 | n2.words[s2]) + o2) >> 26, this.words[s2] = 67108863 & t3;
            for (; o2 !== 0 && s2 < r2.length; s2++)
              o2 = (t3 = (0 | r2.words[s2]) + o2) >> 26, this.words[s2] = 67108863 & t3;
            if (o2 === 0 && s2 < r2.length && r2 !== this)
              for (; s2 < r2.length; s2++)
                this.words[s2] = r2.words[s2];
            return this.length = Math.max(this.length, s2), r2 !== this && (this.negative = 1), this.strip();
          }, m.prototype.sub = function(e3) {
            return this.clone().isub(e3);
          };
          var o = function(e3, t3, r2) {
            var n2, i2, o2, s2 = e3.words, a2 = t3.words, u2 = r2.words, l2 = 0, h2 = 0 | s2[0], f3 = 8191 & h2, c2 = h2 >>> 13, d2 = 0 | s2[1], p2 = 8191 & d2, v2 = d2 >>> 13, y2 = 0 | s2[2], m2 = 8191 & y2, g2 = y2 >>> 13, b2 = 0 | s2[3], w2 = 8191 & b2, _2 = b2 >>> 13, M2 = 0 | s2[4], A2 = 8191 & M2, E = M2 >>> 13, S = 0 | s2[5], k = 8191 & S, N = S >>> 13, x = 0 | s2[6], P = 8191 & x, I = x >>> 13, T = 0 | s2[7], R = 8191 & T, O = T >>> 13, C = 0 | s2[8], L = 8191 & C, D = C >>> 13, B = 0 | s2[9], U = 8191 & B, F = B >>> 13, j = 0 | a2[0], G = 8191 & j, H = j >>> 13, z = 0 | a2[1], V = 8191 & z, K = z >>> 13, q = 0 | a2[2], W = 8191 & q, Z = q >>> 13, J = 0 | a2[3], X = 8191 & J, $ = J >>> 13, Q = 0 | a2[4], Y = 8191 & Q, ee = Q >>> 13, te = 0 | a2[5], re = 8191 & te, ne = te >>> 13, ie = 0 | a2[6], oe = 8191 & ie, se = ie >>> 13, ae = 0 | a2[7], ue = 8191 & ae, le = ae >>> 13, he = 0 | a2[8], fe = 8191 & he, ce = he >>> 13, de = 0 | a2[9], pe = 8191 & de, ve = de >>> 13;
            r2.negative = e3.negative ^ t3.negative, r2.length = 19;
            var ye = (l2 + (n2 = Math.imul(f3, G)) | 0) + ((8191 & (i2 = (i2 = Math.imul(f3, H)) + Math.imul(c2, G) | 0)) << 13) | 0;
            l2 = ((o2 = Math.imul(c2, H)) + (i2 >>> 13) | 0) + (ye >>> 26) | 0, ye &= 67108863, n2 = Math.imul(p2, G), i2 = (i2 = Math.imul(p2, H)) + Math.imul(v2, G) | 0, o2 = Math.imul(v2, H);
            var me = (l2 + (n2 = n2 + Math.imul(f3, V) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(f3, K) | 0) + Math.imul(c2, V) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(c2, K) | 0) + (i2 >>> 13) | 0) + (me >>> 26) | 0, me &= 67108863, n2 = Math.imul(m2, G), i2 = (i2 = Math.imul(m2, H)) + Math.imul(g2, G) | 0, o2 = Math.imul(g2, H), n2 = n2 + Math.imul(p2, V) | 0, i2 = (i2 = i2 + Math.imul(p2, K) | 0) + Math.imul(v2, V) | 0, o2 = o2 + Math.imul(v2, K) | 0;
            var ge = (l2 + (n2 = n2 + Math.imul(f3, W) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(f3, Z) | 0) + Math.imul(c2, W) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(c2, Z) | 0) + (i2 >>> 13) | 0) + (ge >>> 26) | 0, ge &= 67108863, n2 = Math.imul(w2, G), i2 = (i2 = Math.imul(w2, H)) + Math.imul(_2, G) | 0, o2 = Math.imul(_2, H), n2 = n2 + Math.imul(m2, V) | 0, i2 = (i2 = i2 + Math.imul(m2, K) | 0) + Math.imul(g2, V) | 0, o2 = o2 + Math.imul(g2, K) | 0, n2 = n2 + Math.imul(p2, W) | 0, i2 = (i2 = i2 + Math.imul(p2, Z) | 0) + Math.imul(v2, W) | 0, o2 = o2 + Math.imul(v2, Z) | 0;
            var be = (l2 + (n2 = n2 + Math.imul(f3, X) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(f3, $) | 0) + Math.imul(c2, X) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(c2, $) | 0) + (i2 >>> 13) | 0) + (be >>> 26) | 0, be &= 67108863, n2 = Math.imul(A2, G), i2 = (i2 = Math.imul(A2, H)) + Math.imul(E, G) | 0, o2 = Math.imul(E, H), n2 = n2 + Math.imul(w2, V) | 0, i2 = (i2 = i2 + Math.imul(w2, K) | 0) + Math.imul(_2, V) | 0, o2 = o2 + Math.imul(_2, K) | 0, n2 = n2 + Math.imul(m2, W) | 0, i2 = (i2 = i2 + Math.imul(m2, Z) | 0) + Math.imul(g2, W) | 0, o2 = o2 + Math.imul(g2, Z) | 0, n2 = n2 + Math.imul(p2, X) | 0, i2 = (i2 = i2 + Math.imul(p2, $) | 0) + Math.imul(v2, X) | 0, o2 = o2 + Math.imul(v2, $) | 0;
            var we = (l2 + (n2 = n2 + Math.imul(f3, Y) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(f3, ee) | 0) + Math.imul(c2, Y) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(c2, ee) | 0) + (i2 >>> 13) | 0) + (we >>> 26) | 0, we &= 67108863, n2 = Math.imul(k, G), i2 = (i2 = Math.imul(k, H)) + Math.imul(N, G) | 0, o2 = Math.imul(N, H), n2 = n2 + Math.imul(A2, V) | 0, i2 = (i2 = i2 + Math.imul(A2, K) | 0) + Math.imul(E, V) | 0, o2 = o2 + Math.imul(E, K) | 0, n2 = n2 + Math.imul(w2, W) | 0, i2 = (i2 = i2 + Math.imul(w2, Z) | 0) + Math.imul(_2, W) | 0, o2 = o2 + Math.imul(_2, Z) | 0, n2 = n2 + Math.imul(m2, X) | 0, i2 = (i2 = i2 + Math.imul(m2, $) | 0) + Math.imul(g2, X) | 0, o2 = o2 + Math.imul(g2, $) | 0, n2 = n2 + Math.imul(p2, Y) | 0, i2 = (i2 = i2 + Math.imul(p2, ee) | 0) + Math.imul(v2, Y) | 0, o2 = o2 + Math.imul(v2, ee) | 0;
            var _e = (l2 + (n2 = n2 + Math.imul(f3, re) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(f3, ne) | 0) + Math.imul(c2, re) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(c2, ne) | 0) + (i2 >>> 13) | 0) + (_e >>> 26) | 0, _e &= 67108863, n2 = Math.imul(P, G), i2 = (i2 = Math.imul(P, H)) + Math.imul(I, G) | 0, o2 = Math.imul(I, H), n2 = n2 + Math.imul(k, V) | 0, i2 = (i2 = i2 + Math.imul(k, K) | 0) + Math.imul(N, V) | 0, o2 = o2 + Math.imul(N, K) | 0, n2 = n2 + Math.imul(A2, W) | 0, i2 = (i2 = i2 + Math.imul(A2, Z) | 0) + Math.imul(E, W) | 0, o2 = o2 + Math.imul(E, Z) | 0, n2 = n2 + Math.imul(w2, X) | 0, i2 = (i2 = i2 + Math.imul(w2, $) | 0) + Math.imul(_2, X) | 0, o2 = o2 + Math.imul(_2, $) | 0, n2 = n2 + Math.imul(m2, Y) | 0, i2 = (i2 = i2 + Math.imul(m2, ee) | 0) + Math.imul(g2, Y) | 0, o2 = o2 + Math.imul(g2, ee) | 0, n2 = n2 + Math.imul(p2, re) | 0, i2 = (i2 = i2 + Math.imul(p2, ne) | 0) + Math.imul(v2, re) | 0, o2 = o2 + Math.imul(v2, ne) | 0;
            var Me = (l2 + (n2 = n2 + Math.imul(f3, oe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(f3, se) | 0) + Math.imul(c2, oe) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(c2, se) | 0) + (i2 >>> 13) | 0) + (Me >>> 26) | 0, Me &= 67108863, n2 = Math.imul(R, G), i2 = (i2 = Math.imul(R, H)) + Math.imul(O, G) | 0, o2 = Math.imul(O, H), n2 = n2 + Math.imul(P, V) | 0, i2 = (i2 = i2 + Math.imul(P, K) | 0) + Math.imul(I, V) | 0, o2 = o2 + Math.imul(I, K) | 0, n2 = n2 + Math.imul(k, W) | 0, i2 = (i2 = i2 + Math.imul(k, Z) | 0) + Math.imul(N, W) | 0, o2 = o2 + Math.imul(N, Z) | 0, n2 = n2 + Math.imul(A2, X) | 0, i2 = (i2 = i2 + Math.imul(A2, $) | 0) + Math.imul(E, X) | 0, o2 = o2 + Math.imul(E, $) | 0, n2 = n2 + Math.imul(w2, Y) | 0, i2 = (i2 = i2 + Math.imul(w2, ee) | 0) + Math.imul(_2, Y) | 0, o2 = o2 + Math.imul(_2, ee) | 0, n2 = n2 + Math.imul(m2, re) | 0, i2 = (i2 = i2 + Math.imul(m2, ne) | 0) + Math.imul(g2, re) | 0, o2 = o2 + Math.imul(g2, ne) | 0, n2 = n2 + Math.imul(p2, oe) | 0, i2 = (i2 = i2 + Math.imul(p2, se) | 0) + Math.imul(v2, oe) | 0, o2 = o2 + Math.imul(v2, se) | 0;
            var Ae = (l2 + (n2 = n2 + Math.imul(f3, ue) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(f3, le) | 0) + Math.imul(c2, ue) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(c2, le) | 0) + (i2 >>> 13) | 0) + (Ae >>> 26) | 0, Ae &= 67108863, n2 = Math.imul(L, G), i2 = (i2 = Math.imul(L, H)) + Math.imul(D, G) | 0, o2 = Math.imul(D, H), n2 = n2 + Math.imul(R, V) | 0, i2 = (i2 = i2 + Math.imul(R, K) | 0) + Math.imul(O, V) | 0, o2 = o2 + Math.imul(O, K) | 0, n2 = n2 + Math.imul(P, W) | 0, i2 = (i2 = i2 + Math.imul(P, Z) | 0) + Math.imul(I, W) | 0, o2 = o2 + Math.imul(I, Z) | 0, n2 = n2 + Math.imul(k, X) | 0, i2 = (i2 = i2 + Math.imul(k, $) | 0) + Math.imul(N, X) | 0, o2 = o2 + Math.imul(N, $) | 0, n2 = n2 + Math.imul(A2, Y) | 0, i2 = (i2 = i2 + Math.imul(A2, ee) | 0) + Math.imul(E, Y) | 0, o2 = o2 + Math.imul(E, ee) | 0, n2 = n2 + Math.imul(w2, re) | 0, i2 = (i2 = i2 + Math.imul(w2, ne) | 0) + Math.imul(_2, re) | 0, o2 = o2 + Math.imul(_2, ne) | 0, n2 = n2 + Math.imul(m2, oe) | 0, i2 = (i2 = i2 + Math.imul(m2, se) | 0) + Math.imul(g2, oe) | 0, o2 = o2 + Math.imul(g2, se) | 0, n2 = n2 + Math.imul(p2, ue) | 0, i2 = (i2 = i2 + Math.imul(p2, le) | 0) + Math.imul(v2, ue) | 0, o2 = o2 + Math.imul(v2, le) | 0;
            var Ee = (l2 + (n2 = n2 + Math.imul(f3, fe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(f3, ce) | 0) + Math.imul(c2, fe) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(c2, ce) | 0) + (i2 >>> 13) | 0) + (Ee >>> 26) | 0, Ee &= 67108863, n2 = Math.imul(U, G), i2 = (i2 = Math.imul(U, H)) + Math.imul(F, G) | 0, o2 = Math.imul(F, H), n2 = n2 + Math.imul(L, V) | 0, i2 = (i2 = i2 + Math.imul(L, K) | 0) + Math.imul(D, V) | 0, o2 = o2 + Math.imul(D, K) | 0, n2 = n2 + Math.imul(R, W) | 0, i2 = (i2 = i2 + Math.imul(R, Z) | 0) + Math.imul(O, W) | 0, o2 = o2 + Math.imul(O, Z) | 0, n2 = n2 + Math.imul(P, X) | 0, i2 = (i2 = i2 + Math.imul(P, $) | 0) + Math.imul(I, X) | 0, o2 = o2 + Math.imul(I, $) | 0, n2 = n2 + Math.imul(k, Y) | 0, i2 = (i2 = i2 + Math.imul(k, ee) | 0) + Math.imul(N, Y) | 0, o2 = o2 + Math.imul(N, ee) | 0, n2 = n2 + Math.imul(A2, re) | 0, i2 = (i2 = i2 + Math.imul(A2, ne) | 0) + Math.imul(E, re) | 0, o2 = o2 + Math.imul(E, ne) | 0, n2 = n2 + Math.imul(w2, oe) | 0, i2 = (i2 = i2 + Math.imul(w2, se) | 0) + Math.imul(_2, oe) | 0, o2 = o2 + Math.imul(_2, se) | 0, n2 = n2 + Math.imul(m2, ue) | 0, i2 = (i2 = i2 + Math.imul(m2, le) | 0) + Math.imul(g2, ue) | 0, o2 = o2 + Math.imul(g2, le) | 0, n2 = n2 + Math.imul(p2, fe) | 0, i2 = (i2 = i2 + Math.imul(p2, ce) | 0) + Math.imul(v2, fe) | 0, o2 = o2 + Math.imul(v2, ce) | 0;
            var Se = (l2 + (n2 = n2 + Math.imul(f3, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(f3, ve) | 0) + Math.imul(c2, pe) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(c2, ve) | 0) + (i2 >>> 13) | 0) + (Se >>> 26) | 0, Se &= 67108863, n2 = Math.imul(U, V), i2 = (i2 = Math.imul(U, K)) + Math.imul(F, V) | 0, o2 = Math.imul(F, K), n2 = n2 + Math.imul(L, W) | 0, i2 = (i2 = i2 + Math.imul(L, Z) | 0) + Math.imul(D, W) | 0, o2 = o2 + Math.imul(D, Z) | 0, n2 = n2 + Math.imul(R, X) | 0, i2 = (i2 = i2 + Math.imul(R, $) | 0) + Math.imul(O, X) | 0, o2 = o2 + Math.imul(O, $) | 0, n2 = n2 + Math.imul(P, Y) | 0, i2 = (i2 = i2 + Math.imul(P, ee) | 0) + Math.imul(I, Y) | 0, o2 = o2 + Math.imul(I, ee) | 0, n2 = n2 + Math.imul(k, re) | 0, i2 = (i2 = i2 + Math.imul(k, ne) | 0) + Math.imul(N, re) | 0, o2 = o2 + Math.imul(N, ne) | 0, n2 = n2 + Math.imul(A2, oe) | 0, i2 = (i2 = i2 + Math.imul(A2, se) | 0) + Math.imul(E, oe) | 0, o2 = o2 + Math.imul(E, se) | 0, n2 = n2 + Math.imul(w2, ue) | 0, i2 = (i2 = i2 + Math.imul(w2, le) | 0) + Math.imul(_2, ue) | 0, o2 = o2 + Math.imul(_2, le) | 0, n2 = n2 + Math.imul(m2, fe) | 0, i2 = (i2 = i2 + Math.imul(m2, ce) | 0) + Math.imul(g2, fe) | 0, o2 = o2 + Math.imul(g2, ce) | 0;
            var ke = (l2 + (n2 = n2 + Math.imul(p2, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(p2, ve) | 0) + Math.imul(v2, pe) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(v2, ve) | 0) + (i2 >>> 13) | 0) + (ke >>> 26) | 0, ke &= 67108863, n2 = Math.imul(U, W), i2 = (i2 = Math.imul(U, Z)) + Math.imul(F, W) | 0, o2 = Math.imul(F, Z), n2 = n2 + Math.imul(L, X) | 0, i2 = (i2 = i2 + Math.imul(L, $) | 0) + Math.imul(D, X) | 0, o2 = o2 + Math.imul(D, $) | 0, n2 = n2 + Math.imul(R, Y) | 0, i2 = (i2 = i2 + Math.imul(R, ee) | 0) + Math.imul(O, Y) | 0, o2 = o2 + Math.imul(O, ee) | 0, n2 = n2 + Math.imul(P, re) | 0, i2 = (i2 = i2 + Math.imul(P, ne) | 0) + Math.imul(I, re) | 0, o2 = o2 + Math.imul(I, ne) | 0, n2 = n2 + Math.imul(k, oe) | 0, i2 = (i2 = i2 + Math.imul(k, se) | 0) + Math.imul(N, oe) | 0, o2 = o2 + Math.imul(N, se) | 0, n2 = n2 + Math.imul(A2, ue) | 0, i2 = (i2 = i2 + Math.imul(A2, le) | 0) + Math.imul(E, ue) | 0, o2 = o2 + Math.imul(E, le) | 0, n2 = n2 + Math.imul(w2, fe) | 0, i2 = (i2 = i2 + Math.imul(w2, ce) | 0) + Math.imul(_2, fe) | 0, o2 = o2 + Math.imul(_2, ce) | 0;
            var Ne = (l2 + (n2 = n2 + Math.imul(m2, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(m2, ve) | 0) + Math.imul(g2, pe) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(g2, ve) | 0) + (i2 >>> 13) | 0) + (Ne >>> 26) | 0, Ne &= 67108863, n2 = Math.imul(U, X), i2 = (i2 = Math.imul(U, $)) + Math.imul(F, X) | 0, o2 = Math.imul(F, $), n2 = n2 + Math.imul(L, Y) | 0, i2 = (i2 = i2 + Math.imul(L, ee) | 0) + Math.imul(D, Y) | 0, o2 = o2 + Math.imul(D, ee) | 0, n2 = n2 + Math.imul(R, re) | 0, i2 = (i2 = i2 + Math.imul(R, ne) | 0) + Math.imul(O, re) | 0, o2 = o2 + Math.imul(O, ne) | 0, n2 = n2 + Math.imul(P, oe) | 0, i2 = (i2 = i2 + Math.imul(P, se) | 0) + Math.imul(I, oe) | 0, o2 = o2 + Math.imul(I, se) | 0, n2 = n2 + Math.imul(k, ue) | 0, i2 = (i2 = i2 + Math.imul(k, le) | 0) + Math.imul(N, ue) | 0, o2 = o2 + Math.imul(N, le) | 0, n2 = n2 + Math.imul(A2, fe) | 0, i2 = (i2 = i2 + Math.imul(A2, ce) | 0) + Math.imul(E, fe) | 0, o2 = o2 + Math.imul(E, ce) | 0;
            var xe = (l2 + (n2 = n2 + Math.imul(w2, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(w2, ve) | 0) + Math.imul(_2, pe) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(_2, ve) | 0) + (i2 >>> 13) | 0) + (xe >>> 26) | 0, xe &= 67108863, n2 = Math.imul(U, Y), i2 = (i2 = Math.imul(U, ee)) + Math.imul(F, Y) | 0, o2 = Math.imul(F, ee), n2 = n2 + Math.imul(L, re) | 0, i2 = (i2 = i2 + Math.imul(L, ne) | 0) + Math.imul(D, re) | 0, o2 = o2 + Math.imul(D, ne) | 0, n2 = n2 + Math.imul(R, oe) | 0, i2 = (i2 = i2 + Math.imul(R, se) | 0) + Math.imul(O, oe) | 0, o2 = o2 + Math.imul(O, se) | 0, n2 = n2 + Math.imul(P, ue) | 0, i2 = (i2 = i2 + Math.imul(P, le) | 0) + Math.imul(I, ue) | 0, o2 = o2 + Math.imul(I, le) | 0, n2 = n2 + Math.imul(k, fe) | 0, i2 = (i2 = i2 + Math.imul(k, ce) | 0) + Math.imul(N, fe) | 0, o2 = o2 + Math.imul(N, ce) | 0;
            var Pe = (l2 + (n2 = n2 + Math.imul(A2, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(A2, ve) | 0) + Math.imul(E, pe) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(E, ve) | 0) + (i2 >>> 13) | 0) + (Pe >>> 26) | 0, Pe &= 67108863, n2 = Math.imul(U, re), i2 = (i2 = Math.imul(U, ne)) + Math.imul(F, re) | 0, o2 = Math.imul(F, ne), n2 = n2 + Math.imul(L, oe) | 0, i2 = (i2 = i2 + Math.imul(L, se) | 0) + Math.imul(D, oe) | 0, o2 = o2 + Math.imul(D, se) | 0, n2 = n2 + Math.imul(R, ue) | 0, i2 = (i2 = i2 + Math.imul(R, le) | 0) + Math.imul(O, ue) | 0, o2 = o2 + Math.imul(O, le) | 0, n2 = n2 + Math.imul(P, fe) | 0, i2 = (i2 = i2 + Math.imul(P, ce) | 0) + Math.imul(I, fe) | 0, o2 = o2 + Math.imul(I, ce) | 0;
            var Ie = (l2 + (n2 = n2 + Math.imul(k, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(k, ve) | 0) + Math.imul(N, pe) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(N, ve) | 0) + (i2 >>> 13) | 0) + (Ie >>> 26) | 0, Ie &= 67108863, n2 = Math.imul(U, oe), i2 = (i2 = Math.imul(U, se)) + Math.imul(F, oe) | 0, o2 = Math.imul(F, se), n2 = n2 + Math.imul(L, ue) | 0, i2 = (i2 = i2 + Math.imul(L, le) | 0) + Math.imul(D, ue) | 0, o2 = o2 + Math.imul(D, le) | 0, n2 = n2 + Math.imul(R, fe) | 0, i2 = (i2 = i2 + Math.imul(R, ce) | 0) + Math.imul(O, fe) | 0, o2 = o2 + Math.imul(O, ce) | 0;
            var Te = (l2 + (n2 = n2 + Math.imul(P, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(P, ve) | 0) + Math.imul(I, pe) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(I, ve) | 0) + (i2 >>> 13) | 0) + (Te >>> 26) | 0, Te &= 67108863, n2 = Math.imul(U, ue), i2 = (i2 = Math.imul(U, le)) + Math.imul(F, ue) | 0, o2 = Math.imul(F, le), n2 = n2 + Math.imul(L, fe) | 0, i2 = (i2 = i2 + Math.imul(L, ce) | 0) + Math.imul(D, fe) | 0, o2 = o2 + Math.imul(D, ce) | 0;
            var Re = (l2 + (n2 = n2 + Math.imul(R, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(R, ve) | 0) + Math.imul(O, pe) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(O, ve) | 0) + (i2 >>> 13) | 0) + (Re >>> 26) | 0, Re &= 67108863, n2 = Math.imul(U, fe), i2 = (i2 = Math.imul(U, ce)) + Math.imul(F, fe) | 0, o2 = Math.imul(F, ce);
            var Oe = (l2 + (n2 = n2 + Math.imul(L, pe) | 0) | 0) + ((8191 & (i2 = (i2 = i2 + Math.imul(L, ve) | 0) + Math.imul(D, pe) | 0)) << 13) | 0;
            l2 = ((o2 = o2 + Math.imul(D, ve) | 0) + (i2 >>> 13) | 0) + (Oe >>> 26) | 0, Oe &= 67108863;
            var Ce = (l2 + (n2 = Math.imul(U, pe)) | 0) + ((8191 & (i2 = (i2 = Math.imul(U, ve)) + Math.imul(F, pe) | 0)) << 13) | 0;
            return l2 = ((o2 = Math.imul(F, ve)) + (i2 >>> 13) | 0) + (Ce >>> 26) | 0, Ce &= 67108863, u2[0] = ye, u2[1] = me, u2[2] = ge, u2[3] = be, u2[4] = we, u2[5] = _e, u2[6] = Me, u2[7] = Ae, u2[8] = Ee, u2[9] = Se, u2[10] = ke, u2[11] = Ne, u2[12] = xe, u2[13] = Pe, u2[14] = Ie, u2[15] = Te, u2[16] = Re, u2[17] = Oe, u2[18] = Ce, l2 !== 0 && (u2[19] = l2, r2.length++), r2;
          };
          function a(e3, t3, r2) {
            return new u().mulp(e3, t3, r2);
          }
          function u(e3, t3) {
            this.x = e3, this.y = t3;
          }
          Math.imul || (o = i), m.prototype.mulTo = function(e3, t3) {
            var r2 = this.length + e3.length;
            return this.length === 10 && e3.length === 10 ? o(this, e3, t3) : r2 < 63 ? i(this, e3, t3) : r2 < 1024 ? function(e4, t4, r3) {
              r3.negative = t4.negative ^ e4.negative, r3.length = e4.length + t4.length;
              for (var n2 = 0, i2 = 0, o2 = 0; o2 < r3.length - 1; o2++) {
                var s2 = i2;
                i2 = 0;
                for (var a2 = 67108863 & n2, u2 = Math.min(o2, t4.length - 1), l2 = Math.max(0, o2 - e4.length + 1); l2 <= u2; l2++) {
                  var h2 = o2 - l2, f3 = (0 | e4.words[h2]) * (0 | t4.words[l2]), c2 = 67108863 & f3;
                  a2 = 67108863 & (c2 = c2 + a2 | 0), i2 += (s2 = (s2 = s2 + (f3 / 67108864 | 0) | 0) + (c2 >>> 26) | 0) >>> 26, s2 &= 67108863;
                }
                r3.words[o2] = a2, n2 = s2, s2 = i2;
              }
              return n2 !== 0 ? r3.words[o2] = n2 : r3.length--, r3.strip();
            }(this, e3, t3) : a(this, e3, t3);
          }, u.prototype.makeRBT = function(e3) {
            for (var t3 = new Array(e3), r2 = m.prototype._countBits(e3) - 1, n2 = 0; n2 < e3; n2++)
              t3[n2] = this.revBin(n2, r2, e3);
            return t3;
          }, u.prototype.revBin = function(e3, t3, r2) {
            if (e3 === 0 || e3 === r2 - 1)
              return e3;
            for (var n2 = 0, i2 = 0; i2 < t3; i2++)
              n2 |= (1 & e3) << t3 - i2 - 1, e3 >>= 1;
            return n2;
          }, u.prototype.permute = function(e3, t3, r2, n2, i2, o2) {
            for (var s2 = 0; s2 < o2; s2++)
              n2[s2] = t3[e3[s2]], i2[s2] = r2[e3[s2]];
          }, u.prototype.transform = function(e3, t3, r2, n2, i2, o2) {
            this.permute(o2, e3, t3, r2, n2, i2);
            for (var s2 = 1; s2 < i2; s2 <<= 1)
              for (var a2 = s2 << 1, u2 = Math.cos(2 * Math.PI / a2), l2 = Math.sin(2 * Math.PI / a2), h2 = 0; h2 < i2; h2 += a2)
                for (var f3 = u2, c2 = l2, d2 = 0; d2 < s2; d2++) {
                  var p2 = r2[h2 + d2], v2 = n2[h2 + d2], y2 = r2[h2 + d2 + s2], m2 = n2[h2 + d2 + s2], g2 = f3 * y2 - c2 * m2;
                  m2 = f3 * m2 + c2 * y2, y2 = g2, r2[h2 + d2] = p2 + y2, n2[h2 + d2] = v2 + m2, r2[h2 + d2 + s2] = p2 - y2, n2[h2 + d2 + s2] = v2 - m2, d2 !== a2 && (g2 = u2 * f3 - l2 * c2, c2 = u2 * c2 + l2 * f3, f3 = g2);
                }
          }, u.prototype.guessLen13b = function(e3, t3) {
            var r2 = 1 | Math.max(t3, e3), n2 = 1 & r2, i2 = 0;
            for (r2 = r2 / 2 | 0; r2; r2 >>>= 1)
              i2++;
            return 1 << i2 + 1 + n2;
          }, u.prototype.conjugate = function(e3, t3, r2) {
            if (!(r2 <= 1))
              for (var n2 = 0; n2 < r2 / 2; n2++) {
                var i2 = e3[n2];
                e3[n2] = e3[r2 - n2 - 1], e3[r2 - n2 - 1] = i2, i2 = t3[n2], t3[n2] = -t3[r2 - n2 - 1], t3[r2 - n2 - 1] = -i2;
              }
          }, u.prototype.normalize13b = function(e3, t3) {
            for (var r2 = 0, n2 = 0; n2 < t3 / 2; n2++) {
              var i2 = 8192 * Math.round(e3[2 * n2 + 1] / t3) + Math.round(e3[2 * n2] / t3) + r2;
              e3[n2] = 67108863 & i2, r2 = i2 < 67108864 ? 0 : i2 / 67108864 | 0;
            }
            return e3;
          }, u.prototype.convert13b = function(e3, t3, r2, n2) {
            for (var i2 = 0, o2 = 0; o2 < t3; o2++)
              i2 += 0 | e3[o2], r2[2 * o2] = 8191 & i2, i2 >>>= 13, r2[2 * o2 + 1] = 8191 & i2, i2 >>>= 13;
            for (o2 = 2 * t3; o2 < n2; ++o2)
              r2[o2] = 0;
            y(i2 === 0), y((-8192 & i2) == 0);
          }, u.prototype.stub = function(e3) {
            for (var t3 = new Array(e3), r2 = 0; r2 < e3; r2++)
              t3[r2] = 0;
            return t3;
          }, u.prototype.mulp = function(e3, t3, r2) {
            var n2 = 2 * this.guessLen13b(e3.length, t3.length), i2 = this.makeRBT(n2), o2 = this.stub(n2), s2 = new Array(n2), a2 = new Array(n2), u2 = new Array(n2), l2 = new Array(n2), h2 = new Array(n2), f3 = new Array(n2), c2 = r2.words;
            c2.length = n2, this.convert13b(e3.words, e3.length, s2, n2), this.convert13b(t3.words, t3.length, l2, n2), this.transform(s2, o2, a2, u2, n2, i2), this.transform(l2, o2, h2, f3, n2, i2);
            for (var d2 = 0; d2 < n2; d2++) {
              var p2 = a2[d2] * h2[d2] - u2[d2] * f3[d2];
              u2[d2] = a2[d2] * f3[d2] + u2[d2] * h2[d2], a2[d2] = p2;
            }
            return this.conjugate(a2, u2, n2), this.transform(a2, u2, c2, o2, n2, i2), this.conjugate(c2, o2, n2), this.normalize13b(c2, n2), r2.negative = e3.negative ^ t3.negative, r2.length = e3.length + t3.length, r2.strip();
          }, m.prototype.mul = function(e3) {
            var t3 = new m(null);
            return t3.words = new Array(this.length + e3.length), this.mulTo(e3, t3);
          }, m.prototype.mulf = function(e3) {
            var t3 = new m(null);
            return t3.words = new Array(this.length + e3.length), a(this, e3, t3);
          }, m.prototype.imul = function(e3) {
            return this.clone().mulTo(e3, this);
          }, m.prototype.imuln = function(e3) {
            y(typeof e3 == "number"), y(e3 < 67108864);
            for (var t3 = 0, r2 = 0; r2 < this.length; r2++) {
              var n2 = (0 | this.words[r2]) * e3, i2 = (67108863 & n2) + (67108863 & t3);
              t3 >>= 26, t3 += n2 / 67108864 | 0, t3 += i2 >>> 26, this.words[r2] = 67108863 & i2;
            }
            return t3 !== 0 && (this.words[r2] = t3, this.length++), this;
          }, m.prototype.muln = function(e3) {
            return this.clone().imuln(e3);
          }, m.prototype.sqr = function() {
            return this.mul(this);
          }, m.prototype.isqr = function() {
            return this.imul(this.clone());
          }, m.prototype.pow = function(e3) {
            var t3 = function(e4) {
              for (var t4 = new Array(e4.bitLength()), r3 = 0; r3 < t4.length; r3++) {
                var n3 = r3 / 26 | 0, i3 = r3 % 26;
                t4[r3] = (e4.words[n3] & 1 << i3) >>> i3;
              }
              return t4;
            }(e3);
            if (t3.length === 0)
              return new m(1);
            for (var r2 = this, n2 = 0; n2 < t3.length && t3[n2] === 0; n2++, r2 = r2.sqr())
              ;
            if (++n2 < t3.length)
              for (var i2 = r2.sqr(); n2 < t3.length; n2++, i2 = i2.sqr())
                t3[n2] !== 0 && (r2 = r2.mul(i2));
            return r2;
          }, m.prototype.iushln = function(e3) {
            y(typeof e3 == "number" && 0 <= e3);
            var t3, r2 = e3 % 26, n2 = (e3 - r2) / 26, i2 = 67108863 >>> 26 - r2 << 26 - r2;
            if (r2 != 0) {
              var o2 = 0;
              for (t3 = 0; t3 < this.length; t3++) {
                var s2 = this.words[t3] & i2, a2 = (0 | this.words[t3]) - s2 << r2;
                this.words[t3] = a2 | o2, o2 = s2 >>> 26 - r2;
              }
              o2 && (this.words[t3] = o2, this.length++);
            }
            if (n2 != 0) {
              for (t3 = this.length - 1; 0 <= t3; t3--)
                this.words[t3 + n2] = this.words[t3];
              for (t3 = 0; t3 < n2; t3++)
                this.words[t3] = 0;
              this.length += n2;
            }
            return this.strip();
          }, m.prototype.ishln = function(e3) {
            return y(this.negative === 0), this.iushln(e3);
          }, m.prototype.iushrn = function(e3, t3, r2) {
            var n2;
            y(typeof e3 == "number" && 0 <= e3), n2 = t3 ? (t3 - t3 % 26) / 26 : 0;
            var i2 = e3 % 26, o2 = Math.min((e3 - i2) / 26, this.length), s2 = 67108863 ^ 67108863 >>> i2 << i2, a2 = r2;
            if (n2 -= o2, n2 = Math.max(0, n2), a2) {
              for (var u2 = 0; u2 < o2; u2++)
                a2.words[u2] = this.words[u2];
              a2.length = o2;
            }
            if (o2 === 0)
              ;
            else if (this.length > o2)
              for (this.length -= o2, u2 = 0; u2 < this.length; u2++)
                this.words[u2] = this.words[u2 + o2];
            else
              this.words[0] = 0, this.length = 1;
            var l2 = 0;
            for (u2 = this.length - 1; 0 <= u2 && (l2 !== 0 || n2 <= u2); u2--) {
              var h2 = 0 | this.words[u2];
              this.words[u2] = l2 << 26 - i2 | h2 >>> i2, l2 = h2 & s2;
            }
            return a2 && l2 !== 0 && (a2.words[a2.length++] = l2), this.length === 0 && (this.words[0] = 0, this.length = 1), this.strip();
          }, m.prototype.ishrn = function(e3, t3, r2) {
            return y(this.negative === 0), this.iushrn(e3, t3, r2);
          }, m.prototype.shln = function(e3) {
            return this.clone().ishln(e3);
          }, m.prototype.ushln = function(e3) {
            return this.clone().iushln(e3);
          }, m.prototype.shrn = function(e3) {
            return this.clone().ishrn(e3);
          }, m.prototype.ushrn = function(e3) {
            return this.clone().iushrn(e3);
          }, m.prototype.testn = function(e3) {
            y(typeof e3 == "number" && 0 <= e3);
            var t3 = e3 % 26, r2 = (e3 - t3) / 26, n2 = 1 << t3;
            return !(this.length <= r2) && !!(this.words[r2] & n2);
          }, m.prototype.imaskn = function(e3) {
            y(typeof e3 == "number" && 0 <= e3);
            var t3 = e3 % 26, r2 = (e3 - t3) / 26;
            if (y(this.negative === 0, "imaskn works only with positive numbers"), this.length <= r2)
              return this;
            if (t3 != 0 && r2++, this.length = Math.min(r2, this.length), t3 != 0) {
              var n2 = 67108863 ^ 67108863 >>> t3 << t3;
              this.words[this.length - 1] &= n2;
            }
            return this.strip();
          }, m.prototype.maskn = function(e3) {
            return this.clone().imaskn(e3);
          }, m.prototype.iaddn = function(e3) {
            return y(typeof e3 == "number"), y(e3 < 67108864), e3 < 0 ? this.isubn(-e3) : this.negative !== 0 ? (this.length === 1 && (0 | this.words[0]) < e3 ? (this.words[0] = e3 - (0 | this.words[0]), this.negative = 0) : (this.negative = 0, this.isubn(e3), this.negative = 1), this) : this._iaddn(e3);
          }, m.prototype._iaddn = function(e3) {
            this.words[0] += e3;
            for (var t3 = 0; t3 < this.length && 67108864 <= this.words[t3]; t3++)
              this.words[t3] -= 67108864, t3 === this.length - 1 ? this.words[t3 + 1] = 1 : this.words[t3 + 1]++;
            return this.length = Math.max(this.length, t3 + 1), this;
          }, m.prototype.isubn = function(e3) {
            if (y(typeof e3 == "number"), y(e3 < 67108864), e3 < 0)
              return this.iaddn(-e3);
            if (this.negative !== 0)
              return this.negative = 0, this.iaddn(e3), this.negative = 1, this;
            if (this.words[0] -= e3, this.length === 1 && this.words[0] < 0)
              this.words[0] = -this.words[0], this.negative = 1;
            else
              for (var t3 = 0; t3 < this.length && this.words[t3] < 0; t3++)
                this.words[t3] += 67108864, this.words[t3 + 1] -= 1;
            return this.strip();
          }, m.prototype.addn = function(e3) {
            return this.clone().iaddn(e3);
          }, m.prototype.subn = function(e3) {
            return this.clone().isubn(e3);
          }, m.prototype.iabs = function() {
            return this.negative = 0, this;
          }, m.prototype.abs = function() {
            return this.clone().iabs();
          }, m.prototype._ishlnsubmul = function(e3, t3, r2) {
            var n2, i2, o2 = e3.length + r2;
            this._expand(o2);
            var s2 = 0;
            for (n2 = 0; n2 < e3.length; n2++) {
              i2 = (0 | this.words[n2 + r2]) + s2;
              var a2 = (0 | e3.words[n2]) * t3;
              s2 = ((i2 -= 67108863 & a2) >> 26) - (a2 / 67108864 | 0), this.words[n2 + r2] = 67108863 & i2;
            }
            for (; n2 < this.length - r2; n2++)
              s2 = (i2 = (0 | this.words[n2 + r2]) + s2) >> 26, this.words[n2 + r2] = 67108863 & i2;
            if (s2 === 0)
              return this.strip();
            for (y(s2 === -1), n2 = s2 = 0; n2 < this.length; n2++)
              s2 = (i2 = -(0 | this.words[n2]) + s2) >> 26, this.words[n2] = 67108863 & i2;
            return this.negative = 1, this.strip();
          }, m.prototype._wordDiv = function(e3, t3) {
            var r2 = (this.length, e3.length), n2 = this.clone(), i2 = e3, o2 = 0 | i2.words[i2.length - 1];
            (r2 = 26 - this._countBits(o2)) != 0 && (i2 = i2.ushln(r2), n2.iushln(r2), o2 = 0 | i2.words[i2.length - 1]);
            var s2, a2 = n2.length - i2.length;
            if (t3 !== "mod") {
              (s2 = new m(null)).length = 1 + a2, s2.words = new Array(s2.length);
              for (var u2 = 0; u2 < s2.length; u2++)
                s2.words[u2] = 0;
            }
            var l2 = n2.clone()._ishlnsubmul(i2, 1, a2);
            l2.negative === 0 && (n2 = l2, s2 && (s2.words[a2] = 1));
            for (var h2 = a2 - 1; 0 <= h2; h2--) {
              var f3 = 67108864 * (0 | n2.words[i2.length + h2]) + (0 | n2.words[i2.length + h2 - 1]);
              for (f3 = Math.min(f3 / o2 | 0, 67108863), n2._ishlnsubmul(i2, f3, h2); n2.negative !== 0; )
                f3--, n2.negative = 0, n2._ishlnsubmul(i2, 1, h2), n2.isZero() || (n2.negative ^= 1);
              s2 && (s2.words[h2] = f3);
            }
            return s2 && s2.strip(), n2.strip(), t3 !== "div" && r2 != 0 && n2.iushrn(r2), { div: s2 || null, mod: n2 };
          }, m.prototype.divmod = function(e3, t3, r2) {
            return y(!e3.isZero()), this.isZero() ? { div: new m(0), mod: new m(0) } : this.negative !== 0 && e3.negative === 0 ? (o2 = this.neg().divmod(e3, t3), t3 !== "mod" && (n2 = o2.div.neg()), t3 !== "div" && (i2 = o2.mod.neg(), r2 && i2.negative !== 0 && i2.iadd(e3)), { div: n2, mod: i2 }) : this.negative === 0 && e3.negative !== 0 ? (o2 = this.divmod(e3.neg(), t3), t3 !== "mod" && (n2 = o2.div.neg()), { div: n2, mod: o2.mod }) : (this.negative & e3.negative) != 0 ? (o2 = this.neg().divmod(e3.neg(), t3), t3 !== "div" && (i2 = o2.mod.neg(), r2 && i2.negative !== 0 && i2.isub(e3)), { div: o2.div, mod: i2 }) : e3.length > this.length || this.cmp(e3) < 0 ? { div: new m(0), mod: this } : e3.length === 1 ? t3 === "div" ? { div: this.divn(e3.words[0]), mod: null } : t3 === "mod" ? { div: null, mod: new m(this.modn(e3.words[0])) } : { div: this.divn(e3.words[0]), mod: new m(this.modn(e3.words[0])) } : this._wordDiv(e3, t3);
            var n2, i2, o2;
          }, m.prototype.div = function(e3) {
            return this.divmod(e3, "div", false).div;
          }, m.prototype.mod = function(e3) {
            return this.divmod(e3, "mod", false).mod;
          }, m.prototype.umod = function(e3) {
            return this.divmod(e3, "mod", true).mod;
          }, m.prototype.divRound = function(e3) {
            var t3 = this.divmod(e3);
            if (t3.mod.isZero())
              return t3.div;
            var r2 = t3.div.negative !== 0 ? t3.mod.isub(e3) : t3.mod, n2 = e3.ushrn(1), i2 = e3.andln(1), o2 = r2.cmp(n2);
            return o2 < 0 || i2 === 1 && o2 === 0 ? t3.div : t3.div.negative !== 0 ? t3.div.isubn(1) : t3.div.iaddn(1);
          }, m.prototype.modn = function(e3) {
            y(e3 <= 67108863);
            for (var t3 = (1 << 26) % e3, r2 = 0, n2 = this.length - 1; 0 <= n2; n2--)
              r2 = (t3 * r2 + (0 | this.words[n2])) % e3;
            return r2;
          }, m.prototype.idivn = function(e3) {
            y(e3 <= 67108863);
            for (var t3 = 0, r2 = this.length - 1; 0 <= r2; r2--) {
              var n2 = (0 | this.words[r2]) + 67108864 * t3;
              this.words[r2] = n2 / e3 | 0, t3 = n2 % e3;
            }
            return this.strip();
          }, m.prototype.divn = function(e3) {
            return this.clone().idivn(e3);
          }, m.prototype.egcd = function(e3) {
            y(e3.negative === 0), y(!e3.isZero());
            var t3 = this, r2 = e3.clone();
            t3 = t3.negative !== 0 ? t3.umod(e3) : t3.clone();
            for (var n2 = new m(1), i2 = new m(0), o2 = new m(0), s2 = new m(1), a2 = 0; t3.isEven() && r2.isEven(); )
              t3.iushrn(1), r2.iushrn(1), ++a2;
            for (var u2 = r2.clone(), l2 = t3.clone(); !t3.isZero(); ) {
              for (var h2 = 0, f3 = 1; (t3.words[0] & f3) == 0 && h2 < 26; ++h2, f3 <<= 1)
                ;
              if (0 < h2)
                for (t3.iushrn(h2); 0 < h2--; )
                  (n2.isOdd() || i2.isOdd()) && (n2.iadd(u2), i2.isub(l2)), n2.iushrn(1), i2.iushrn(1);
              for (var c2 = 0, d2 = 1; (r2.words[0] & d2) == 0 && c2 < 26; ++c2, d2 <<= 1)
                ;
              if (0 < c2)
                for (r2.iushrn(c2); 0 < c2--; )
                  (o2.isOdd() || s2.isOdd()) && (o2.iadd(u2), s2.isub(l2)), o2.iushrn(1), s2.iushrn(1);
              0 <= t3.cmp(r2) ? (t3.isub(r2), n2.isub(o2), i2.isub(s2)) : (r2.isub(t3), o2.isub(n2), s2.isub(i2));
            }
            return { a: o2, b: s2, gcd: r2.iushln(a2) };
          }, m.prototype._invmp = function(e3) {
            y(e3.negative === 0), y(!e3.isZero());
            var t3 = this, r2 = e3.clone();
            t3 = t3.negative !== 0 ? t3.umod(e3) : t3.clone();
            for (var n2, i2 = new m(1), o2 = new m(0), s2 = r2.clone(); 0 < t3.cmpn(1) && 0 < r2.cmpn(1); ) {
              for (var a2 = 0, u2 = 1; (t3.words[0] & u2) == 0 && a2 < 26; ++a2, u2 <<= 1)
                ;
              if (0 < a2)
                for (t3.iushrn(a2); 0 < a2--; )
                  i2.isOdd() && i2.iadd(s2), i2.iushrn(1);
              for (var l2 = 0, h2 = 1; (r2.words[0] & h2) == 0 && l2 < 26; ++l2, h2 <<= 1)
                ;
              if (0 < l2)
                for (r2.iushrn(l2); 0 < l2--; )
                  o2.isOdd() && o2.iadd(s2), o2.iushrn(1);
              0 <= t3.cmp(r2) ? (t3.isub(r2), i2.isub(o2)) : (r2.isub(t3), o2.isub(i2));
            }
            return (n2 = t3.cmpn(1) === 0 ? i2 : o2).cmpn(0) < 0 && n2.iadd(e3), n2;
          }, m.prototype.gcd = function(e3) {
            if (this.isZero())
              return e3.abs();
            if (e3.isZero())
              return this.abs();
            var t3 = this.clone(), r2 = e3.clone();
            t3.negative = 0;
            for (var n2 = r2.negative = 0; t3.isEven() && r2.isEven(); n2++)
              t3.iushrn(1), r2.iushrn(1);
            for (; ; ) {
              for (; t3.isEven(); )
                t3.iushrn(1);
              for (; r2.isEven(); )
                r2.iushrn(1);
              var i2 = t3.cmp(r2);
              if (i2 < 0) {
                var o2 = t3;
                t3 = r2, r2 = o2;
              } else if (i2 === 0 || r2.cmpn(1) === 0)
                break;
              t3.isub(r2);
            }
            return r2.iushln(n2);
          }, m.prototype.invm = function(e3) {
            return this.egcd(e3).a.umod(e3);
          }, m.prototype.isEven = function() {
            return (1 & this.words[0]) == 0;
          }, m.prototype.isOdd = function() {
            return (1 & this.words[0]) == 1;
          }, m.prototype.andln = function(e3) {
            return this.words[0] & e3;
          }, m.prototype.bincn = function(e3) {
            y(typeof e3 == "number");
            var t3 = e3 % 26, r2 = (e3 - t3) / 26, n2 = 1 << t3;
            if (this.length <= r2)
              return this._expand(1 + r2), this.words[r2] |= n2, this;
            for (var i2 = n2, o2 = r2; i2 !== 0 && o2 < this.length; o2++) {
              var s2 = 0 | this.words[o2];
              i2 = (s2 += i2) >>> 26, s2 &= 67108863, this.words[o2] = s2;
            }
            return i2 !== 0 && (this.words[o2] = i2, this.length++), this;
          }, m.prototype.isZero = function() {
            return this.length === 1 && this.words[0] === 0;
          }, m.prototype.cmpn = function(e3) {
            var t3, r2 = e3 < 0;
            if (this.negative !== 0 && !r2)
              return -1;
            if (this.negative === 0 && r2)
              return 1;
            if (this.strip(), 1 < this.length)
              t3 = 1;
            else {
              r2 && (e3 = -e3), y(e3 <= 67108863, "Number is too big");
              var n2 = 0 | this.words[0];
              t3 = n2 === e3 ? 0 : n2 < e3 ? -1 : 1;
            }
            return this.negative !== 0 ? 0 | -t3 : t3;
          }, m.prototype.cmp = function(e3) {
            if (this.negative !== 0 && e3.negative === 0)
              return -1;
            if (this.negative === 0 && e3.negative !== 0)
              return 1;
            var t3 = this.ucmp(e3);
            return this.negative !== 0 ? 0 | -t3 : t3;
          }, m.prototype.ucmp = function(e3) {
            if (this.length > e3.length)
              return 1;
            if (this.length < e3.length)
              return -1;
            for (var t3 = 0, r2 = this.length - 1; 0 <= r2; r2--) {
              var n2 = 0 | this.words[r2], i2 = 0 | e3.words[r2];
              if (n2 != i2) {
                n2 < i2 ? t3 = -1 : i2 < n2 && (t3 = 1);
                break;
              }
            }
            return t3;
          }, m.prototype.gtn = function(e3) {
            return this.cmpn(e3) === 1;
          }, m.prototype.gt = function(e3) {
            return this.cmp(e3) === 1;
          }, m.prototype.gten = function(e3) {
            return 0 <= this.cmpn(e3);
          }, m.prototype.gte = function(e3) {
            return 0 <= this.cmp(e3);
          }, m.prototype.ltn = function(e3) {
            return this.cmpn(e3) === -1;
          }, m.prototype.lt = function(e3) {
            return this.cmp(e3) === -1;
          }, m.prototype.lten = function(e3) {
            return this.cmpn(e3) <= 0;
          }, m.prototype.lte = function(e3) {
            return this.cmp(e3) <= 0;
          }, m.prototype.eqn = function(e3) {
            return this.cmpn(e3) === 0;
          }, m.prototype.eq = function(e3) {
            return this.cmp(e3) === 0;
          }, m.red = function(e3) {
            return new _(e3);
          }, m.prototype.toRed = function(e3) {
            return y(!this.red, "Already a number in reduction context"), y(this.negative === 0, "red works only with positives"), e3.convertTo(this)._forceRed(e3);
          }, m.prototype.fromRed = function() {
            return y(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
          }, m.prototype._forceRed = function(e3) {
            return this.red = e3, this;
          }, m.prototype.forceRed = function(e3) {
            return y(!this.red, "Already a number in reduction context"), this._forceRed(e3);
          }, m.prototype.redAdd = function(e3) {
            return y(this.red, "redAdd works only with red numbers"), this.red.add(this, e3);
          }, m.prototype.redIAdd = function(e3) {
            return y(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, e3);
          }, m.prototype.redSub = function(e3) {
            return y(this.red, "redSub works only with red numbers"), this.red.sub(this, e3);
          }, m.prototype.redISub = function(e3) {
            return y(this.red, "redISub works only with red numbers"), this.red.isub(this, e3);
          }, m.prototype.redShl = function(e3) {
            return y(this.red, "redShl works only with red numbers"), this.red.shl(this, e3);
          }, m.prototype.redMul = function(e3) {
            return y(this.red, "redMul works only with red numbers"), this.red._verify2(this, e3), this.red.mul(this, e3);
          }, m.prototype.redIMul = function(e3) {
            return y(this.red, "redMul works only with red numbers"), this.red._verify2(this, e3), this.red.imul(this, e3);
          }, m.prototype.redSqr = function() {
            return y(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
          }, m.prototype.redISqr = function() {
            return y(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
          }, m.prototype.redSqrt = function() {
            return y(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
          }, m.prototype.redInvm = function() {
            return y(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
          }, m.prototype.redNeg = function() {
            return y(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
          }, m.prototype.redPow = function(e3) {
            return y(this.red && !e3.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, e3);
          };
          var l = { k256: null, p224: null, p192: null, p25519: null };
          function h(e3, t3) {
            this.name = e3, this.p = new m(t3, 16), this.n = this.p.bitLength(), this.k = new m(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
          }
          function v() {
            h.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
          }
          function g() {
            h.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
          }
          function b() {
            h.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
          }
          function w() {
            h.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
          }
          function _(e3) {
            if (typeof e3 == "string") {
              var t3 = m._prime(e3);
              this.m = t3.p, this.prime = t3;
            } else
              y(e3.gtn(1), "modulus must be greater than 1"), this.m = e3, this.prime = null;
          }
          function M(e3) {
            _.call(this, e3), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new m(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
          }
          h.prototype._tmp = function() {
            var e3 = new m(null);
            return e3.words = new Array(Math.ceil(this.n / 13)), e3;
          }, h.prototype.ireduce = function(e3) {
            for (var t3, r2 = e3; this.split(r2, this.tmp), (t3 = (r2 = (r2 = this.imulK(r2)).iadd(this.tmp)).bitLength()) > this.n; )
              ;
            var n2 = t3 < this.n ? -1 : r2.ucmp(this.p);
            return n2 === 0 ? (r2.words[0] = 0, r2.length = 1) : 0 < n2 ? r2.isub(this.p) : r2.strip(), r2;
          }, h.prototype.split = function(e3, t3) {
            e3.iushrn(this.n, 0, t3);
          }, h.prototype.imulK = function(e3) {
            return e3.imul(this.k);
          }, r(v, h), v.prototype.split = function(e3, t3) {
            for (var r2 = Math.min(e3.length, 9), n2 = 0; n2 < r2; n2++)
              t3.words[n2] = e3.words[n2];
            if (t3.length = r2, e3.length <= 9)
              return e3.words[0] = 0, void (e3.length = 1);
            var i2 = e3.words[9];
            for (t3.words[t3.length++] = 4194303 & i2, n2 = 10; n2 < e3.length; n2++) {
              var o2 = 0 | e3.words[n2];
              e3.words[n2 - 10] = (4194303 & o2) << 4 | i2 >>> 22, i2 = o2;
            }
            i2 >>>= 22, (e3.words[n2 - 10] = i2) === 0 && 10 < e3.length ? e3.length -= 10 : e3.length -= 9;
          }, v.prototype.imulK = function(e3) {
            e3.words[e3.length] = 0, e3.words[e3.length + 1] = 0, e3.length += 2;
            for (var t3 = 0, r2 = 0; r2 < e3.length; r2++) {
              var n2 = 0 | e3.words[r2];
              t3 += 977 * n2, e3.words[r2] = 67108863 & t3, t3 = 64 * n2 + (t3 / 67108864 | 0);
            }
            return e3.words[e3.length - 1] === 0 && (e3.length--, e3.words[e3.length - 1] === 0 && e3.length--), e3;
          }, r(g, h), r(b, h), r(w, h), w.prototype.imulK = function(e3) {
            for (var t3 = 0, r2 = 0; r2 < e3.length; r2++) {
              var n2 = 19 * (0 | e3.words[r2]) + t3, i2 = 67108863 & n2;
              n2 >>>= 26, e3.words[r2] = i2, t3 = n2;
            }
            return t3 !== 0 && (e3.words[e3.length++] = t3), e3;
          }, m._prime = function(e3) {
            if (l[e3])
              return l[e3];
            var t3;
            if (e3 === "k256")
              t3 = new v();
            else if (e3 === "p224")
              t3 = new g();
            else if (e3 === "p192")
              t3 = new b();
            else {
              if (e3 !== "p25519")
                throw new Error("Unknown prime " + e3);
              t3 = new w();
            }
            return l[e3] = t3;
          }, _.prototype._verify1 = function(e3) {
            y(e3.negative === 0, "red works only with positives"), y(e3.red, "red works only with red numbers");
          }, _.prototype._verify2 = function(e3, t3) {
            y((e3.negative | t3.negative) == 0, "red works only with positives"), y(e3.red && e3.red === t3.red, "red works only with red numbers");
          }, _.prototype.imod = function(e3) {
            return this.prime ? this.prime.ireduce(e3)._forceRed(this) : e3.umod(this.m)._forceRed(this);
          }, _.prototype.neg = function(e3) {
            return e3.isZero() ? e3.clone() : this.m.sub(e3)._forceRed(this);
          }, _.prototype.add = function(e3, t3) {
            this._verify2(e3, t3);
            var r2 = e3.add(t3);
            return 0 <= r2.cmp(this.m) && r2.isub(this.m), r2._forceRed(this);
          }, _.prototype.iadd = function(e3, t3) {
            this._verify2(e3, t3);
            var r2 = e3.iadd(t3);
            return 0 <= r2.cmp(this.m) && r2.isub(this.m), r2;
          }, _.prototype.sub = function(e3, t3) {
            this._verify2(e3, t3);
            var r2 = e3.sub(t3);
            return r2.cmpn(0) < 0 && r2.iadd(this.m), r2._forceRed(this);
          }, _.prototype.isub = function(e3, t3) {
            this._verify2(e3, t3);
            var r2 = e3.isub(t3);
            return r2.cmpn(0) < 0 && r2.iadd(this.m), r2;
          }, _.prototype.shl = function(e3, t3) {
            return this._verify1(e3), this.imod(e3.ushln(t3));
          }, _.prototype.imul = function(e3, t3) {
            return this._verify2(e3, t3), this.imod(e3.imul(t3));
          }, _.prototype.mul = function(e3, t3) {
            return this._verify2(e3, t3), this.imod(e3.mul(t3));
          }, _.prototype.isqr = function(e3) {
            return this.imul(e3, e3.clone());
          }, _.prototype.sqr = function(e3) {
            return this.mul(e3, e3);
          }, _.prototype.sqrt = function(e3) {
            if (e3.isZero())
              return e3.clone();
            var t3 = this.m.andln(3);
            if (y(t3 % 2 == 1), t3 === 3) {
              var r2 = this.m.add(new m(1)).iushrn(2);
              return this.pow(e3, r2);
            }
            for (var n2 = this.m.subn(1), i2 = 0; !n2.isZero() && n2.andln(1) === 0; )
              i2++, n2.iushrn(1);
            y(!n2.isZero());
            var o2 = new m(1).toRed(this), s2 = o2.redNeg(), a2 = this.m.subn(1).iushrn(1), u2 = this.m.bitLength();
            for (u2 = new m(2 * u2 * u2).toRed(this); this.pow(u2, a2).cmp(s2) !== 0; )
              u2.redIAdd(s2);
            for (var l2 = this.pow(u2, n2), h2 = this.pow(e3, n2.addn(1).iushrn(1)), f3 = this.pow(e3, n2), c2 = i2; f3.cmp(o2) !== 0; ) {
              for (var d2 = f3, p2 = 0; d2.cmp(o2) !== 0; p2++)
                d2 = d2.redSqr();
              y(p2 < c2);
              var v2 = this.pow(l2, new m(1).iushln(c2 - p2 - 1));
              h2 = h2.redMul(v2), l2 = v2.redSqr(), f3 = f3.redMul(l2), c2 = p2;
            }
            return h2;
          }, _.prototype.invm = function(e3) {
            var t3 = e3._invmp(this.m);
            return t3.negative !== 0 ? (t3.negative = 0, this.imod(t3).redNeg()) : this.imod(t3);
          }, _.prototype.pow = function(e3, t3) {
            if (t3.isZero())
              return new m(1).toRed(this);
            if (t3.cmpn(1) === 0)
              return e3.clone();
            var r2 = new Array(16);
            r2[0] = new m(1).toRed(this), r2[1] = e3;
            for (var n2 = 2; n2 < r2.length; n2++)
              r2[n2] = this.mul(r2[n2 - 1], e3);
            var i2 = r2[0], o2 = 0, s2 = 0, a2 = t3.bitLength() % 26;
            for (a2 === 0 && (a2 = 26), n2 = t3.length - 1; 0 <= n2; n2--) {
              for (var u2 = t3.words[n2], l2 = a2 - 1; 0 <= l2; l2--) {
                var h2 = u2 >> l2 & 1;
                i2 !== r2[0] && (i2 = this.sqr(i2)), h2 != 0 || o2 !== 0 ? (o2 <<= 1, o2 |= h2, (++s2 === 4 || n2 === 0 && l2 === 0) && (i2 = this.mul(i2, r2[o2]), o2 = s2 = 0)) : s2 = 0;
              }
              a2 = 26;
            }
            return i2;
          }, _.prototype.convertTo = function(e3) {
            var t3 = e3.umod(this.m);
            return t3 === e3 ? t3.clone() : t3;
          }, _.prototype.convertFrom = function(e3) {
            var t3 = e3.clone();
            return t3.red = null, t3;
          }, m.mont = function(e3) {
            return new M(e3);
          }, r(M, _), M.prototype.convertTo = function(e3) {
            return this.imod(e3.ushln(this.shift));
          }, M.prototype.convertFrom = function(e3) {
            var t3 = this.imod(e3.mul(this.rinv));
            return t3.red = null, t3;
          }, M.prototype.imul = function(e3, t3) {
            if (e3.isZero() || t3.isZero())
              return e3.words[0] = 0, e3.length = 1, e3;
            var r2 = e3.imul(t3), n2 = r2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i2 = r2.isub(n2).iushrn(this.shift), o2 = i2;
            return 0 <= i2.cmp(this.m) ? o2 = i2.isub(this.m) : i2.cmpn(0) < 0 && (o2 = i2.iadd(this.m)), o2._forceRed(this);
          }, M.prototype.mul = function(e3, t3) {
            if (e3.isZero() || t3.isZero())
              return new m(0)._forceRed(this);
            var r2 = e3.mul(t3), n2 = r2.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), i2 = r2.isub(n2).iushrn(this.shift), o2 = i2;
            return 0 <= i2.cmp(this.m) ? o2 = i2.isub(this.m) : i2.cmpn(0) < 0 && (o2 = i2.iadd(this.m)), o2._forceRed(this);
          }, M.prototype.invm = function(e3) {
            return this.imod(e3._invmp(this.m).mul(this.r2))._forceRed(this);
          };
        }(e === void 0 || e, this);
      }, { buffer: 11 }], 10: [function(e, t, r) {
        (function(r2) {
          t.exports = function(e2) {
            var t2 = new Uint8Array(e2);
            return (r2.crypto || r2.msCrypto).getRandomValues(t2), t2;
          };
        }).call(this, typeof global != "undefined" ? global : typeof self != "undefined" ? self : typeof window != "undefined" ? window : {});
      }, {}], 11: [function(e, t, r) {
      }, {}], 12: [function(e, t, r) {
        "use strict";
        var n = r;
        n.version = e("../package.json").version, n.utils = e("./elliptic/utils"), n.rand = e("brorand"), n.curve = e("./elliptic/curve"), n.curves = e("./elliptic/curves"), n.ec = e("./elliptic/ec"), n.eddsa = e("./elliptic/eddsa");
      }, { "../package.json": 25, "./elliptic/curve": 15, "./elliptic/curves": 18, "./elliptic/ec": 19, "./elliptic/eddsa": 22, "./elliptic/utils": 24, brorand: 10 }], 13: [function(e, t, r) {
        "use strict";
        var n = e("bn.js"), i = e("../utils"), S = i.getNAF, k = i.getJSF, f2 = i.assert;
        function o(e2, t2) {
          this.type = e2, this.p = new n(t2.p, 16), this.red = t2.prime ? n.red(t2.prime) : n.mont(this.p), this.zero = new n(0).toRed(this.red), this.one = new n(1).toRed(this.red), this.two = new n(2).toRed(this.red), this.n = t2.n && new n(t2.n, 16), this.g = t2.g && this.pointFromJSON(t2.g, t2.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
          var r2 = this.n && this.p.div(this.n);
          !r2 || 0 < r2.cmpn(100) ? this.redN = null : (this._maxwellTrick = true, this.redN = this.n.toRed(this.red));
        }
        function s(e2, t2) {
          this.curve = e2, this.type = t2, this.precomputed = null;
        }
        (t.exports = o).prototype.point = function() {
          throw new Error("Not implemented");
        }, o.prototype.validate = function() {
          throw new Error("Not implemented");
        }, o.prototype._fixedNafMul = function(e2, t2) {
          f2(e2.precomputed);
          var r2 = e2._getDoubles(), n2 = S(t2, 1, this._bitLength), i2 = (1 << r2.step + 1) - (r2.step % 2 == 0 ? 2 : 1);
          i2 /= 3;
          for (var o2 = [], s2 = 0; s2 < n2.length; s2 += r2.step) {
            var a = 0;
            for (t2 = s2 + r2.step - 1; s2 <= t2; t2--)
              a = (a << 1) + n2[t2];
            o2.push(a);
          }
          for (var u = this.jpoint(null, null, null), l = this.jpoint(null, null, null), h = i2; 0 < h; h--) {
            for (s2 = 0; s2 < o2.length; s2++) {
              (a = o2[s2]) === h ? l = l.mixedAdd(r2.points[s2]) : a === -h && (l = l.mixedAdd(r2.points[s2].neg()));
            }
            u = u.add(l);
          }
          return u.toP();
        }, o.prototype._wnafMul = function(e2, t2) {
          var r2 = 4, n2 = e2._getNAFPoints(r2);
          r2 = n2.wnd;
          for (var i2 = n2.points, o2 = S(t2, r2, this._bitLength), s2 = this.jpoint(null, null, null), a = o2.length - 1; 0 <= a; a--) {
            for (t2 = 0; 0 <= a && o2[a] === 0; a--)
              t2++;
            if (0 <= a && t2++, s2 = s2.dblp(t2), a < 0)
              break;
            var u = o2[a];
            f2(u !== 0), s2 = e2.type === "affine" ? 0 < u ? s2.mixedAdd(i2[u - 1 >> 1]) : s2.mixedAdd(i2[-u - 1 >> 1].neg()) : 0 < u ? s2.add(i2[u - 1 >> 1]) : s2.add(i2[-u - 1 >> 1].neg());
          }
          return e2.type === "affine" ? s2.toP() : s2;
        }, o.prototype._wnafMulAdd = function(e2, t2, r2, n2, i2) {
          for (var o2 = this._wnafT1, s2 = this._wnafT2, a = this._wnafT3, u = 0, l = 0; l < n2; l++) {
            var h = (A = t2[l])._getNAFPoints(e2);
            o2[l] = h.wnd, s2[l] = h.points;
          }
          for (l = n2 - 1; 1 <= l; l -= 2) {
            var f3 = l - 1, c = l;
            if (o2[f3] === 1 && o2[c] === 1) {
              var d = [t2[f3], null, null, t2[c]];
              t2[f3].y.cmp(t2[c].y) === 0 ? (d[1] = t2[f3].add(t2[c]), d[2] = t2[f3].toJ().mixedAdd(t2[c].neg())) : t2[f3].y.cmp(t2[c].y.redNeg()) === 0 ? (d[1] = t2[f3].toJ().mixedAdd(t2[c]), d[2] = t2[f3].add(t2[c].neg())) : (d[1] = t2[f3].toJ().mixedAdd(t2[c]), d[2] = t2[f3].toJ().mixedAdd(t2[c].neg()));
              var p = [-3, -1, -5, -7, 0, 7, 5, 1, 3], v = k(r2[f3], r2[c]);
              u = Math.max(v[0].length, u), a[f3] = new Array(u), a[c] = new Array(u);
              for (var y = 0; y < u; y++) {
                var m = 0 | v[0][y], g = 0 | v[1][y];
                a[f3][y] = p[3 * (1 + m) + (1 + g)], a[c][y] = 0, s2[f3] = d;
              }
            } else
              a[f3] = S(r2[f3], o2[f3], this._bitLength), a[c] = S(r2[c], o2[c], this._bitLength), u = Math.max(a[f3].length, u), u = Math.max(a[c].length, u);
          }
          var b = this.jpoint(null, null, null), w = this._wnafT4;
          for (l = u; 0 <= l; l--) {
            for (var _ = 0; 0 <= l; ) {
              var M = true;
              for (y = 0; y < n2; y++)
                w[y] = 0 | a[y][l], w[y] !== 0 && (M = false);
              if (!M)
                break;
              _++, l--;
            }
            if (0 <= l && _++, b = b.dblp(_), l < 0)
              break;
            for (y = 0; y < n2; y++) {
              var A, E = w[y];
              E !== 0 && (0 < E ? A = s2[y][E - 1 >> 1] : E < 0 && (A = s2[y][-E - 1 >> 1].neg()), b = A.type === "affine" ? b.mixedAdd(A) : b.add(A));
            }
          }
          for (l = 0; l < n2; l++)
            s2[l] = null;
          return i2 ? b : b.toP();
        }, (o.BasePoint = s).prototype.eq = function() {
          throw new Error("Not implemented");
        }, s.prototype.validate = function() {
          return this.curve.validate(this);
        }, o.prototype.decodePoint = function(e2, t2) {
          e2 = i.toArray(e2, t2);
          var r2 = this.p.byteLength();
          if ((e2[0] === 4 || e2[0] === 6 || e2[0] === 7) && e2.length - 1 == 2 * r2)
            return e2[0] === 6 ? f2(e2[e2.length - 1] % 2 == 0) : e2[0] === 7 && f2(e2[e2.length - 1] % 2 == 1), this.point(e2.slice(1, 1 + r2), e2.slice(1 + r2, 1 + 2 * r2));
          if ((e2[0] === 2 || e2[0] === 3) && e2.length - 1 === r2)
            return this.pointFromX(e2.slice(1, 1 + r2), e2[0] === 3);
          throw new Error("Unknown point format");
        }, s.prototype.encodeCompressed = function(e2) {
          return this.encode(e2, true);
        }, s.prototype._encode = function(e2) {
          var t2 = this.curve.p.byteLength(), r2 = this.getX().toArray("be", t2);
          return e2 ? [this.getY().isEven() ? 2 : 3].concat(r2) : [4].concat(r2, this.getY().toArray("be", t2));
        }, s.prototype.encode = function(e2, t2) {
          return i.encode(this._encode(t2), e2);
        }, s.prototype.precompute = function(e2) {
          if (this.precomputed)
            return this;
          var t2 = { doubles: null, naf: null, beta: null };
          return t2.naf = this._getNAFPoints(8), t2.doubles = this._getDoubles(4, e2), t2.beta = this._getBeta(), this.precomputed = t2, this;
        }, s.prototype._hasDoubles = function(e2) {
          if (!this.precomputed)
            return false;
          var t2 = this.precomputed.doubles;
          return !!t2 && t2.points.length >= Math.ceil((e2.bitLength() + 1) / t2.step);
        }, s.prototype._getDoubles = function(e2, t2) {
          if (this.precomputed && this.precomputed.doubles)
            return this.precomputed.doubles;
          for (var r2 = [this], n2 = this, i2 = 0; i2 < t2; i2 += e2) {
            for (var o2 = 0; o2 < e2; o2++)
              n2 = n2.dbl();
            r2.push(n2);
          }
          return { step: e2, points: r2 };
        }, s.prototype._getNAFPoints = function(e2) {
          if (this.precomputed && this.precomputed.naf)
            return this.precomputed.naf;
          for (var t2 = [this], r2 = (1 << e2) - 1, n2 = r2 == 1 ? null : this.dbl(), i2 = 1; i2 < r2; i2++)
            t2[i2] = t2[i2 - 1].add(n2);
          return { wnd: e2, points: t2 };
        }, s.prototype._getBeta = function() {
          return null;
        }, s.prototype.dblp = function(e2) {
          for (var t2 = this, r2 = 0; r2 < e2; r2++)
            t2 = t2.dbl();
          return t2;
        };
      }, { "../utils": 24, "bn.js": 9 }], 14: [function(e, t, r) {
        t.exports = {};
      }, {}], 15: [function(e, t, r) {
        "use strict";
        var n = r;
        n.base = e("./base"), n.short = e("./short"), n.mont = e("./mont"), n.edwards = e("./edwards");
      }, { "./base": 13, "./edwards": 14, "./mont": 16, "./short": 17 }], 16: [function(e, t, r) {
        arguments[4][14][0].apply(r, arguments);
      }, { dup: 14 }], 17: [function(e, t, r) {
        "use strict";
        var n = e("../utils"), _ = e("bn.js"), i = e("inherits"), o = e("./base"), s = n.assert;
        function a(e2) {
          o.call(this, "short", e2), this.a = new _(e2.a, 16).toRed(this.red), this.b = new _(e2.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = this.a.fromRed().cmpn(0) === 0, this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0, this.endo = this._getEndomorphism(e2), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
        }
        function u(e2, t2, r2, n2) {
          o.BasePoint.call(this, e2, "affine"), t2 === null && r2 === null ? (this.x = null, this.y = null, this.inf = true) : (this.x = new _(t2, 16), this.y = new _(r2, 16), n2 && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = false);
        }
        function l(e2, t2, r2, n2) {
          o.BasePoint.call(this, e2, "jacobian"), t2 === null && r2 === null && n2 === null ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new _(0)) : (this.x = new _(t2, 16), this.y = new _(r2, 16), this.z = new _(n2, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
        }
        i(a, o), (t.exports = a).prototype._getEndomorphism = function(e2) {
          if (this.zeroA && this.g && this.n && this.p.modn(3) === 1) {
            var t2, r2;
            if (e2.beta)
              t2 = new _(e2.beta, 16).toRed(this.red);
            else {
              var n2 = this._getEndoRoots(this.p);
              t2 = (t2 = n2[0].cmp(n2[1]) < 0 ? n2[0] : n2[1]).toRed(this.red);
            }
            if (e2.lambda)
              r2 = new _(e2.lambda, 16);
            else {
              var i2 = this._getEndoRoots(this.n);
              this.g.mul(i2[0]).x.cmp(this.g.x.redMul(t2)) === 0 ? r2 = i2[0] : (r2 = i2[1], s(this.g.mul(r2).x.cmp(this.g.x.redMul(t2)) === 0));
            }
            return { beta: t2, lambda: r2, basis: e2.basis ? e2.basis.map(function(e3) {
              return { a: new _(e3.a, 16), b: new _(e3.b, 16) };
            }) : this._getEndoBasis(r2) };
          }
        }, a.prototype._getEndoRoots = function(e2) {
          var t2 = e2 === this.p ? this.red : _.mont(e2), r2 = new _(2).toRed(t2).redInvm(), n2 = r2.redNeg(), i2 = new _(3).toRed(t2).redNeg().redSqrt().redMul(r2);
          return [n2.redAdd(i2).fromRed(), n2.redSub(i2).fromRed()];
        }, a.prototype._getEndoBasis = function(e2) {
          for (var t2, r2, n2, i2, o2, s2, a2, u2, l2, h = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), f2 = e2, c = this.n.clone(), d = new _(1), p = new _(0), v = new _(0), y = new _(1), m = 0; f2.cmpn(0) !== 0; ) {
            var g = c.div(f2);
            u2 = c.sub(g.mul(f2)), l2 = v.sub(g.mul(d));
            var b = y.sub(g.mul(p));
            if (!n2 && u2.cmp(h) < 0)
              t2 = a2.neg(), r2 = d, n2 = u2.neg(), i2 = l2;
            else if (n2 && ++m == 2)
              break;
            c = f2, f2 = a2 = u2, v = d, d = l2, y = p, p = b;
          }
          o2 = u2.neg(), s2 = l2;
          var w = n2.sqr().add(i2.sqr());
          return 0 <= o2.sqr().add(s2.sqr()).cmp(w) && (o2 = t2, s2 = r2), n2.negative && (n2 = n2.neg(), i2 = i2.neg()), o2.negative && (o2 = o2.neg(), s2 = s2.neg()), [{ a: n2, b: i2 }, { a: o2, b: s2 }];
        }, a.prototype._endoSplit = function(e2) {
          var t2 = this.endo.basis, r2 = t2[0], n2 = t2[1], i2 = n2.b.mul(e2).divRound(this.n), o2 = r2.b.neg().mul(e2).divRound(this.n), s2 = i2.mul(r2.a), a2 = o2.mul(n2.a), u2 = i2.mul(r2.b), l2 = o2.mul(n2.b);
          return { k1: e2.sub(s2).sub(a2), k2: u2.add(l2).neg() };
        }, a.prototype.pointFromX = function(e2, t2) {
          (e2 = new _(e2, 16)).red || (e2 = e2.toRed(this.red));
          var r2 = e2.redSqr().redMul(e2).redIAdd(e2.redMul(this.a)).redIAdd(this.b), n2 = r2.redSqrt();
          if (n2.redSqr().redSub(r2).cmp(this.zero) !== 0)
            throw new Error("invalid point");
          var i2 = n2.fromRed().isOdd();
          return (t2 && !i2 || !t2 && i2) && (n2 = n2.redNeg()), this.point(e2, n2);
        }, a.prototype.validate = function(e2) {
          if (e2.inf)
            return true;
          var t2 = e2.x, r2 = e2.y, n2 = this.a.redMul(t2), i2 = t2.redSqr().redMul(t2).redIAdd(n2).redIAdd(this.b);
          return r2.redSqr().redISub(i2).cmpn(0) === 0;
        }, a.prototype._endoWnafMulAdd = function(e2, t2, r2) {
          for (var n2 = this._endoWnafT1, i2 = this._endoWnafT2, o2 = 0; o2 < e2.length; o2++) {
            var s2 = this._endoSplit(t2[o2]), a2 = e2[o2], u2 = a2._getBeta();
            s2.k1.negative && (s2.k1.ineg(), a2 = a2.neg(true)), s2.k2.negative && (s2.k2.ineg(), u2 = u2.neg(true)), n2[2 * o2] = a2, n2[2 * o2 + 1] = u2, i2[2 * o2] = s2.k1, i2[2 * o2 + 1] = s2.k2;
          }
          for (var l2 = this._wnafMulAdd(1, n2, i2, 2 * o2, r2), h = 0; h < 2 * o2; h++)
            n2[h] = null, i2[h] = null;
          return l2;
        }, i(u, o.BasePoint), a.prototype.point = function(e2, t2, r2) {
          return new u(this, e2, t2, r2);
        }, a.prototype.pointFromJSON = function(e2, t2) {
          return u.fromJSON(this, e2, t2);
        }, u.prototype._getBeta = function() {
          if (this.curve.endo) {
            var e2 = this.precomputed;
            if (e2 && e2.beta)
              return e2.beta;
            var t2 = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
            if (e2) {
              var r2 = this.curve, n2 = function(e3) {
                return r2.point(e3.x.redMul(r2.endo.beta), e3.y);
              };
              (e2.beta = t2).precomputed = { beta: null, naf: e2.naf && { wnd: e2.naf.wnd, points: e2.naf.points.map(n2) }, doubles: e2.doubles && { step: e2.doubles.step, points: e2.doubles.points.map(n2) } };
            }
            return t2;
          }
        }, u.prototype.toJSON = function() {
          return this.precomputed ? [this.x, this.y, this.precomputed && { doubles: this.precomputed.doubles && { step: this.precomputed.doubles.step, points: this.precomputed.doubles.points.slice(1) }, naf: this.precomputed.naf && { wnd: this.precomputed.naf.wnd, points: this.precomputed.naf.points.slice(1) } }] : [this.x, this.y];
        }, u.fromJSON = function(t2, e2, r2) {
          typeof e2 == "string" && (e2 = JSON.parse(e2));
          var n2 = t2.point(e2[0], e2[1], r2);
          if (!e2[2])
            return n2;
          function i2(e3) {
            return t2.point(e3[0], e3[1], r2);
          }
          var o2 = e2[2];
          return n2.precomputed = { beta: null, doubles: o2.doubles && { step: o2.doubles.step, points: [n2].concat(o2.doubles.points.map(i2)) }, naf: o2.naf && { wnd: o2.naf.wnd, points: [n2].concat(o2.naf.points.map(i2)) } }, n2;
        }, u.prototype.inspect = function() {
          return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
        }, u.prototype.isInfinity = function() {
          return this.inf;
        }, u.prototype.add = function(e2) {
          if (this.inf)
            return e2;
          if (e2.inf)
            return this;
          if (this.eq(e2))
            return this.dbl();
          if (this.neg().eq(e2))
            return this.curve.point(null, null);
          if (this.x.cmp(e2.x) === 0)
            return this.curve.point(null, null);
          var t2 = this.y.redSub(e2.y);
          t2.cmpn(0) !== 0 && (t2 = t2.redMul(this.x.redSub(e2.x).redInvm()));
          var r2 = t2.redSqr().redISub(this.x).redISub(e2.x), n2 = t2.redMul(this.x.redSub(r2)).redISub(this.y);
          return this.curve.point(r2, n2);
        }, u.prototype.dbl = function() {
          if (this.inf)
            return this;
          var e2 = this.y.redAdd(this.y);
          if (e2.cmpn(0) === 0)
            return this.curve.point(null, null);
          var t2 = this.curve.a, r2 = this.x.redSqr(), n2 = e2.redInvm(), i2 = r2.redAdd(r2).redIAdd(r2).redIAdd(t2).redMul(n2), o2 = i2.redSqr().redISub(this.x.redAdd(this.x)), s2 = i2.redMul(this.x.redSub(o2)).redISub(this.y);
          return this.curve.point(o2, s2);
        }, u.prototype.getX = function() {
          return this.x.fromRed();
        }, u.prototype.getY = function() {
          return this.y.fromRed();
        }, u.prototype.mul = function(e2) {
          return e2 = new _(e2, 16), this.isInfinity() ? this : this._hasDoubles(e2) ? this.curve._fixedNafMul(this, e2) : this.curve.endo ? this.curve._endoWnafMulAdd([this], [e2]) : this.curve._wnafMul(this, e2);
        }, u.prototype.mulAdd = function(e2, t2, r2) {
          var n2 = [this, t2], i2 = [e2, r2];
          return this.curve.endo ? this.curve._endoWnafMulAdd(n2, i2) : this.curve._wnafMulAdd(1, n2, i2, 2);
        }, u.prototype.jmulAdd = function(e2, t2, r2) {
          var n2 = [this, t2], i2 = [e2, r2];
          return this.curve.endo ? this.curve._endoWnafMulAdd(n2, i2, true) : this.curve._wnafMulAdd(1, n2, i2, 2, true);
        }, u.prototype.eq = function(e2) {
          return this === e2 || this.inf === e2.inf && (this.inf || this.x.cmp(e2.x) === 0 && this.y.cmp(e2.y) === 0);
        }, u.prototype.neg = function(e2) {
          if (this.inf)
            return this;
          var t2 = this.curve.point(this.x, this.y.redNeg());
          if (e2 && this.precomputed) {
            var r2 = this.precomputed, n2 = function(e3) {
              return e3.neg();
            };
            t2.precomputed = { naf: r2.naf && { wnd: r2.naf.wnd, points: r2.naf.points.map(n2) }, doubles: r2.doubles && { step: r2.doubles.step, points: r2.doubles.points.map(n2) } };
          }
          return t2;
        }, u.prototype.toJ = function() {
          return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
        }, i(l, o.BasePoint), a.prototype.jpoint = function(e2, t2, r2) {
          return new l(this, e2, t2, r2);
        }, l.prototype.toP = function() {
          if (this.isInfinity())
            return this.curve.point(null, null);
          var e2 = this.z.redInvm(), t2 = e2.redSqr(), r2 = this.x.redMul(t2), n2 = this.y.redMul(t2).redMul(e2);
          return this.curve.point(r2, n2);
        }, l.prototype.neg = function() {
          return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
        }, l.prototype.add = function(e2) {
          if (this.isInfinity())
            return e2;
          if (e2.isInfinity())
            return this;
          var t2 = e2.z.redSqr(), r2 = this.z.redSqr(), n2 = this.x.redMul(t2), i2 = e2.x.redMul(r2), o2 = this.y.redMul(t2.redMul(e2.z)), s2 = e2.y.redMul(r2.redMul(this.z)), a2 = n2.redSub(i2), u2 = o2.redSub(s2);
          if (a2.cmpn(0) === 0)
            return u2.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
          var l2 = a2.redSqr(), h = l2.redMul(a2), f2 = n2.redMul(l2), c = u2.redSqr().redIAdd(h).redISub(f2).redISub(f2), d = u2.redMul(f2.redISub(c)).redISub(o2.redMul(h)), p = this.z.redMul(e2.z).redMul(a2);
          return this.curve.jpoint(c, d, p);
        }, l.prototype.mixedAdd = function(e2) {
          if (this.isInfinity())
            return e2.toJ();
          if (e2.isInfinity())
            return this;
          var t2 = this.z.redSqr(), r2 = this.x, n2 = e2.x.redMul(t2), i2 = this.y, o2 = e2.y.redMul(t2).redMul(this.z), s2 = r2.redSub(n2), a2 = i2.redSub(o2);
          if (s2.cmpn(0) === 0)
            return a2.cmpn(0) !== 0 ? this.curve.jpoint(null, null, null) : this.dbl();
          var u2 = s2.redSqr(), l2 = u2.redMul(s2), h = r2.redMul(u2), f2 = a2.redSqr().redIAdd(l2).redISub(h).redISub(h), c = a2.redMul(h.redISub(f2)).redISub(i2.redMul(l2)), d = this.z.redMul(s2);
          return this.curve.jpoint(f2, c, d);
        }, l.prototype.dblp = function(e2) {
          if (e2 === 0)
            return this;
          if (this.isInfinity())
            return this;
          if (!e2)
            return this.dbl();
          if (this.curve.zeroA || this.curve.threeA) {
            for (var t2 = this, r2 = 0; r2 < e2; r2++)
              t2 = t2.dbl();
            return t2;
          }
          var n2 = this.curve.a, i2 = this.curve.tinv, o2 = this.x, s2 = this.y, a2 = this.z, u2 = a2.redSqr().redSqr(), l2 = s2.redAdd(s2);
          for (r2 = 0; r2 < e2; r2++) {
            var h = o2.redSqr(), f2 = l2.redSqr(), c = f2.redSqr(), d = h.redAdd(h).redIAdd(h).redIAdd(n2.redMul(u2)), p = o2.redMul(f2), v = d.redSqr().redISub(p.redAdd(p)), y = p.redISub(v), m = d.redMul(y);
            m = m.redIAdd(m).redISub(c);
            var g = l2.redMul(a2);
            r2 + 1 < e2 && (u2 = u2.redMul(c)), o2 = v, a2 = g, l2 = m;
          }
          return this.curve.jpoint(o2, l2.redMul(i2), a2);
        }, l.prototype.dbl = function() {
          return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
        }, l.prototype._zeroDbl = function() {
          var e2, t2, r2;
          if (this.zOne) {
            var n2 = this.x.redSqr(), i2 = this.y.redSqr(), o2 = i2.redSqr(), s2 = this.x.redAdd(i2).redSqr().redISub(n2).redISub(o2);
            s2 = s2.redIAdd(s2);
            var a2 = n2.redAdd(n2).redIAdd(n2), u2 = a2.redSqr().redISub(s2).redISub(s2), l2 = o2.redIAdd(o2);
            l2 = (l2 = l2.redIAdd(l2)).redIAdd(l2), e2 = u2, t2 = a2.redMul(s2.redISub(u2)).redISub(l2), r2 = this.y.redAdd(this.y);
          } else {
            var h = this.x.redSqr(), f2 = this.y.redSqr(), c = f2.redSqr(), d = this.x.redAdd(f2).redSqr().redISub(h).redISub(c);
            d = d.redIAdd(d);
            var p = h.redAdd(h).redIAdd(h), v = p.redSqr(), y = c.redIAdd(c);
            y = (y = y.redIAdd(y)).redIAdd(y), e2 = v.redISub(d).redISub(d), t2 = p.redMul(d.redISub(e2)).redISub(y), r2 = (r2 = this.y.redMul(this.z)).redIAdd(r2);
          }
          return this.curve.jpoint(e2, t2, r2);
        }, l.prototype._threeDbl = function() {
          var e2, t2, r2;
          if (this.zOne) {
            var n2 = this.x.redSqr(), i2 = this.y.redSqr(), o2 = i2.redSqr(), s2 = this.x.redAdd(i2).redSqr().redISub(n2).redISub(o2);
            s2 = s2.redIAdd(s2);
            var a2 = n2.redAdd(n2).redIAdd(n2).redIAdd(this.curve.a), u2 = a2.redSqr().redISub(s2).redISub(s2);
            e2 = u2;
            var l2 = o2.redIAdd(o2);
            l2 = (l2 = l2.redIAdd(l2)).redIAdd(l2), t2 = a2.redMul(s2.redISub(u2)).redISub(l2), r2 = this.y.redAdd(this.y);
          } else {
            var h = this.z.redSqr(), f2 = this.y.redSqr(), c = this.x.redMul(f2), d = this.x.redSub(h).redMul(this.x.redAdd(h));
            d = d.redAdd(d).redIAdd(d);
            var p = c.redIAdd(c), v = (p = p.redIAdd(p)).redAdd(p);
            e2 = d.redSqr().redISub(v), r2 = this.y.redAdd(this.z).redSqr().redISub(f2).redISub(h);
            var y = f2.redSqr();
            y = (y = (y = y.redIAdd(y)).redIAdd(y)).redIAdd(y), t2 = d.redMul(p.redISub(e2)).redISub(y);
          }
          return this.curve.jpoint(e2, t2, r2);
        }, l.prototype._dbl = function() {
          var e2 = this.curve.a, t2 = this.x, r2 = this.y, n2 = this.z, i2 = n2.redSqr().redSqr(), o2 = t2.redSqr(), s2 = r2.redSqr(), a2 = o2.redAdd(o2).redIAdd(o2).redIAdd(e2.redMul(i2)), u2 = t2.redAdd(t2), l2 = (u2 = u2.redIAdd(u2)).redMul(s2), h = a2.redSqr().redISub(l2.redAdd(l2)), f2 = l2.redISub(h), c = s2.redSqr();
          c = (c = (c = c.redIAdd(c)).redIAdd(c)).redIAdd(c);
          var d = a2.redMul(f2).redISub(c), p = r2.redAdd(r2).redMul(n2);
          return this.curve.jpoint(h, d, p);
        }, l.prototype.trpl = function() {
          if (!this.curve.zeroA)
            return this.dbl().add(this);
          var e2 = this.x.redSqr(), t2 = this.y.redSqr(), r2 = this.z.redSqr(), n2 = t2.redSqr(), i2 = e2.redAdd(e2).redIAdd(e2), o2 = i2.redSqr(), s2 = this.x.redAdd(t2).redSqr().redISub(e2).redISub(n2), a2 = (s2 = (s2 = (s2 = s2.redIAdd(s2)).redAdd(s2).redIAdd(s2)).redISub(o2)).redSqr(), u2 = n2.redIAdd(n2);
          u2 = (u2 = (u2 = u2.redIAdd(u2)).redIAdd(u2)).redIAdd(u2);
          var l2 = i2.redIAdd(s2).redSqr().redISub(o2).redISub(a2).redISub(u2), h = t2.redMul(l2);
          h = (h = h.redIAdd(h)).redIAdd(h);
          var f2 = this.x.redMul(a2).redISub(h);
          f2 = (f2 = f2.redIAdd(f2)).redIAdd(f2);
          var c = this.y.redMul(l2.redMul(u2.redISub(l2)).redISub(s2.redMul(a2)));
          c = (c = (c = c.redIAdd(c)).redIAdd(c)).redIAdd(c);
          var d = this.z.redAdd(s2).redSqr().redISub(r2).redISub(a2);
          return this.curve.jpoint(f2, c, d);
        }, l.prototype.mul = function(e2, t2) {
          return e2 = new _(e2, t2), this.curve._wnafMul(this, e2);
        }, l.prototype.eq = function(e2) {
          if (e2.type === "affine")
            return this.eq(e2.toJ());
          if (this === e2)
            return true;
          var t2 = this.z.redSqr(), r2 = e2.z.redSqr();
          if (this.x.redMul(r2).redISub(e2.x.redMul(t2)).cmpn(0) !== 0)
            return false;
          var n2 = t2.redMul(this.z), i2 = r2.redMul(e2.z);
          return this.y.redMul(i2).redISub(e2.y.redMul(n2)).cmpn(0) === 0;
        }, l.prototype.eqXToP = function(e2) {
          var t2 = this.z.redSqr(), r2 = e2.toRed(this.curve.red).redMul(t2);
          if (this.x.cmp(r2) === 0)
            return true;
          for (var n2 = e2.clone(), i2 = this.curve.redN.redMul(t2); ; ) {
            if (n2.iadd(this.curve.n), 0 <= n2.cmp(this.curve.p))
              return false;
            if (r2.redIAdd(i2), this.x.cmp(r2) === 0)
              return true;
          }
        }, l.prototype.inspect = function() {
          return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
        }, l.prototype.isInfinity = function() {
          return this.z.cmpn(0) === 0;
        };
      }, { "../utils": 24, "./base": 13, "bn.js": 9, inherits: 39 }], 18: [function(e, t, r) {
        "use strict";
        var n, i = r, o = e("hash.js"), s = e("./curve"), a = e("./utils").assert;
        function u(e2) {
          e2.type === "short" ? this.curve = new s.short(e2) : e2.type === "edwards" ? this.curve = new s.edwards(e2) : this.curve = new s.mont(e2), this.g = this.curve.g, this.n = this.curve.n, this.hash = e2.hash, a(this.g.validate(), "Invalid curve"), a(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
        }
        function l(t2, r2) {
          Object.defineProperty(i, t2, { configurable: true, enumerable: true, get: function() {
            var e2 = new u(r2);
            return Object.defineProperty(i, t2, { configurable: true, enumerable: true, value: e2 }), e2;
          } });
        }
        i.PresetCurve = u, l("p192", { type: "short", prime: "p192", p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff", a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc", b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1", n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831", hash: o.sha256, gRed: false, g: ["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012", "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"] }), l("p224", { type: "short", prime: "p224", p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001", a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe", b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4", n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d", hash: o.sha256, gRed: false, g: ["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21", "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"] }), l("p256", { type: "short", prime: null, p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff", a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc", b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b", n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551", hash: o.sha256, gRed: false, g: ["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296", "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"] }), l("p384", { type: "short", prime: null, p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff", a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc", b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef", n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973", hash: o.sha384, gRed: false, g: ["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7", "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"] }), l("p521", { type: "short", prime: null, p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff", a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc", b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00", n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409", hash: o.sha512, gRed: false, g: ["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66", "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"] }), l("curve25519", { type: "mont", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "76d06", b: "1", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: o.sha256, gRed: false, g: ["9"] }), l("ed25519", { type: "edwards", prime: "p25519", p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed", a: "-1", c: "1", d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3", n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed", hash: o.sha256, gRed: false, g: ["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a", "6666666666666666666666666666666666666666666666666666666666666658"] });
        try {
          n = e("./precomputed/secp256k1");
        } catch (e2) {
          n = void 0;
        }
        l("secp256k1", { type: "short", prime: "k256", p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f", a: "0", b: "7", n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141", h: "1", hash: o.sha256, beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee", lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72", basis: [{ a: "3086d221a7d46bcde86c90e49284eb15", b: "-e4437ed6010e88286f547fa90abfe4c3" }, { a: "114ca50f7a8e2f3f657c1108d9d44cfd8", b: "3086d221a7d46bcde86c90e49284eb15" }], gRed: false, g: ["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", n] });
      }, { "./curve": 15, "./precomputed/secp256k1": 23, "./utils": 24, "hash.js": 26 }], 19: [function(e, t, r) {
        "use strict";
        var y = e("bn.js"), m = e("hmac-drbg"), n = e("../utils"), i = e("../curves"), o = e("brorand"), d = n.assert, s = e("./key"), g = e("./signature");
        function a(e2) {
          if (!(this instanceof a))
            return new a(e2);
          typeof e2 == "string" && (d(i.hasOwnProperty(e2), "Unknown curve " + e2), e2 = i[e2]), e2 instanceof i.PresetCurve && (e2 = { curve: e2 }), this.curve = e2.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e2.curve.g, this.g.precompute(e2.curve.n.bitLength() + 1), this.hash = e2.hash || e2.curve.hash;
        }
        (t.exports = a).prototype.keyPair = function(e2) {
          return new s(this, e2);
        }, a.prototype.keyFromPrivate = function(e2, t2) {
          return s.fromPrivate(this, e2, t2);
        }, a.prototype.keyFromPublic = function(e2, t2) {
          return s.fromPublic(this, e2, t2);
        }, a.prototype.genKeyPair = function(e2) {
          e2 = e2 || {};
          for (var t2 = new m({ hash: this.hash, pers: e2.pers, persEnc: e2.persEnc || "utf8", entropy: e2.entropy || o(this.hash.hmacStrength), entropyEnc: e2.entropy && e2.entropyEnc || "utf8", nonce: this.n.toArray() }), r2 = this.n.byteLength(), n2 = this.n.sub(new y(2)); ; ) {
            var i2 = new y(t2.generate(r2));
            if (!(0 < i2.cmp(n2)))
              return i2.iaddn(1), this.keyFromPrivate(i2);
          }
        }, a.prototype._truncateToN = function(e2, t2) {
          var r2 = 8 * e2.byteLength() - this.n.bitLength();
          return 0 < r2 && (e2 = e2.ushrn(r2)), !t2 && 0 <= e2.cmp(this.n) ? e2.sub(this.n) : e2;
        }, a.prototype.sign = function(e2, t2, r2, n2) {
          typeof r2 == "object" && (n2 = r2, r2 = null), n2 = n2 || {}, t2 = this.keyFromPrivate(t2, r2), e2 = this._truncateToN(new y(e2, 16));
          for (var i2 = this.n.byteLength(), o2 = t2.getPrivate().toArray("be", i2), s2 = e2.toArray("be", i2), a2 = new m({ hash: this.hash, entropy: o2, nonce: s2, pers: n2.pers, persEnc: n2.persEnc || "utf8" }), u = this.n.sub(new y(1)), l = 0; ; l++) {
            var h = n2.k ? n2.k(l) : new y(a2.generate(this.n.byteLength()));
            if (!((h = this._truncateToN(h, true)).cmpn(1) <= 0 || 0 <= h.cmp(u))) {
              var f2 = this.g.mul(h);
              if (!f2.isInfinity()) {
                var c = f2.getX(), d2 = c.umod(this.n);
                if (d2.cmpn(0) !== 0) {
                  var p = h.invm(this.n).mul(d2.mul(t2.getPrivate()).iadd(e2));
                  if ((p = p.umod(this.n)).cmpn(0) !== 0) {
                    var v = (f2.getY().isOdd() ? 1 : 0) | (c.cmp(d2) !== 0 ? 2 : 0);
                    return n2.canonical && 0 < p.cmp(this.nh) && (p = this.n.sub(p), v ^= 1), new g({ r: d2, s: p, recoveryParam: v });
                  }
                }
              }
            }
          }
        }, a.prototype.verify = function(e2, t2, r2, n2) {
          e2 = this._truncateToN(new y(e2, 16)), r2 = this.keyFromPublic(r2, n2);
          var i2 = (t2 = new g(t2, "hex")).r, o2 = t2.s;
          if (i2.cmpn(1) < 0 || 0 <= i2.cmp(this.n))
            return false;
          if (o2.cmpn(1) < 0 || 0 <= o2.cmp(this.n))
            return false;
          var s2, a2 = o2.invm(this.n), u = a2.mul(e2).umod(this.n), l = a2.mul(i2).umod(this.n);
          return this.curve._maxwellTrick ? !(s2 = this.g.jmulAdd(u, r2.getPublic(), l)).isInfinity() && s2.eqXToP(i2) : !(s2 = this.g.mulAdd(u, r2.getPublic(), l)).isInfinity() && s2.getX().umod(this.n).cmp(i2) === 0;
        }, a.prototype.recoverPubKey = function(e2, t2, r2, n2) {
          d((3 & r2) === r2, "The recovery param is more than two bits"), t2 = new g(t2, n2);
          var i2 = this.n, o2 = new y(e2), s2 = t2.r, a2 = t2.s, u = 1 & r2, l = r2 >> 1;
          if (0 <= s2.cmp(this.curve.p.umod(this.curve.n)) && l)
            throw new Error("Unable to find sencond key candinate");
          s2 = l ? this.curve.pointFromX(s2.add(this.curve.n), u) : this.curve.pointFromX(s2, u);
          var h = t2.r.invm(i2), f2 = i2.sub(o2).mul(h).umod(i2), c = a2.mul(h).umod(i2);
          return this.g.mulAdd(f2, s2, c);
        }, a.prototype.getKeyRecoveryParam = function(e2, t2, r2, n2) {
          if ((t2 = new g(t2, n2)).recoveryParam !== null)
            return t2.recoveryParam;
          for (var i2 = 0; i2 < 4; i2++) {
            var o2;
            try {
              o2 = this.recoverPubKey(e2, t2, i2);
            } catch (e3) {
              continue;
            }
            if (o2.eq(r2))
              return i2;
          }
          throw new Error("Unable to find valid recovery factor");
        };
      }, { "../curves": 18, "../utils": 24, "./key": 20, "./signature": 21, "bn.js": 9, brorand: 10, "hmac-drbg": 38 }], 20: [function(e, t, r) {
        "use strict";
        var n = e("bn.js"), i = e("../utils").assert;
        function o(e2, t2) {
          this.ec = e2, this.priv = null, this.pub = null, t2.priv && this._importPrivate(t2.priv, t2.privEnc), t2.pub && this._importPublic(t2.pub, t2.pubEnc);
        }
        (t.exports = o).fromPublic = function(e2, t2, r2) {
          return t2 instanceof o ? t2 : new o(e2, { pub: t2, pubEnc: r2 });
        }, o.fromPrivate = function(e2, t2, r2) {
          return t2 instanceof o ? t2 : new o(e2, { priv: t2, privEnc: r2 });
        }, o.prototype.validate = function() {
          var e2 = this.getPublic();
          return e2.isInfinity() ? { result: false, reason: "Invalid public key" } : e2.validate() ? e2.mul(this.ec.curve.n).isInfinity() ? { result: true, reason: null } : { result: false, reason: "Public key * N != O" } : { result: false, reason: "Public key is not a point" };
        }, o.prototype.getPublic = function(e2, t2) {
          return typeof e2 == "string" && (t2 = e2, e2 = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), t2 ? this.pub.encode(t2, e2) : this.pub;
        }, o.prototype.getPrivate = function(e2) {
          return e2 === "hex" ? this.priv.toString(16, 2) : this.priv;
        }, o.prototype._importPrivate = function(e2, t2) {
          this.priv = new n(e2, t2 || 16), this.priv = this.priv.umod(this.ec.curve.n);
        }, o.prototype._importPublic = function(e2, t2) {
          if (e2.x || e2.y)
            return this.ec.curve.type === "mont" ? i(e2.x, "Need x coordinate") : this.ec.curve.type !== "short" && this.ec.curve.type !== "edwards" || i(e2.x && e2.y, "Need both x and y coordinate"), void (this.pub = this.ec.curve.point(e2.x, e2.y));
          this.pub = this.ec.curve.decodePoint(e2, t2);
        }, o.prototype.derive = function(e2) {
          return e2.mul(this.priv).getX();
        }, o.prototype.sign = function(e2, t2, r2) {
          return this.ec.sign(e2, this, t2, r2);
        }, o.prototype.verify = function(e2, t2) {
          return this.ec.verify(e2, t2, this);
        }, o.prototype.inspect = function() {
          return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
        };
      }, { "../utils": 24, "bn.js": 9 }], 21: [function(e, t, r) {
        "use strict";
        var a = e("bn.js"), u = e("../utils"), n = u.assert;
        function i(e2, t2) {
          if (e2 instanceof i)
            return e2;
          this._importDER(e2, t2) || (n(e2.r && e2.s, "Signature without r or s"), this.r = new a(e2.r, 16), this.s = new a(e2.s, 16), e2.recoveryParam === void 0 ? this.recoveryParam = null : this.recoveryParam = e2.recoveryParam);
        }
        function l() {
          this.place = 0;
        }
        function h(e2, t2) {
          var r2 = e2[t2.place++];
          if (!(128 & r2))
            return r2;
          for (var n2 = 15 & r2, i2 = 0, o = 0, s2 = t2.place; o < n2; o++, s2++)
            i2 <<= 8, i2 |= e2[s2];
          return t2.place = s2, i2;
        }
        function s(e2) {
          for (var t2 = 0, r2 = e2.length - 1; !e2[t2] && !(128 & e2[t2 + 1]) && t2 < r2; )
            t2++;
          return t2 === 0 ? e2 : e2.slice(t2);
        }
        function f2(e2, t2) {
          if (t2 < 128)
            e2.push(t2);
          else {
            var r2 = 1 + (Math.log(t2) / Math.LN2 >>> 3);
            for (e2.push(128 | r2); --r2; )
              e2.push(t2 >>> (r2 << 3) & 255);
            e2.push(t2);
          }
        }
        (t.exports = i).prototype._importDER = function(e2, t2) {
          e2 = u.toArray(e2, t2);
          var r2 = new l();
          if (e2[r2.place++] !== 48)
            return false;
          if (h(e2, r2) + r2.place !== e2.length)
            return false;
          if (e2[r2.place++] !== 2)
            return false;
          var n2 = h(e2, r2), i2 = e2.slice(r2.place, n2 + r2.place);
          if (r2.place += n2, e2[r2.place++] !== 2)
            return false;
          var o = h(e2, r2);
          if (e2.length !== o + r2.place)
            return false;
          var s2 = e2.slice(r2.place, o + r2.place);
          return i2[0] === 0 && 128 & i2[1] && (i2 = i2.slice(1)), s2[0] === 0 && 128 & s2[1] && (s2 = s2.slice(1)), this.r = new a(i2), this.s = new a(s2), !(this.recoveryParam = null);
        }, i.prototype.toDER = function(e2) {
          var t2 = this.r.toArray(), r2 = this.s.toArray();
          for (128 & t2[0] && (t2 = [0].concat(t2)), 128 & r2[0] && (r2 = [0].concat(r2)), t2 = s(t2), r2 = s(r2); !(r2[0] || 128 & r2[1]); )
            r2 = r2.slice(1);
          var n2 = [2];
          f2(n2, t2.length), (n2 = n2.concat(t2)).push(2), f2(n2, r2.length);
          var i2 = n2.concat(r2), o = [48];
          return f2(o, i2.length), o = o.concat(i2), u.encode(o, e2);
        };
      }, { "../utils": 24, "bn.js": 9 }], 22: [function(e, t, r) {
        arguments[4][14][0].apply(r, arguments);
      }, { dup: 14 }], 23: [function(e, t, r) {
        t.exports = void 0;
      }, {}], 24: [function(e, t, r) {
        "use strict";
        var n = r, i = e("bn.js"), o = e("minimalistic-assert"), s = e("minimalistic-crypto-utils");
        n.assert = o, n.toArray = s.toArray, n.zero2 = s.zero2, n.toHex = s.toHex, n.encode = s.encode, n.getNAF = function(e2, t2, r2) {
          var n2 = new Array(Math.max(e2.bitLength(), r2) + 1);
          n2.fill(0);
          for (var i2 = 1 << t2 + 1, o2 = e2.clone(), s2 = 0; s2 < n2.length; s2++) {
            var a, u = o2.andln(i2 - 1);
            o2.isOdd() ? (a = (i2 >> 1) - 1 < u ? (i2 >> 1) - u : u, o2.isubn(a)) : a = 0, n2[s2] = a, o2.iushrn(1);
          }
          return n2;
        }, n.getJSF = function(e2, t2) {
          var r2 = [[], []];
          e2 = e2.clone(), t2 = t2.clone();
          for (var n2 = 0, i2 = 0; 0 < e2.cmpn(-n2) || 0 < t2.cmpn(-i2); ) {
            var o2, s2, a, u = e2.andln(3) + n2 & 3, l = t2.andln(3) + i2 & 3;
            if (u === 3 && (u = -1), l === 3 && (l = -1), (1 & u) == 0)
              o2 = 0;
            else
              o2 = (a = e2.andln(7) + n2 & 7) !== 3 && a !== 5 || l !== 2 ? u : -u;
            if (r2[0].push(o2), (1 & l) == 0)
              s2 = 0;
            else
              s2 = (a = t2.andln(7) + i2 & 7) !== 3 && a !== 5 || u !== 2 ? l : -l;
            r2[1].push(s2), 2 * n2 === o2 + 1 && (n2 = 1 - n2), 2 * i2 === s2 + 1 && (i2 = 1 - i2), e2.iushrn(1), t2.iushrn(1);
          }
          return r2;
        }, n.cachedProperty = function(e2, t2, r2) {
          var n2 = "_" + t2;
          e2.prototype[t2] = function() {
            return this[n2] !== void 0 ? this[n2] : this[n2] = r2.call(this);
          };
        }, n.parseBytes = function(e2) {
          return typeof e2 == "string" ? n.toArray(e2, "hex") : e2;
        }, n.intFromLE = function(e2) {
          return new i(e2, "hex", "le");
        };
      }, { "bn.js": 9, "minimalistic-assert": 41, "minimalistic-crypto-utils": 42 }], 25: [function(e, t, r) {
        t.exports = { version: "6.5.2" };
      }, {}], 26: [function(e, t, r) {
        var n = r;
        n.utils = e("./hash/utils"), n.common = e("./hash/common"), n.sha = e("./hash/sha"), n.ripemd = e("./hash/ripemd"), n.hmac = e("./hash/hmac"), n.sha1 = n.sha.sha1, n.sha256 = n.sha.sha256, n.sha224 = n.sha.sha224, n.sha384 = n.sha.sha384, n.sha512 = n.sha.sha512, n.ripemd160 = n.ripemd.ripemd160;
      }, { "./hash/common": 27, "./hash/hmac": 28, "./hash/ripemd": 29, "./hash/sha": 30, "./hash/utils": 37 }], 27: [function(e, t, r) {
        "use strict";
        var i = e("./utils"), n = e("minimalistic-assert");
        function o() {
          this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
        }
        (r.BlockHash = o).prototype.update = function(e2, t2) {
          if (e2 = i.toArray(e2, t2), this.pending ? this.pending = this.pending.concat(e2) : this.pending = e2, this.pendingTotal += e2.length, this.pending.length >= this._delta8) {
            var r2 = (e2 = this.pending).length % this._delta8;
            this.pending = e2.slice(e2.length - r2, e2.length), this.pending.length === 0 && (this.pending = null), e2 = i.join32(e2, 0, e2.length - r2, this.endian);
            for (var n2 = 0; n2 < e2.length; n2 += this._delta32)
              this._update(e2, n2, n2 + this._delta32);
          }
          return this;
        }, o.prototype.digest = function(e2) {
          return this.update(this._pad()), n(this.pending === null), this._digest(e2);
        }, o.prototype._pad = function() {
          var e2 = this.pendingTotal, t2 = this._delta8, r2 = t2 - (e2 + this.padLength) % t2, n2 = new Array(r2 + this.padLength);
          n2[0] = 128;
          for (var i2 = 1; i2 < r2; i2++)
            n2[i2] = 0;
          if (e2 <<= 3, this.endian === "big") {
            for (var o2 = 8; o2 < this.padLength; o2++)
              n2[i2++] = 0;
            n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = e2 >>> 24 & 255, n2[i2++] = e2 >>> 16 & 255, n2[i2++] = e2 >>> 8 & 255, n2[i2++] = 255 & e2;
          } else
            for (n2[i2++] = 255 & e2, n2[i2++] = e2 >>> 8 & 255, n2[i2++] = e2 >>> 16 & 255, n2[i2++] = e2 >>> 24 & 255, n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = 0, n2[i2++] = 0, o2 = 8; o2 < this.padLength; o2++)
              n2[i2++] = 0;
          return n2;
        };
      }, { "./utils": 37, "minimalistic-assert": 41 }], 28: [function(e, t, r) {
        "use strict";
        var n = e("./utils"), i = e("minimalistic-assert");
        function o(e2, t2, r2) {
          if (!(this instanceof o))
            return new o(e2, t2, r2);
          this.Hash = e2, this.blockSize = e2.blockSize / 8, this.outSize = e2.outSize / 8, this.inner = null, this.outer = null, this._init(n.toArray(t2, r2));
        }
        (t.exports = o).prototype._init = function(e2) {
          e2.length > this.blockSize && (e2 = new this.Hash().update(e2).digest()), i(e2.length <= this.blockSize);
          for (var t2 = e2.length; t2 < this.blockSize; t2++)
            e2.push(0);
          for (t2 = 0; t2 < e2.length; t2++)
            e2[t2] ^= 54;
          for (this.inner = new this.Hash().update(e2), t2 = 0; t2 < e2.length; t2++)
            e2[t2] ^= 106;
          this.outer = new this.Hash().update(e2);
        }, o.prototype.update = function(e2, t2) {
          return this.inner.update(e2, t2), this;
        }, o.prototype.digest = function(e2) {
          return this.outer.update(this.inner.digest()), this.outer.digest(e2);
        };
      }, { "./utils": 37, "minimalistic-assert": 41 }], 29: [function(e, t, r) {
        "use strict";
        var n = e("./utils"), i = e("./common"), p = n.rotl32, v = n.sum32, y = n.sum32_3, m = n.sum32_4, o = i.BlockHash;
        function s() {
          if (!(this instanceof s))
            return new s();
          o.call(this), this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520], this.endian = "little";
        }
        function g(e2, t2, r2, n2) {
          return e2 <= 15 ? t2 ^ r2 ^ n2 : e2 <= 31 ? t2 & r2 | ~t2 & n2 : e2 <= 47 ? (t2 | ~r2) ^ n2 : e2 <= 63 ? t2 & n2 | r2 & ~n2 : t2 ^ (r2 | ~n2);
        }
        function b(e2) {
          return e2 <= 15 ? 0 : e2 <= 31 ? 1518500249 : e2 <= 47 ? 1859775393 : e2 <= 63 ? 2400959708 : 2840853838;
        }
        function w(e2) {
          return e2 <= 15 ? 1352829926 : e2 <= 31 ? 1548603684 : e2 <= 47 ? 1836072691 : e2 <= 63 ? 2053994217 : 0;
        }
        n.inherits(s, o), (r.ripemd160 = s).blockSize = 512, s.outSize = 160, s.hmacStrength = 192, s.padLength = 64, s.prototype._update = function(e2, t2) {
          for (var r2 = this.h[0], n2 = this.h[1], i2 = this.h[2], o2 = this.h[3], s2 = this.h[4], a = r2, u = n2, l = i2, h = o2, f2 = s2, c = 0; c < 80; c++) {
            var d = v(p(m(r2, g(c, n2, i2, o2), e2[_[c] + t2], b(c)), A[c]), s2);
            r2 = s2, s2 = o2, o2 = p(i2, 10), i2 = n2, n2 = d, d = v(p(m(a, g(79 - c, u, l, h), e2[M[c] + t2], w(c)), E[c]), f2), a = f2, f2 = h, h = p(l, 10), l = u, u = d;
          }
          d = y(this.h[1], i2, h), this.h[1] = y(this.h[2], o2, f2), this.h[2] = y(this.h[3], s2, a), this.h[3] = y(this.h[4], r2, u), this.h[4] = y(this.h[0], n2, l), this.h[0] = d;
        }, s.prototype._digest = function(e2) {
          return e2 === "hex" ? n.toHex32(this.h, "little") : n.split32(this.h, "little");
        };
        var _ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13], M = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11], A = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6], E = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];
      }, { "./common": 27, "./utils": 37 }], 30: [function(e, t, r) {
        "use strict";
        r.sha1 = e("./sha/1"), r.sha224 = e("./sha/224"), r.sha256 = e("./sha/256"), r.sha384 = e("./sha/384"), r.sha512 = e("./sha/512");
      }, { "./sha/1": 31, "./sha/224": 32, "./sha/256": 33, "./sha/384": 34, "./sha/512": 35 }], 31: [function(e, t, r) {
        arguments[4][14][0].apply(r, arguments);
      }, { dup: 14 }], 32: [function(e, t, r) {
        arguments[4][14][0].apply(r, arguments);
      }, { dup: 14 }], 33: [function(e, t, r) {
        "use strict";
        var n = e("../utils"), i = e("../common"), o = e("./common"), p = e("minimalistic-assert"), v = n.sum32, y = n.sum32_4, m = n.sum32_5, g = o.ch32, b = o.maj32, w = o.s0_256, _ = o.s1_256, M = o.g0_256, A = o.g1_256, s = i.BlockHash, a = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
        function u() {
          if (!(this instanceof u))
            return new u();
          s.call(this), this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225], this.k = a, this.W = new Array(64);
        }
        n.inherits(u, s), (t.exports = u).blockSize = 512, u.outSize = 256, u.hmacStrength = 192, u.padLength = 64, u.prototype._update = function(e2, t2) {
          for (var r2 = this.W, n2 = 0; n2 < 16; n2++)
            r2[n2] = e2[t2 + n2];
          for (; n2 < r2.length; n2++)
            r2[n2] = y(A(r2[n2 - 2]), r2[n2 - 7], M(r2[n2 - 15]), r2[n2 - 16]);
          var i2 = this.h[0], o2 = this.h[1], s2 = this.h[2], a2 = this.h[3], u2 = this.h[4], l = this.h[5], h = this.h[6], f2 = this.h[7];
          for (p(this.k.length === r2.length), n2 = 0; n2 < r2.length; n2++) {
            var c = m(f2, _(u2), g(u2, l, h), this.k[n2], r2[n2]), d = v(w(i2), b(i2, o2, s2));
            f2 = h, h = l, l = u2, u2 = v(a2, c), a2 = s2, s2 = o2, o2 = i2, i2 = v(c, d);
          }
          this.h[0] = v(this.h[0], i2), this.h[1] = v(this.h[1], o2), this.h[2] = v(this.h[2], s2), this.h[3] = v(this.h[3], a2), this.h[4] = v(this.h[4], u2), this.h[5] = v(this.h[5], l), this.h[6] = v(this.h[6], h), this.h[7] = v(this.h[7], f2);
        }, u.prototype._digest = function(e2) {
          return e2 === "hex" ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
        };
      }, { "../common": 27, "../utils": 37, "./common": 36, "minimalistic-assert": 41 }], 34: [function(e, t, r) {
        arguments[4][14][0].apply(r, arguments);
      }, { dup: 14 }], 35: [function(e, t, r) {
        "use strict";
        var n = e("../utils"), i = e("../common"), C = e("minimalistic-assert"), o = n.rotr64_hi, s = n.rotr64_lo, a = n.shr64_hi, u = n.shr64_lo, L = n.sum64, D = n.sum64_hi, B = n.sum64_lo, c = n.sum64_4_hi, d = n.sum64_4_lo, U = n.sum64_5_hi, F = n.sum64_5_lo, l = i.BlockHash, h = [1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163, 4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394, 310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206, 991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139, 264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692, 3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879, 3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895, 168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823, 1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921, 1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344, 3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616, 1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403, 1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452, 2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573, 3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271, 4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315, 685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470, 3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591];
        function f2() {
          if (!(this instanceof f2))
            return new f2();
          l.call(this), this.h = [1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129, 1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209], this.k = h, this.W = new Array(160);
        }
        function j(e2, t2, r2, n2, i2) {
          var o2 = e2 & r2 ^ ~e2 & i2;
          return o2 < 0 && (o2 += 4294967296), o2;
        }
        function G(e2, t2, r2, n2, i2, o2) {
          var s2 = t2 & n2 ^ ~t2 & o2;
          return s2 < 0 && (s2 += 4294967296), s2;
        }
        function H(e2, t2, r2, n2, i2) {
          var o2 = e2 & r2 ^ e2 & i2 ^ r2 & i2;
          return o2 < 0 && (o2 += 4294967296), o2;
        }
        function z(e2, t2, r2, n2, i2, o2) {
          var s2 = t2 & n2 ^ t2 & o2 ^ n2 & o2;
          return s2 < 0 && (s2 += 4294967296), s2;
        }
        function V(e2, t2) {
          var r2 = o(e2, t2, 28) ^ o(t2, e2, 2) ^ o(t2, e2, 7);
          return r2 < 0 && (r2 += 4294967296), r2;
        }
        function K(e2, t2) {
          var r2 = s(e2, t2, 28) ^ s(t2, e2, 2) ^ s(t2, e2, 7);
          return r2 < 0 && (r2 += 4294967296), r2;
        }
        function q(e2, t2) {
          var r2 = o(e2, t2, 14) ^ o(e2, t2, 18) ^ o(t2, e2, 9);
          return r2 < 0 && (r2 += 4294967296), r2;
        }
        function W(e2, t2) {
          var r2 = s(e2, t2, 14) ^ s(e2, t2, 18) ^ s(t2, e2, 9);
          return r2 < 0 && (r2 += 4294967296), r2;
        }
        function p(e2, t2) {
          var r2 = o(e2, t2, 1) ^ o(e2, t2, 8) ^ a(e2, t2, 7);
          return r2 < 0 && (r2 += 4294967296), r2;
        }
        function v(e2, t2) {
          var r2 = s(e2, t2, 1) ^ s(e2, t2, 8) ^ u(e2, t2, 7);
          return r2 < 0 && (r2 += 4294967296), r2;
        }
        function y(e2, t2) {
          var r2 = o(e2, t2, 19) ^ o(t2, e2, 29) ^ a(e2, t2, 6);
          return r2 < 0 && (r2 += 4294967296), r2;
        }
        function m(e2, t2) {
          var r2 = s(e2, t2, 19) ^ s(t2, e2, 29) ^ u(e2, t2, 6);
          return r2 < 0 && (r2 += 4294967296), r2;
        }
        n.inherits(f2, l), (t.exports = f2).blockSize = 1024, f2.outSize = 512, f2.hmacStrength = 192, f2.padLength = 128, f2.prototype._prepareBlock = function(e2, t2) {
          for (var r2 = this.W, n2 = 0; n2 < 32; n2++)
            r2[n2] = e2[t2 + n2];
          for (; n2 < r2.length; n2 += 2) {
            var i2 = y(r2[n2 - 4], r2[n2 - 3]), o2 = m(r2[n2 - 4], r2[n2 - 3]), s2 = r2[n2 - 14], a2 = r2[n2 - 13], u2 = p(r2[n2 - 30], r2[n2 - 29]), l2 = v(r2[n2 - 30], r2[n2 - 29]), h2 = r2[n2 - 32], f3 = r2[n2 - 31];
            r2[n2] = c(i2, o2, s2, a2, u2, l2, h2, f3), r2[n2 + 1] = d(i2, o2, s2, a2, u2, l2, h2, f3);
          }
        }, f2.prototype._update = function(e2, t2) {
          this._prepareBlock(e2, t2);
          var r2 = this.W, n2 = this.h[0], i2 = this.h[1], o2 = this.h[2], s2 = this.h[3], a2 = this.h[4], u2 = this.h[5], l2 = this.h[6], h2 = this.h[7], f3 = this.h[8], c2 = this.h[9], d2 = this.h[10], p2 = this.h[11], v2 = this.h[12], y2 = this.h[13], m2 = this.h[14], g = this.h[15];
          C(this.k.length === r2.length);
          for (var b = 0; b < r2.length; b += 2) {
            var w = m2, _ = g, M = q(f3, c2), A = W(f3, c2), E = j(f3, c2, d2, p2, v2), S = G(f3, c2, d2, p2, v2, y2), k = this.k[b], N = this.k[b + 1], x = r2[b], P = r2[b + 1], I = U(w, _, M, A, E, S, k, N, x, P), T = F(w, _, M, A, E, S, k, N, x, P);
            w = V(n2, i2), _ = K(n2, i2), M = H(n2, i2, o2, s2, a2), A = z(n2, i2, o2, s2, a2, u2);
            var R = D(w, _, M, A), O = B(w, _, M, A);
            m2 = v2, g = y2, v2 = d2, y2 = p2, d2 = f3, p2 = c2, f3 = D(l2, h2, I, T), c2 = B(h2, h2, I, T), l2 = a2, h2 = u2, a2 = o2, u2 = s2, o2 = n2, s2 = i2, n2 = D(I, T, R, O), i2 = B(I, T, R, O);
          }
          L(this.h, 0, n2, i2), L(this.h, 2, o2, s2), L(this.h, 4, a2, u2), L(this.h, 6, l2, h2), L(this.h, 8, f3, c2), L(this.h, 10, d2, p2), L(this.h, 12, v2, y2), L(this.h, 14, m2, g);
        }, f2.prototype._digest = function(e2) {
          return e2 === "hex" ? n.toHex32(this.h, "big") : n.split32(this.h, "big");
        };
      }, { "../common": 27, "../utils": 37, "minimalistic-assert": 41 }], 36: [function(e, t, r) {
        "use strict";
        var n = e("../utils").rotr32;
        function i(e2, t2, r2) {
          return e2 & t2 ^ ~e2 & r2;
        }
        function o(e2, t2, r2) {
          return e2 & t2 ^ e2 & r2 ^ t2 & r2;
        }
        function s(e2, t2, r2) {
          return e2 ^ t2 ^ r2;
        }
        r.ft_1 = function(e2, t2, r2, n2) {
          return e2 === 0 ? i(t2, r2, n2) : e2 === 1 || e2 === 3 ? s(t2, r2, n2) : e2 === 2 ? o(t2, r2, n2) : void 0;
        }, r.ch32 = i, r.maj32 = o, r.p32 = s, r.s0_256 = function(e2) {
          return n(e2, 2) ^ n(e2, 13) ^ n(e2, 22);
        }, r.s1_256 = function(e2) {
          return n(e2, 6) ^ n(e2, 11) ^ n(e2, 25);
        }, r.g0_256 = function(e2) {
          return n(e2, 7) ^ n(e2, 18) ^ e2 >>> 3;
        }, r.g1_256 = function(e2) {
          return n(e2, 17) ^ n(e2, 19) ^ e2 >>> 10;
        };
      }, { "../utils": 37 }], 37: [function(e, t, r) {
        "use strict";
        var l = e("minimalistic-assert"), n = e("inherits");
        function o(e2) {
          return (e2 >>> 24 | e2 >>> 8 & 65280 | e2 << 8 & 16711680 | (255 & e2) << 24) >>> 0;
        }
        function i(e2) {
          return e2.length === 1 ? "0" + e2 : e2;
        }
        function s(e2) {
          return e2.length === 7 ? "0" + e2 : e2.length === 6 ? "00" + e2 : e2.length === 5 ? "000" + e2 : e2.length === 4 ? "0000" + e2 : e2.length === 3 ? "00000" + e2 : e2.length === 2 ? "000000" + e2 : e2.length === 1 ? "0000000" + e2 : e2;
        }
        r.inherits = n, r.toArray = function(e2, t2) {
          if (Array.isArray(e2))
            return e2.slice();
          if (!e2)
            return [];
          var r2 = [];
          if (typeof e2 == "string")
            if (t2) {
              if (t2 === "hex")
                for ((e2 = e2.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e2 = "0" + e2), n2 = 0; n2 < e2.length; n2 += 2)
                  r2.push(parseInt(e2[n2] + e2[n2 + 1], 16));
            } else
              for (var n2 = 0; n2 < e2.length; n2++) {
                var i2 = e2.charCodeAt(n2), o2 = i2 >> 8, s2 = 255 & i2;
                o2 ? r2.push(o2, s2) : r2.push(s2);
              }
          else
            for (n2 = 0; n2 < e2.length; n2++)
              r2[n2] = 0 | e2[n2];
          return r2;
        }, r.toHex = function(e2) {
          for (var t2 = "", r2 = 0; r2 < e2.length; r2++)
            t2 += i(e2[r2].toString(16));
          return t2;
        }, r.htonl = o, r.toHex32 = function(e2, t2) {
          for (var r2 = "", n2 = 0; n2 < e2.length; n2++) {
            var i2 = e2[n2];
            t2 === "little" && (i2 = o(i2)), r2 += s(i2.toString(16));
          }
          return r2;
        }, r.zero2 = i, r.zero8 = s, r.join32 = function(e2, t2, r2, n2) {
          var i2 = r2 - t2;
          l(i2 % 4 == 0);
          for (var o2 = new Array(i2 / 4), s2 = 0, a = t2; s2 < o2.length; s2++, a += 4) {
            var u;
            u = n2 === "big" ? e2[a] << 24 | e2[a + 1] << 16 | e2[a + 2] << 8 | e2[a + 3] : e2[a + 3] << 24 | e2[a + 2] << 16 | e2[a + 1] << 8 | e2[a], o2[s2] = u >>> 0;
          }
          return o2;
        }, r.split32 = function(e2, t2) {
          for (var r2 = new Array(4 * e2.length), n2 = 0, i2 = 0; n2 < e2.length; n2++, i2 += 4) {
            var o2 = e2[n2];
            t2 === "big" ? (r2[i2] = o2 >>> 24, r2[i2 + 1] = o2 >>> 16 & 255, r2[i2 + 2] = o2 >>> 8 & 255, r2[i2 + 3] = 255 & o2) : (r2[i2 + 3] = o2 >>> 24, r2[i2 + 2] = o2 >>> 16 & 255, r2[i2 + 1] = o2 >>> 8 & 255, r2[i2] = 255 & o2);
          }
          return r2;
        }, r.rotr32 = function(e2, t2) {
          return e2 >>> t2 | e2 << 32 - t2;
        }, r.rotl32 = function(e2, t2) {
          return e2 << t2 | e2 >>> 32 - t2;
        }, r.sum32 = function(e2, t2) {
          return e2 + t2 >>> 0;
        }, r.sum32_3 = function(e2, t2, r2) {
          return e2 + t2 + r2 >>> 0;
        }, r.sum32_4 = function(e2, t2, r2, n2) {
          return e2 + t2 + r2 + n2 >>> 0;
        }, r.sum32_5 = function(e2, t2, r2, n2, i2) {
          return e2 + t2 + r2 + n2 + i2 >>> 0;
        }, r.sum64 = function(e2, t2, r2, n2) {
          var i2 = e2[t2], o2 = n2 + e2[t2 + 1] >>> 0, s2 = (o2 < n2 ? 1 : 0) + r2 + i2;
          e2[t2] = s2 >>> 0, e2[t2 + 1] = o2;
        }, r.sum64_hi = function(e2, t2, r2, n2) {
          return (t2 + n2 >>> 0 < t2 ? 1 : 0) + e2 + r2 >>> 0;
        }, r.sum64_lo = function(e2, t2, r2, n2) {
          return t2 + n2 >>> 0;
        }, r.sum64_4_hi = function(e2, t2, r2, n2, i2, o2, s2, a) {
          var u = 0, l2 = t2;
          return u += (l2 = l2 + n2 >>> 0) < t2 ? 1 : 0, u += (l2 = l2 + o2 >>> 0) < o2 ? 1 : 0, e2 + r2 + i2 + s2 + (u += (l2 = l2 + a >>> 0) < a ? 1 : 0) >>> 0;
        }, r.sum64_4_lo = function(e2, t2, r2, n2, i2, o2, s2, a) {
          return t2 + n2 + o2 + a >>> 0;
        }, r.sum64_5_hi = function(e2, t2, r2, n2, i2, o2, s2, a, u, l2) {
          var h = 0, f2 = t2;
          return h += (f2 = f2 + n2 >>> 0) < t2 ? 1 : 0, h += (f2 = f2 + o2 >>> 0) < o2 ? 1 : 0, h += (f2 = f2 + a >>> 0) < a ? 1 : 0, e2 + r2 + i2 + s2 + u + (h += (f2 = f2 + l2 >>> 0) < l2 ? 1 : 0) >>> 0;
        }, r.sum64_5_lo = function(e2, t2, r2, n2, i2, o2, s2, a, u, l2) {
          return t2 + n2 + o2 + a + l2 >>> 0;
        }, r.rotr64_hi = function(e2, t2, r2) {
          return (t2 << 32 - r2 | e2 >>> r2) >>> 0;
        }, r.rotr64_lo = function(e2, t2, r2) {
          return (e2 << 32 - r2 | t2 >>> r2) >>> 0;
        }, r.shr64_hi = function(e2, t2, r2) {
          return e2 >>> r2;
        }, r.shr64_lo = function(e2, t2, r2) {
          return (e2 << 32 - r2 | t2 >>> r2) >>> 0;
        };
      }, { inherits: 39, "minimalistic-assert": 41 }], 38: [function(e, t, r) {
        "use strict";
        var n = e("hash.js"), s = e("minimalistic-crypto-utils"), i = e("minimalistic-assert");
        function o(e2) {
          if (!(this instanceof o))
            return new o(e2);
          this.hash = e2.hash, this.predResist = !!e2.predResist, this.outLen = this.hash.outSize, this.minEntropy = e2.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
          var t2 = s.toArray(e2.entropy, e2.entropyEnc || "hex"), r2 = s.toArray(e2.nonce, e2.nonceEnc || "hex"), n2 = s.toArray(e2.pers, e2.persEnc || "hex");
          i(t2.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t2, r2, n2);
        }
        (t.exports = o).prototype._init = function(e2, t2, r2) {
          var n2 = e2.concat(t2).concat(r2);
          this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
          for (var i2 = 0; i2 < this.V.length; i2++)
            this.K[i2] = 0, this.V[i2] = 1;
          this._update(n2), this._reseed = 1, this.reseedInterval = 281474976710656;
        }, o.prototype._hmac = function() {
          return new n.hmac(this.hash, this.K);
        }, o.prototype._update = function(e2) {
          var t2 = this._hmac().update(this.V).update([0]);
          e2 && (t2 = t2.update(e2)), this.K = t2.digest(), this.V = this._hmac().update(this.V).digest(), e2 && (this.K = this._hmac().update(this.V).update([1]).update(e2).digest(), this.V = this._hmac().update(this.V).digest());
        }, o.prototype.reseed = function(e2, t2, r2, n2) {
          typeof t2 != "string" && (n2 = r2, r2 = t2, t2 = null), e2 = s.toArray(e2, t2), r2 = s.toArray(r2, n2), i(e2.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(e2.concat(r2 || [])), this._reseed = 1;
        }, o.prototype.generate = function(e2, t2, r2, n2) {
          if (this._reseed > this.reseedInterval)
            throw new Error("Reseed is required");
          typeof t2 != "string" && (n2 = r2, r2 = t2, t2 = null), r2 && (r2 = s.toArray(r2, n2 || "hex"), this._update(r2));
          for (var i2 = []; i2.length < e2; )
            this.V = this._hmac().update(this.V).digest(), i2 = i2.concat(this.V);
          var o2 = i2.slice(0, e2);
          return this._update(r2), this._reseed++, s.encode(o2, t2);
        };
      }, { "hash.js": 26, "minimalistic-assert": 41, "minimalistic-crypto-utils": 42 }], 39: [function(e, t, r) {
        typeof Object.create == "function" ? t.exports = function(e2, t2) {
          t2 && (e2.super_ = t2, e2.prototype = Object.create(t2.prototype, { constructor: { value: e2, enumerable: false, writable: true, configurable: true } }));
        } : t.exports = function(e2, t2) {
          if (t2) {
            let r3 = function() {
            };
            var r2 = r3;
            e2.super_ = t2;
            r3.prototype = t2.prototype, e2.prototype = new r3(), e2.prototype.constructor = e2;
          }
        };
      }, {}], 40: [function(e, _, t) {
        (function(b, w) {
          !function() {
            "use strict";
            var e2 = typeof window == "object" ? window : {};
            !e2.JS_SHA3_NO_NODE_JS && typeof b == "object" && b.versions && b.versions.node && (e2 = w);
            for (var t2 = !e2.JS_SHA3_NO_COMMON_JS && typeof _ == "object" && _.exports, u = "0123456789abcdef".split(""), h = [0, 8, 16, 24], he = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648], r = [224, 256, 384, 512], o = ["hex", "buffer", "arrayBuffer", "array"], s = function(t3, r2, n2) {
              return function(e3) {
                return new m(t3, r2, t3).update(e3)[n2]();
              };
            }, a = function(r2, n2, i2) {
              return function(e3, t3) {
                return new m(r2, n2, t3).update(e3)[i2]();
              };
            }, n = function(e3, t3) {
              var r2 = s(e3, t3, "hex");
              r2.create = function() {
                return new m(e3, t3, e3);
              }, r2.update = function(e4) {
                return r2.create().update(e4);
              };
              for (var n2 = 0; n2 < o.length; ++n2) {
                var i2 = o[n2];
                r2[i2] = s(e3, t3, i2);
              }
              return r2;
            }, i = [{ name: "keccak", padding: [1, 256, 65536, 16777216], bits: r, createMethod: n }, { name: "sha3", padding: [6, 1536, 393216, 100663296], bits: r, createMethod: n }, { name: "shake", padding: [31, 7936, 2031616, 520093696], bits: [128, 256], createMethod: function(t3, r2) {
              var n2 = a(t3, r2, "hex");
              n2.create = function(e4) {
                return new m(t3, r2, e4);
              }, n2.update = function(e4, t4) {
                return n2.create(t4).update(e4);
              };
              for (var e3 = 0; e3 < o.length; ++e3) {
                var i2 = o[e3];
                n2[i2] = a(t3, r2, i2);
              }
              return n2;
            } }], l = {}, f2 = [], c = 0; c < i.length; ++c)
              for (var d = i[c], p = d.bits, v = 0; v < p.length; ++v) {
                var y = d.name + "_" + p[v];
                f2.push(y), l[y] = d.createMethod(p[v], d.padding);
              }
            function m(e3, t3, r2) {
              this.blocks = [], this.s = [], this.padding = t3, this.outputBits = r2, this.reset = true, this.block = 0, this.start = 0, this.blockCount = 1600 - (e3 << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r2 >> 5, this.extraBytes = (31 & r2) >> 3;
              for (var n2 = 0; n2 < 50; ++n2)
                this.s[n2] = 0;
            }
            m.prototype.update = function(e3) {
              var t3 = typeof e3 != "string";
              t3 && e3.constructor === ArrayBuffer && (e3 = new Uint8Array(e3));
              for (var r2, n2, i2 = e3.length, o2 = this.blocks, s2 = this.byteCount, a2 = this.blockCount, u2 = 0, l2 = this.s; u2 < i2; ) {
                if (this.reset)
                  for (this.reset = false, o2[0] = this.block, r2 = 1; r2 < a2 + 1; ++r2)
                    o2[r2] = 0;
                if (t3)
                  for (r2 = this.start; u2 < i2 && r2 < s2; ++u2)
                    o2[r2 >> 2] |= e3[u2] << h[3 & r2++];
                else
                  for (r2 = this.start; u2 < i2 && r2 < s2; ++u2)
                    (n2 = e3.charCodeAt(u2)) < 128 ? o2[r2 >> 2] |= n2 << h[3 & r2++] : (n2 < 2048 ? o2[r2 >> 2] |= (192 | n2 >> 6) << h[3 & r2++] : (n2 < 55296 || 57344 <= n2 ? o2[r2 >> 2] |= (224 | n2 >> 12) << h[3 & r2++] : (n2 = 65536 + ((1023 & n2) << 10 | 1023 & e3.charCodeAt(++u2)), o2[r2 >> 2] |= (240 | n2 >> 18) << h[3 & r2++], o2[r2 >> 2] |= (128 | n2 >> 12 & 63) << h[3 & r2++]), o2[r2 >> 2] |= (128 | n2 >> 6 & 63) << h[3 & r2++]), o2[r2 >> 2] |= (128 | 63 & n2) << h[3 & r2++]);
                if (s2 <= (this.lastByteIndex = r2)) {
                  for (this.start = r2 - s2, this.block = o2[a2], r2 = 0; r2 < a2; ++r2)
                    l2[r2] ^= o2[r2];
                  g(l2), this.reset = true;
                } else
                  this.start = r2;
              }
              return this;
            }, m.prototype.finalize = function() {
              var e3 = this.blocks, t3 = this.lastByteIndex, r2 = this.blockCount, n2 = this.s;
              if (e3[t3 >> 2] |= this.padding[3 & t3], this.lastByteIndex === this.byteCount)
                for (e3[0] = e3[r2], t3 = 1; t3 < r2 + 1; ++t3)
                  e3[t3] = 0;
              for (e3[r2 - 1] |= 2147483648, t3 = 0; t3 < r2; ++t3)
                n2[t3] ^= e3[t3];
              g(n2);
            }, m.prototype.toString = m.prototype.hex = function() {
              this.finalize();
              for (var e3, t3 = this.blockCount, r2 = this.s, n2 = this.outputBlocks, i2 = this.extraBytes, o2 = 0, s2 = 0, a2 = ""; s2 < n2; ) {
                for (o2 = 0; o2 < t3 && s2 < n2; ++o2, ++s2)
                  e3 = r2[o2], a2 += u[e3 >> 4 & 15] + u[15 & e3] + u[e3 >> 12 & 15] + u[e3 >> 8 & 15] + u[e3 >> 20 & 15] + u[e3 >> 16 & 15] + u[e3 >> 28 & 15] + u[e3 >> 24 & 15];
                s2 % t3 == 0 && (g(r2), o2 = 0);
              }
              return i2 && (e3 = r2[o2], 0 < i2 && (a2 += u[e3 >> 4 & 15] + u[15 & e3]), 1 < i2 && (a2 += u[e3 >> 12 & 15] + u[e3 >> 8 & 15]), 2 < i2 && (a2 += u[e3 >> 20 & 15] + u[e3 >> 16 & 15])), a2;
            }, m.prototype.buffer = m.prototype.arrayBuffer = function() {
              this.finalize();
              var e3, t3 = this.blockCount, r2 = this.s, n2 = this.outputBlocks, i2 = this.extraBytes, o2 = 0, s2 = 0, a2 = this.outputBits >> 3;
              e3 = i2 ? new ArrayBuffer(n2 + 1 << 2) : new ArrayBuffer(a2);
              for (var u2 = new Uint32Array(e3); s2 < n2; ) {
                for (o2 = 0; o2 < t3 && s2 < n2; ++o2, ++s2)
                  u2[s2] = r2[o2];
                s2 % t3 == 0 && g(r2);
              }
              return i2 && (u2[o2] = r2[o2], e3 = e3.slice(0, a2)), e3;
            }, m.prototype.digest = m.prototype.array = function() {
              this.finalize();
              for (var e3, t3, r2 = this.blockCount, n2 = this.s, i2 = this.outputBlocks, o2 = this.extraBytes, s2 = 0, a2 = 0, u2 = []; a2 < i2; ) {
                for (s2 = 0; s2 < r2 && a2 < i2; ++s2, ++a2)
                  e3 = a2 << 2, t3 = n2[s2], u2[e3] = 255 & t3, u2[e3 + 1] = t3 >> 8 & 255, u2[e3 + 2] = t3 >> 16 & 255, u2[e3 + 3] = t3 >> 24 & 255;
                a2 % r2 == 0 && g(n2);
              }
              return o2 && (e3 = a2 << 2, t3 = n2[s2], 0 < o2 && (u2[e3] = 255 & t3), 1 < o2 && (u2[e3 + 1] = t3 >> 8 & 255), 2 < o2 && (u2[e3 + 2] = t3 >> 16 & 255)), u2;
            };
            var g = function(e3) {
              var t3, r2, n2, i2, o2, s2, a2, u2, l2, h2, f3, c2, d2, p2, v2, y2, m2, g2, b2, w2, _2, M, A, E, S, k, N, x, P, I, T, R, O, C, L, D, B, U, F, j, G, H, z, V, K, q, W, Z, J, X, $, Q, Y, ee, te, re, ne, ie, oe, se, ae, ue, le;
              for (n2 = 0; n2 < 48; n2 += 2)
                i2 = e3[0] ^ e3[10] ^ e3[20] ^ e3[30] ^ e3[40], o2 = e3[1] ^ e3[11] ^ e3[21] ^ e3[31] ^ e3[41], s2 = e3[2] ^ e3[12] ^ e3[22] ^ e3[32] ^ e3[42], a2 = e3[3] ^ e3[13] ^ e3[23] ^ e3[33] ^ e3[43], u2 = e3[4] ^ e3[14] ^ e3[24] ^ e3[34] ^ e3[44], l2 = e3[5] ^ e3[15] ^ e3[25] ^ e3[35] ^ e3[45], h2 = e3[6] ^ e3[16] ^ e3[26] ^ e3[36] ^ e3[46], f3 = e3[7] ^ e3[17] ^ e3[27] ^ e3[37] ^ e3[47], t3 = (c2 = e3[8] ^ e3[18] ^ e3[28] ^ e3[38] ^ e3[48]) ^ (s2 << 1 | a2 >>> 31), r2 = (d2 = e3[9] ^ e3[19] ^ e3[29] ^ e3[39] ^ e3[49]) ^ (a2 << 1 | s2 >>> 31), e3[0] ^= t3, e3[1] ^= r2, e3[10] ^= t3, e3[11] ^= r2, e3[20] ^= t3, e3[21] ^= r2, e3[30] ^= t3, e3[31] ^= r2, e3[40] ^= t3, e3[41] ^= r2, t3 = i2 ^ (u2 << 1 | l2 >>> 31), r2 = o2 ^ (l2 << 1 | u2 >>> 31), e3[2] ^= t3, e3[3] ^= r2, e3[12] ^= t3, e3[13] ^= r2, e3[22] ^= t3, e3[23] ^= r2, e3[32] ^= t3, e3[33] ^= r2, e3[42] ^= t3, e3[43] ^= r2, t3 = s2 ^ (h2 << 1 | f3 >>> 31), r2 = a2 ^ (f3 << 1 | h2 >>> 31), e3[4] ^= t3, e3[5] ^= r2, e3[14] ^= t3, e3[15] ^= r2, e3[24] ^= t3, e3[25] ^= r2, e3[34] ^= t3, e3[35] ^= r2, e3[44] ^= t3, e3[45] ^= r2, t3 = u2 ^ (c2 << 1 | d2 >>> 31), r2 = l2 ^ (d2 << 1 | c2 >>> 31), e3[6] ^= t3, e3[7] ^= r2, e3[16] ^= t3, e3[17] ^= r2, e3[26] ^= t3, e3[27] ^= r2, e3[36] ^= t3, e3[37] ^= r2, e3[46] ^= t3, e3[47] ^= r2, t3 = h2 ^ (i2 << 1 | o2 >>> 31), r2 = f3 ^ (o2 << 1 | i2 >>> 31), e3[8] ^= t3, e3[9] ^= r2, e3[18] ^= t3, e3[19] ^= r2, e3[28] ^= t3, e3[29] ^= r2, e3[38] ^= t3, e3[39] ^= r2, e3[48] ^= t3, e3[49] ^= r2, p2 = e3[0], v2 = e3[1], q = e3[11] << 4 | e3[10] >>> 28, W = e3[10] << 4 | e3[11] >>> 28, x = e3[20] << 3 | e3[21] >>> 29, P = e3[21] << 3 | e3[20] >>> 29, se = e3[31] << 9 | e3[30] >>> 23, ae = e3[30] << 9 | e3[31] >>> 23, H = e3[40] << 18 | e3[41] >>> 14, z = e3[41] << 18 | e3[40] >>> 14, C = e3[2] << 1 | e3[3] >>> 31, L = e3[3] << 1 | e3[2] >>> 31, y2 = e3[13] << 12 | e3[12] >>> 20, m2 = e3[12] << 12 | e3[13] >>> 20, Z = e3[22] << 10 | e3[23] >>> 22, J = e3[23] << 10 | e3[22] >>> 22, I = e3[33] << 13 | e3[32] >>> 19, T = e3[32] << 13 | e3[33] >>> 19, ue = e3[42] << 2 | e3[43] >>> 30, le = e3[43] << 2 | e3[42] >>> 30, ee = e3[5] << 30 | e3[4] >>> 2, te = e3[4] << 30 | e3[5] >>> 2, D = e3[14] << 6 | e3[15] >>> 26, B = e3[15] << 6 | e3[14] >>> 26, g2 = e3[25] << 11 | e3[24] >>> 21, b2 = e3[24] << 11 | e3[25] >>> 21, X = e3[34] << 15 | e3[35] >>> 17, $ = e3[35] << 15 | e3[34] >>> 17, R = e3[45] << 29 | e3[44] >>> 3, O = e3[44] << 29 | e3[45] >>> 3, E = e3[6] << 28 | e3[7] >>> 4, S = e3[7] << 28 | e3[6] >>> 4, re = e3[17] << 23 | e3[16] >>> 9, ne = e3[16] << 23 | e3[17] >>> 9, U = e3[26] << 25 | e3[27] >>> 7, F = e3[27] << 25 | e3[26] >>> 7, w2 = e3[36] << 21 | e3[37] >>> 11, _2 = e3[37] << 21 | e3[36] >>> 11, Q = e3[47] << 24 | e3[46] >>> 8, Y = e3[46] << 24 | e3[47] >>> 8, V = e3[8] << 27 | e3[9] >>> 5, K = e3[9] << 27 | e3[8] >>> 5, k = e3[18] << 20 | e3[19] >>> 12, N = e3[19] << 20 | e3[18] >>> 12, ie = e3[29] << 7 | e3[28] >>> 25, oe = e3[28] << 7 | e3[29] >>> 25, j = e3[38] << 8 | e3[39] >>> 24, G = e3[39] << 8 | e3[38] >>> 24, M = e3[48] << 14 | e3[49] >>> 18, A = e3[49] << 14 | e3[48] >>> 18, e3[0] = p2 ^ ~y2 & g2, e3[1] = v2 ^ ~m2 & b2, e3[10] = E ^ ~k & x, e3[11] = S ^ ~N & P, e3[20] = C ^ ~D & U, e3[21] = L ^ ~B & F, e3[30] = V ^ ~q & Z, e3[31] = K ^ ~W & J, e3[40] = ee ^ ~re & ie, e3[41] = te ^ ~ne & oe, e3[2] = y2 ^ ~g2 & w2, e3[3] = m2 ^ ~b2 & _2, e3[12] = k ^ ~x & I, e3[13] = N ^ ~P & T, e3[22] = D ^ ~U & j, e3[23] = B ^ ~F & G, e3[32] = q ^ ~Z & X, e3[33] = W ^ ~J & $, e3[42] = re ^ ~ie & se, e3[43] = ne ^ ~oe & ae, e3[4] = g2 ^ ~w2 & M, e3[5] = b2 ^ ~_2 & A, e3[14] = x ^ ~I & R, e3[15] = P ^ ~T & O, e3[24] = U ^ ~j & H, e3[25] = F ^ ~G & z, e3[34] = Z ^ ~X & Q, e3[35] = J ^ ~$ & Y, e3[44] = ie ^ ~se & ue, e3[45] = oe ^ ~ae & le, e3[6] = w2 ^ ~M & p2, e3[7] = _2 ^ ~A & v2, e3[16] = I ^ ~R & E, e3[17] = T ^ ~O & S, e3[26] = j ^ ~H & C, e3[27] = G ^ ~z & L, e3[36] = X ^ ~Q & V, e3[37] = $ ^ ~Y & K, e3[46] = se ^ ~ue & ee, e3[47] = ae ^ ~le & te, e3[8] = M ^ ~p2 & y2, e3[9] = A ^ ~v2 & m2, e3[18] = R ^ ~E & k, e3[19] = O ^ ~S & N, e3[28] = H ^ ~C & D, e3[29] = z ^ ~L & B, e3[38] = Q ^ ~V & q, e3[39] = Y ^ ~K & W, e3[48] = ue ^ ~ee & re, e3[49] = le ^ ~te & ne, e3[0] ^= he[n2], e3[1] ^= he[n2 + 1];
            };
            if (t2)
              _.exports = l;
            else
              for (c = 0; c < f2.length; ++c)
                e2[f2[c]] = l[f2[c]];
          }();
        }).call(this, e("_process"), typeof global != "undefined" ? global : typeof self != "undefined" ? self : typeof window != "undefined" ? window : {});
      }, { _process: 43 }], 41: [function(e, t, r) {
        function n(e2, t2) {
          if (!e2)
            throw new Error(t2 || "Assertion failed");
        }
        (t.exports = n).equal = function(e2, t2, r2) {
          if (e2 != t2)
            throw new Error(r2 || "Assertion failed: " + e2 + " != " + t2);
        };
      }, {}], 42: [function(e, t, r) {
        "use strict";
        var n = r;
        function i(e2) {
          return e2.length === 1 ? "0" + e2 : e2;
        }
        function o(e2) {
          for (var t2 = "", r2 = 0; r2 < e2.length; r2++)
            t2 += i(e2[r2].toString(16));
          return t2;
        }
        n.toArray = function(e2, t2) {
          if (Array.isArray(e2))
            return e2.slice();
          if (!e2)
            return [];
          var r2 = [];
          if (typeof e2 != "string") {
            for (var n2 = 0; n2 < e2.length; n2++)
              r2[n2] = 0 | e2[n2];
            return r2;
          }
          if (t2 === "hex") {
            (e2 = e2.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e2 = "0" + e2);
            for (n2 = 0; n2 < e2.length; n2 += 2)
              r2.push(parseInt(e2[n2] + e2[n2 + 1], 16));
          } else
            for (n2 = 0; n2 < e2.length; n2++) {
              var i2 = e2.charCodeAt(n2), o2 = i2 >> 8, s = 255 & i2;
              o2 ? r2.push(o2, s) : r2.push(s);
            }
          return r2;
        }, n.zero2 = i, n.toHex = o, n.encode = function(e2, t2) {
          return t2 === "hex" ? o(e2) : e2;
        };
      }, {}], 43: [function(e, t, r) {
        t.exports = { browser: true };
      }, {}], 44: [function(e, r, o) {
        (function(n) {
          "use strict";
          function l(e3) {
            var y = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298], m = 1779033703, g = 3144134277, b = 1013904242, w = 2773480762, _ = 1359893119, M = 2600822924, A = 528734635, E = 1541459225, S = new Array(64);
            function t2(e4) {
              for (var t3 = 0, r3 = e4.length; 64 <= r3; ) {
                var n3, i3, o3, s3, a2, u = m, l2 = g, h = b, f2 = w, c = _, d = M, p = A, v = E;
                for (i3 = 0; i3 < 16; i3++)
                  o3 = t3 + 4 * i3, S[i3] = (255 & e4[o3]) << 24 | (255 & e4[o3 + 1]) << 16 | (255 & e4[o3 + 2]) << 8 | 255 & e4[o3 + 3];
                for (i3 = 16; i3 < 64; i3++)
                  s3 = ((n3 = S[i3 - 2]) >>> 17 | n3 << 15) ^ (n3 >>> 19 | n3 << 13) ^ n3 >>> 10, a2 = ((n3 = S[i3 - 15]) >>> 7 | n3 << 25) ^ (n3 >>> 18 | n3 << 14) ^ n3 >>> 3, S[i3] = (s3 + S[i3 - 7] | 0) + (a2 + S[i3 - 16] | 0) | 0;
                for (i3 = 0; i3 < 64; i3++)
                  s3 = (((c >>> 6 | c << 26) ^ (c >>> 11 | c << 21) ^ (c >>> 25 | c << 7)) + (c & d ^ ~c & p) | 0) + (v + (y[i3] + S[i3] | 0) | 0) | 0, a2 = ((u >>> 2 | u << 30) ^ (u >>> 13 | u << 19) ^ (u >>> 22 | u << 10)) + (u & l2 ^ u & h ^ l2 & h) | 0, v = p, p = d, d = c, c = f2 + s3 | 0, f2 = h, h = l2, l2 = u, u = s3 + a2 | 0;
                m = m + u | 0, g = g + l2 | 0, b = b + h | 0, w = w + f2 | 0, _ = _ + c | 0, M = M + d | 0, A = A + p | 0, E = E + v | 0, t3 += 64, r3 -= 64;
              }
            }
            t2(e3);
            var r2, n2 = e3.length % 64, i2 = e3.length / 536870912 | 0, o2 = e3.length << 3, s2 = n2 < 56 ? 56 : 120, a = e3.slice(e3.length - n2, e3.length);
            for (a.push(128), r2 = 1 + n2; r2 < s2; r2++)
              a.push(0);
            return a.push(i2 >>> 24 & 255), a.push(i2 >>> 16 & 255), a.push(i2 >>> 8 & 255), a.push(i2 >>> 0 & 255), a.push(o2 >>> 24 & 255), a.push(o2 >>> 16 & 255), a.push(o2 >>> 8 & 255), a.push(o2 >>> 0 & 255), t2(a), [m >>> 24 & 255, m >>> 16 & 255, m >>> 8 & 255, m >>> 0 & 255, g >>> 24 & 255, g >>> 16 & 255, g >>> 8 & 255, g >>> 0 & 255, b >>> 24 & 255, b >>> 16 & 255, b >>> 8 & 255, b >>> 0 & 255, w >>> 24 & 255, w >>> 16 & 255, w >>> 8 & 255, w >>> 0 & 255, _ >>> 24 & 255, _ >>> 16 & 255, _ >>> 8 & 255, _ >>> 0 & 255, M >>> 24 & 255, M >>> 16 & 255, M >>> 8 & 255, M >>> 0 & 255, A >>> 24 & 255, A >>> 16 & 255, A >>> 8 & 255, A >>> 0 & 255, E >>> 24 & 255, E >>> 16 & 255, E >>> 8 & 255, E >>> 0 & 255];
          }
          function P(e3, t2, r2) {
            var n2;
            e3 = e3.length <= 64 ? e3 : l(e3);
            var i2 = 64 + t2.length + 4, o2 = new Array(i2), s2 = new Array(64), a = [];
            for (n2 = 0; n2 < 64; n2++)
              o2[n2] = 54;
            for (n2 = 0; n2 < e3.length; n2++)
              o2[n2] ^= e3[n2];
            for (n2 = 0; n2 < t2.length; n2++)
              o2[64 + n2] = t2[n2];
            for (n2 = i2 - 4; n2 < i2; n2++)
              o2[n2] = 0;
            for (n2 = 0; n2 < 64; n2++)
              s2[n2] = 92;
            for (n2 = 0; n2 < e3.length; n2++)
              s2[n2] ^= e3[n2];
            function u() {
              for (var e4 = i2 - 1; i2 - 4 <= e4; e4--) {
                if (o2[e4]++, o2[e4] <= 255)
                  return;
                o2[e4] = 0;
              }
            }
            for (; 32 <= r2; )
              u(), a = a.concat(l(s2.concat(l(o2)))), r2 -= 32;
            return 0 < r2 && (u(), a = a.concat(l(s2.concat(l(o2))).slice(0, r2))), a;
          }
          function I(e3, t2, r2, n2, i2) {
            var o2;
            for (R(e3, 16 * (2 * r2 - 1), i2, 0, 16), o2 = 0; o2 < 2 * r2; o2++)
              T(e3, 16 * o2, i2, 16), s(i2, n2), R(i2, 0, e3, t2 + 16 * o2, 16);
            for (o2 = 0; o2 < r2; o2++)
              R(e3, t2 + 2 * o2 * 16, e3, 16 * o2, 16);
            for (o2 = 0; o2 < r2; o2++)
              R(e3, t2 + 16 * (2 * o2 + 1), e3, 16 * (o2 + r2), 16);
          }
          function i(e3, t2) {
            return e3 << t2 | e3 >>> 32 - t2;
          }
          function s(e3, t2) {
            R(e3, 0, t2, 0, 16);
            for (var r2 = 8; 0 < r2; r2 -= 2)
              t2[4] ^= i(t2[0] + t2[12], 7), t2[8] ^= i(t2[4] + t2[0], 9), t2[12] ^= i(t2[8] + t2[4], 13), t2[0] ^= i(t2[12] + t2[8], 18), t2[9] ^= i(t2[5] + t2[1], 7), t2[13] ^= i(t2[9] + t2[5], 9), t2[1] ^= i(t2[13] + t2[9], 13), t2[5] ^= i(t2[1] + t2[13], 18), t2[14] ^= i(t2[10] + t2[6], 7), t2[2] ^= i(t2[14] + t2[10], 9), t2[6] ^= i(t2[2] + t2[14], 13), t2[10] ^= i(t2[6] + t2[2], 18), t2[3] ^= i(t2[15] + t2[11], 7), t2[7] ^= i(t2[3] + t2[15], 9), t2[11] ^= i(t2[7] + t2[3], 13), t2[15] ^= i(t2[11] + t2[7], 18), t2[1] ^= i(t2[0] + t2[3], 7), t2[2] ^= i(t2[1] + t2[0], 9), t2[3] ^= i(t2[2] + t2[1], 13), t2[0] ^= i(t2[3] + t2[2], 18), t2[6] ^= i(t2[5] + t2[4], 7), t2[7] ^= i(t2[6] + t2[5], 9), t2[4] ^= i(t2[7] + t2[6], 13), t2[5] ^= i(t2[4] + t2[7], 18), t2[11] ^= i(t2[10] + t2[9], 7), t2[8] ^= i(t2[11] + t2[10], 9), t2[9] ^= i(t2[8] + t2[11], 13), t2[10] ^= i(t2[9] + t2[8], 18), t2[12] ^= i(t2[15] + t2[14], 7), t2[13] ^= i(t2[12] + t2[15], 9), t2[14] ^= i(t2[13] + t2[12], 13), t2[15] ^= i(t2[14] + t2[13], 18);
            for (r2 = 0; r2 < 16; ++r2)
              e3[r2] += t2[r2];
          }
          function T(e3, t2, r2, n2) {
            for (var i2 = 0; i2 < n2; i2++)
              r2[i2] ^= e3[t2 + i2];
          }
          function R(e3, t2, r2, n2, i2) {
            for (; i2--; )
              r2[n2++] = e3[t2++];
          }
          function O(e3) {
            if (!e3 || typeof e3.length != "number")
              return false;
            for (var t2 = 0; t2 < e3.length; t2++) {
              if (typeof e3[t2] != "number")
                return false;
              var r2 = parseInt(e3[t2]);
              if (r2 != e3[t2] || r2 < 0 || 256 <= r2)
                return false;
            }
            return true;
          }
          function C(e3, t2) {
            var r2 = parseInt(e3);
            if (e3 != r2)
              throw new Error("invalid " + t2);
            return r2;
          }
          function e2(o2, e3, s2, a, u, l2, h) {
            if (!h)
              throw new Error("missing callback");
            if (s2 = C(s2, "N"), a = C(a, "r"), u = C(u, "p"), l2 = C(l2, "dkLen"), s2 === 0 || (s2 & s2 - 1) != 0)
              throw new Error("N must be power of 2");
            if (L / 128 / a < s2)
              throw new Error("N too large");
            if (L / 128 / u < a)
              throw new Error("r too large");
            if (!O(o2))
              throw new Error("password must be an array or buffer");
            if (o2 = Array.prototype.slice.call(o2), !O(e3))
              throw new Error("salt must be an array or buffer");
            e3 = Array.prototype.slice.call(e3);
            for (var f2 = P(o2, e3, 128 * u * a), c = new Uint32Array(32 * u * a), t2 = 0; t2 < c.length; t2++) {
              var r2 = 4 * t2;
              c[t2] = (255 & f2[3 + r2]) << 24 | (255 & f2[2 + r2]) << 16 | (255 & f2[1 + r2]) << 8 | (255 & f2[0 + r2]) << 0;
            }
            var d, p, v = new Uint32Array(64 * a), y = new Uint32Array(32 * a * s2), m = 32 * a, g = new Uint32Array(16), b = new Uint32Array(16), w = u * s2 * 2, _ = 0, M = null, A = false, E = 0, S = 0, k = parseInt(1e3 / a), N = n !== void 0 ? n : setTimeout, x = function() {
              if (A)
                return h(new Error("cancelled"), _ / w);
              switch (E) {
                case 0:
                  R(c, p = 32 * S * a, v, 0, m), E = 1, d = 0;
                case 1:
                  k < (t3 = s2 - d) && (t3 = k);
                  for (var e4 = 0; e4 < t3; e4++)
                    R(v, 0, y, (d + e4) * m, m), I(v, m, a, g, b);
                  if (d += t3, _ += t3, (r3 = parseInt(1e3 * _ / w)) !== M) {
                    if (A = h(null, _ / w))
                      break;
                    M = r3;
                  }
                  if (d < s2)
                    break;
                  d = 0, E = 2;
                case 2:
                  var t3, r3;
                  k < (t3 = s2 - d) && (t3 = k);
                  for (e4 = 0; e4 < t3; e4++) {
                    var n2 = v[16 * (2 * a - 1)] & s2 - 1;
                    T(y, n2 * m, v, m), I(v, m, a, g, b);
                  }
                  if (d += t3, _ += t3, (r3 = parseInt(1e3 * _ / w)) !== M) {
                    if (A = h(null, _ / w))
                      break;
                    M = r3;
                  }
                  if (d < s2)
                    break;
                  if (R(v, 0, c, p, m), ++S < u) {
                    E = 0;
                    break;
                  }
                  f2 = [];
                  for (e4 = 0; e4 < c.length; e4++)
                    f2.push(c[e4] >> 0 & 255), f2.push(c[e4] >> 8 & 255), f2.push(c[e4] >> 16 & 255), f2.push(c[e4] >> 24 & 255);
                  var i2 = P(o2, f2, l2);
                  return h(null, 1, i2);
              }
              N(x);
            };
            x();
          }
          var t, L;
          t = this, L = 2147483647, o !== void 0 ? r.exports = e2 : t && (t.scrypt && (t._scrypt = t.scrypt), t.scrypt = e2);
        }).call(this, e("timers").setImmediate);
      }, { timers: 46 }], 45: [function(e, t, r) {
        (function(y, e2, t2) {
          !function(r2, n) {
            "use strict";
            if (!r2.setImmediate) {
              var e3, i, t3, o, s = 1, a = {}, u = false, l = r2.document, h = Object.getPrototypeOf && Object.getPrototypeOf(r2);
              h = h && h.setTimeout ? h : r2, e3 = {}.toString.call(r2.process) === "[object process]" ? function() {
                var e4 = f2(arguments);
                return y.nextTick(c(d, e4)), e4;
              } : function() {
                if (r2.postMessage && !r2.importScripts) {
                  var e4 = true, t4 = r2.onmessage;
                  return r2.onmessage = function() {
                    e4 = false;
                  }, r2.postMessage("", "*"), r2.onmessage = t4, e4;
                }
              }() ? (o = "setImmediate$" + Math.random() + "$", r2.addEventListener ? r2.addEventListener("message", v, false) : r2.attachEvent("onmessage", v), function() {
                var e4 = f2(arguments);
                return r2.postMessage(o + e4, "*"), e4;
              }) : r2.MessageChannel ? ((t3 = new MessageChannel()).port1.onmessage = function(e4) {
                d(e4.data);
              }, function() {
                var e4 = f2(arguments);
                return t3.port2.postMessage(e4), e4;
              }) : l && "onreadystatechange" in l.createElement("script") ? (i = l.documentElement, function() {
                var e4 = f2(arguments), t4 = l.createElement("script");
                return t4.onreadystatechange = function() {
                  d(e4), t4.onreadystatechange = null, i.removeChild(t4), t4 = null;
                }, i.appendChild(t4), e4;
              }) : function() {
                var e4 = f2(arguments);
                return setTimeout(c(d, e4), 0), e4;
              }, h.setImmediate = e3, h.clearImmediate = p;
            }
            function f2(e4) {
              return a[s] = c.apply(n, e4), s++;
            }
            function c(e4) {
              var t4 = [].slice.call(arguments, 1);
              return function() {
                typeof e4 == "function" ? e4.apply(n, t4) : new Function("" + e4)();
              };
            }
            function d(e4) {
              if (u)
                setTimeout(c(d, e4), 0);
              else {
                var t4 = a[e4];
                if (t4) {
                  u = true;
                  try {
                    t4();
                  } finally {
                    p(e4), u = false;
                  }
                }
              }
            }
            function p(e4) {
              delete a[e4];
            }
            function v(e4) {
              e4.source === r2 && typeof e4.data == "string" && e4.data.indexOf(o) === 0 && d(+e4.data.slice(o.length));
            }
          }(typeof self == "undefined" ? e2 === void 0 ? this : e2 : self);
        }).call(this, e("_process"), typeof global != "undefined" ? global : typeof self != "undefined" ? self : typeof window != "undefined" ? window : {}, e("timers").clearImmediate);
      }, { _process: 43, timers: 46 }], 46: [function(e, t, r) {
        (function(e2) {
          t.exports = { setImmediate: e2.setImmediate };
        }).call(this, typeof global != "undefined" ? global : typeof self != "undefined" ? self : typeof window != "undefined" ? window : {});
      }, {}], 47: [function(e, i, t) {
        (function(e2) {
          var t2;
          if (e2.crypto && crypto.getRandomValues) {
            var r = new Uint8Array(16);
            t2 = function() {
              return crypto.getRandomValues(r), r;
            };
          }
          if (!t2) {
            var n = new Array(16);
            t2 = function() {
              for (var e3, t3 = 0; t3 < 16; t3++)
                (3 & t3) == 0 && (e3 = 4294967296 * Math.random()), n[t3] = e3 >>> ((3 & t3) << 3) & 255;
              return n;
            };
          }
          i.exports = t2;
        }).call(this, typeof global != "undefined" ? global : typeof self != "undefined" ? self : typeof window != "undefined" ? window : {});
      }, {}], 48: [function(e, t, r) {
        for (var s = e("./rng"), i = [], o = {}, n = 0; n < 256; n++)
          i[n] = (n + 256).toString(16).substr(1), o[i[n]] = n;
        function d(e2, t2) {
          var r2 = t2 || 0, n2 = i;
          return n2[e2[r2++]] + n2[e2[r2++]] + n2[e2[r2++]] + n2[e2[r2++]] + "-" + n2[e2[r2++]] + n2[e2[r2++]] + "-" + n2[e2[r2++]] + n2[e2[r2++]] + "-" + n2[e2[r2++]] + n2[e2[r2++]] + "-" + n2[e2[r2++]] + n2[e2[r2++]] + n2[e2[r2++]] + n2[e2[r2++]] + n2[e2[r2++]] + n2[e2[r2++]];
        }
        var a = s(), p = [1 | a[0], a[1], a[2], a[3], a[4], a[5]], v = 16383 & (a[6] << 8 | a[7]), y = 0, m = 0;
        function u(e2, t2, r2) {
          var n2 = t2 && r2 || 0;
          typeof e2 == "string" && (t2 = e2 == "binary" ? new Array(16) : null, e2 = null);
          var i2 = (e2 = e2 || {}).random || (e2.rng || s)();
          if (i2[6] = 15 & i2[6] | 64, i2[8] = 63 & i2[8] | 128, t2)
            for (var o2 = 0; o2 < 16; o2++)
              t2[n2 + o2] = i2[o2];
          return t2 || d(i2);
        }
        var l = u;
        l.v1 = function(e2, t2, r2) {
          var n2 = t2 && r2 || 0, i2 = t2 || [], o2 = (e2 = e2 || {}).clockseq !== void 0 ? e2.clockseq : v, s2 = e2.msecs !== void 0 ? e2.msecs : new Date().getTime(), a2 = e2.nsecs !== void 0 ? e2.nsecs : m + 1, u2 = s2 - y + (a2 - m) / 1e4;
          if (u2 < 0 && e2.clockseq === void 0 && (o2 = o2 + 1 & 16383), (u2 < 0 || y < s2) && e2.nsecs === void 0 && (a2 = 0), 1e4 <= a2)
            throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
          y = s2, v = o2;
          var l2 = (1e4 * (268435455 & (s2 += 122192928e5)) + (m = a2)) % 4294967296;
          i2[n2++] = l2 >>> 24 & 255, i2[n2++] = l2 >>> 16 & 255, i2[n2++] = l2 >>> 8 & 255, i2[n2++] = 255 & l2;
          var h = s2 / 4294967296 * 1e4 & 268435455;
          i2[n2++] = h >>> 8 & 255, i2[n2++] = 255 & h, i2[n2++] = h >>> 24 & 15 | 16, i2[n2++] = h >>> 16 & 255, i2[n2++] = o2 >>> 8 | 128, i2[n2++] = 255 & o2;
          for (var f2 = e2.node || p, c = 0; c < 6; c++)
            i2[n2 + c] = f2[c];
          return t2 || d(i2);
        }, l.v4 = u, l.parse = function(e2, t2, r2) {
          var n2 = t2 && r2 || 0, i2 = 0;
          for (t2 = t2 || [], e2.toLowerCase().replace(/[0-9a-f]{2}/g, function(e3) {
            i2 < 16 && (t2[n2 + i2++] = o[e3]);
          }); i2 < 16; )
            t2[n2 + i2++] = 0;
          return t2;
        }, l.unparse = d, t.exports = l;
      }, { "./rng": 47 }], 49: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        try {
          t.exports.XMLHttpRequest = XMLHttpRequest;
        } catch (e2) {
          console.log("Warning: XMLHttpRequest is not defined"), t.exports.XMLHttpRequest = null;
        }
      }, {}], 50: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        var n = e("../utils/properties"), i = (o.isProvider = function(e2) {
          return n.isType(e2, "Provider");
        }, o);
        function o() {
          n.setType(this, "Provider");
        }
        r.Provider = i;
      }, { "../utils/properties": 74 }], 51: [function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e2, t2) {
          e2.__proto__ = t2;
        } || function(e2, t2) {
          for (var r2 in t2)
            t2.hasOwnProperty(r2) && (e2[r2] = t2[r2]);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var s = e("../utils/address"), a = e("../utils/bignumber"), u = e("../utils/bytes"), l = e("../constants"), h = e("../utils/hash"), f2 = e("../utils/networks"), c = e("../utils/properties"), d = e("../utils/rlp"), p = e("../utils/transaction"), v = e("../utils/utf8"), y = e("../utils/web"), m = o(e("../errors")), g = e("./abstract-provider");
        function b(e2, t2) {
          var r2 = {};
          for (var n2 in e2)
            try {
              var i2 = e2[n2](t2[n2]);
              i2 !== void 0 && (r2[n2] = i2);
            } catch (e3) {
              throw e3.checkKey = n2, e3.checkValue = t2[n2], e3;
            }
          return r2;
        }
        function w(t2, r2) {
          return function(e2) {
            return e2 == null ? r2 : t2(e2);
          };
        }
        function _(r2) {
          return function(e2) {
            if (!Array.isArray(e2))
              throw new Error("not an array");
            var t2 = [];
            return e2.forEach(function(e3) {
              t2.push(r2(e3));
            }), t2;
          };
        }
        function M(e2, t2) {
          return typeof e2 == "string" && (t2 || e2.substring(0, 2) === "0x" || (e2 = "0x" + e2), u.hexDataLength(e2) === 32) ? e2.toLowerCase() : (m.throwError("invalid hash", m.INVALID_ARGUMENT, { arg: "hash", value: e2 }), null);
        }
        function A(e2) {
          return a.bigNumberify(e2).toNumber();
        }
        function E(e2) {
          if (!u.isHexString(e2))
            throw new Error("invalid uint256");
          for (; e2.length < 66; )
            e2 = "0x0" + e2.substring(2);
          return e2;
        }
        function S(e2) {
          if (e2 == null)
            return "latest";
          if (e2 === "earliest")
            return "0x0";
          if (e2 === "latest" || e2 === "pending")
            return e2;
          if (typeof e2 == "number")
            return u.hexStripZeros(u.hexlify(e2));
          if (u.isHexString(e2))
            return u.hexStripZeros(e2);
          throw new Error("invalid blockTag");
        }
        var k = { hash: M, blockHash: w(M, null), blockNumber: w(A, null), transactionIndex: w(A, null), confirmations: w(A, null), from: s.getAddress, gasPrice: a.bigNumberify, gasLimit: a.bigNumberify, to: w(s.getAddress, null), value: a.bigNumberify, nonce: A, data: u.hexlify, r: w(E), s: w(E), v: w(A), creates: w(s.getAddress, null), raw: w(u.hexlify) };
        function N(e2) {
          if (e2.gas != null && e2.gasLimit == null && (e2.gasLimit = e2.gas), e2.to && a.bigNumberify(e2.to).isZero() && (e2.to = "0x0000000000000000000000000000000000000000"), e2.input != null && e2.data == null && (e2.data = e2.input), e2.to == null && e2.creates == null && (e2.creates = s.getContractAddress(e2)), !e2.raw && e2.v && e2.r && e2.s) {
            var t2 = [u.stripZeros(u.hexlify(e2.nonce)), u.stripZeros(u.hexlify(e2.gasPrice)), u.stripZeros(u.hexlify(e2.gasLimit)), e2.to || "0x", u.stripZeros(u.hexlify(e2.value || "0x")), u.hexlify(e2.data || "0x"), u.stripZeros(u.hexlify(e2.v || "0x")), u.stripZeros(u.hexlify(e2.r)), u.stripZeros(u.hexlify(e2.s))];
            e2.raw = d.encode(t2);
          }
          var r2 = b(k, e2), n2 = e2.networkId;
          return e2.chainId != null && n2 == null && r2.v == null && (n2 = e2.chainId), u.isHexString(n2) && (n2 = a.bigNumberify(n2).toNumber()), typeof n2 != "number" && r2.v != null && ((n2 = (r2.v - 35) / 2) < 0 && (n2 = 0), n2 = parseInt(n2)), typeof n2 != "number" && (n2 = 0), r2.networkId = n2, r2.chainId == null && n2 != null && (r2.chainId = n2), r2.blockHash && r2.blockHash.replace(/0/g, "") === "x" && (r2.blockHash = null), r2;
        }
        var x = { hash: M, parentHash: M, number: A, timestamp: A, nonce: w(u.hexlify), difficulty: function(e2) {
          var t2 = a.bigNumberify(e2);
          try {
            return t2.toNumber();
          } catch (e3) {
          }
          return null;
        }, gasLimit: a.bigNumberify, gasUsed: a.bigNumberify, miner: s.getAddress, extraData: u.hexlify, transactions: w(_(M)) }, P = c.shallowCopy(x);
        function I(e2, t2) {
          return e2.author != null && e2.miner == null && (e2.miner = e2.author), b(t2 ? P : x, e2);
        }
        P.transactions = w(_(N));
        var T = { from: w(s.getAddress), nonce: w(A), gasLimit: w(a.bigNumberify), gasPrice: w(a.bigNumberify), to: w(s.getAddress), value: w(a.bigNumberify), data: w(u.hexlify) };
        function R(e2) {
          return b(T, e2);
        }
        var O = { transactionLogIndex: w(A), transactionIndex: A, blockNumber: A, transactionHash: M, address: s.getAddress, topics: _(M), data: u.hexlify, logIndex: A, blockHash: M };
        var C = { to: w(s.getAddress, null), from: w(s.getAddress, null), contractAddress: w(s.getAddress, null), transactionIndex: A, root: w(M), gasUsed: a.bigNumberify, logsBloom: w(u.hexlify), blockHash: M, transactionHash: M, logs: _(function(e2) {
          return b(O, e2);
        }), blockNumber: A, confirmations: w(A, null), cumulativeGasUsed: a.bigNumberify, status: w(A) };
        function L(e2) {
          return Array.isArray(e2) ? e2.forEach(function(e3) {
            L(e3);
          }) : e2 != null && M(e2), e2;
        }
        var D = { fromBlock: w(S, void 0), toBlock: w(S, void 0), address: w(s.getAddress, void 0), topics: w(L, void 0) }, B = { blockHash: w(M, void 0), address: w(s.getAddress, void 0), topics: w(L, void 0) };
        var U, F, j = { blockNumber: w(A), blockHash: w(M), transactionIndex: A, removed: w(function(e2) {
          if (typeof e2 == "boolean")
            return e2;
          if (typeof e2 == "string") {
            if (e2 === "true")
              return true;
            if (e2 === "false")
              return false;
          }
          throw new Error("invaid boolean - " + e2);
        }), address: s.getAddress, data: (U = u.hexlify, F = "0x", function(e2) {
          return e2 ? U(e2) : F;
        }), topics: _(M), transactionHash: M, logIndex: A };
        function G(e2) {
          return b(j, e2);
        }
        function H(e2) {
          return e2.map(function(e3) {
            return typeof e3 == "string" ? e3 : Array.isArray(e3) ? (e3.forEach(function(e4) {
              e4 !== null && u.hexDataLength(e4) !== 32 && m.throwError("invalid topic", m.INVALID_ARGUMENT, { argument: "topic", value: e4 });
            }), e3.join(",")) : e3 === null ? "" : m.throwError("invalid topic value", m.INVALID_ARGUMENT, { argument: "topic", value: e3 });
          }).join("&");
        }
        function z(e2) {
          if (typeof e2 == "string") {
            if (u.hexDataLength(e2) === 20)
              return "address:" + s.getAddress(e2);
            if (e2 = e2.toLowerCase(), u.hexDataLength(e2) === 32)
              return "tx:" + e2;
            if (e2.indexOf(":") === -1)
              return e2;
          } else {
            if (Array.isArray(e2))
              return "filter::" + H(e2);
            if (e2 && typeof e2 == "object")
              return "filter:" + (e2.address || "") + ":" + H(e2.topics || []);
          }
          throw new Error("invalid event - " + e2);
        }
        function V() {
          return new Date().getTime();
        }
        var K, q = (K = g.Provider, i(W, K), W.prototype._doPoll = function() {
          var u2 = this;
          this.getBlockNumber().then(function(s2) {
            if (u2.polling && (u2._setFastBlockNumber(s2), s2 !== u2._lastBlockNumber)) {
              u2._emitted.block === -2 && (u2._emitted.block = s2 - 1);
              for (var e2 = u2._emitted.block + 1; e2 <= s2; e2++)
                u2.emit("block", e2);
              u2._emitted.block !== s2 && (u2._emitted.block = s2, Object.keys(u2._emitted).forEach(function(e3) {
                if (e3 !== "block") {
                  var t3 = u2._emitted[e3];
                  t3 !== "pending" && 12 < s2 - t3 && delete u2._emitted[e3];
                }
              })), u2._lastBlockNumber === -2 && (u2._lastBlockNumber = s2 - 1);
              var a2 = {}, t2 = {};
              return u2._events.forEach(function(e3) {
                t2[e3.tag] = true;
              }), Object.keys(t2).forEach(function(e3) {
                var t3 = e3.split(":");
                switch (t3[0]) {
                  case "tx":
                    var r2 = t3[1];
                    u2.getTransactionReceipt(r2).then(function(e4) {
                      return e4 && e4.blockNumber != null && (u2._emitted["t:" + r2] = e4.blockNumber, u2.emit(r2, e4)), null;
                    }).catch(function(e4) {
                      u2.emit("error", e4);
                    });
                    break;
                  case "address":
                    var n2 = t3[1];
                    u2._balances[n2] && (a2[n2] = u2._balances[n2]), u2.getBalance(n2, "latest").then(function(e4) {
                      var t4 = u2._balances[n2];
                      if (!t4 || !e4.eq(t4))
                        return u2._balances[n2] = e4, u2.emit(n2, e4), null;
                    }).catch(function(e4) {
                      u2.emit("error", e4);
                    });
                    break;
                  case "filter":
                    var i2 = function(e4) {
                      return e4.split(/&/g).map(function(e5) {
                        var t4 = e5.split(",");
                        return t4.length === 1 ? t4[0] === "" ? null : e5 : t4.map(function(e6) {
                          return e6 === "" ? null : e6;
                        });
                      });
                    }(t3[2]), o2 = { address: t3[1], fromBlock: u2._lastBlockNumber + 1, toBlock: s2, topics: i2 };
                    o2.address || delete o2.address, u2.getLogs(o2).then(function(e4) {
                      if (e4.length !== 0)
                        return e4.forEach(function(e5) {
                          u2._emitted["b:" + e5.blockHash] = e5.blockNumber, u2._emitted["t:" + e5.transactionHash] = e5.blockNumber, u2.emit(o2, e5);
                        }), null;
                    }).catch(function(e4) {
                      u2.emit("error", e4);
                    });
                }
              }), u2._lastBlockNumber = s2, u2._balances = a2, null;
            }
          }).catch(function(e2) {
          }), this.doPoll();
        }, W.prototype.resetEventsBlock = function(e2) {
          this._lastBlockNumber = e2 - 1, this.polling && this._doPoll();
        }, Object.defineProperty(W.prototype, "network", { get: function() {
          return this._network;
        }, enumerable: true, configurable: true }), W.prototype.getNetwork = function() {
          return this.ready;
        }, Object.defineProperty(W.prototype, "blockNumber", { get: function() {
          return this._fastBlockNumber;
        }, enumerable: true, configurable: true }), Object.defineProperty(W.prototype, "polling", { get: function() {
          return this._poller != null;
        }, set: function(e2) {
          var t2 = this;
          setTimeout(function() {
            e2 && !t2._poller ? (t2._poller = setInterval(t2._doPoll.bind(t2), t2.pollingInterval), t2._doPoll()) : !e2 && t2._poller && (clearInterval(t2._poller), t2._poller = null);
          }, 0);
        }, enumerable: true, configurable: true }), Object.defineProperty(W.prototype, "pollingInterval", { get: function() {
          return this._pollingInterval;
        }, set: function(e2) {
          var t2 = this;
          if (typeof e2 != "number" || e2 <= 0 || parseInt(String(e2)) != e2)
            throw new Error("invalid polling interval");
          this._pollingInterval = e2, this._poller && (clearInterval(this._poller), this._poller = setInterval(function() {
            t2._doPoll();
          }, this._pollingInterval));
        }, enumerable: true, configurable: true }), W.prototype._getFastBlockNumber = function() {
          var t2 = this, e2 = V();
          return e2 - this._fastQueryDate > 2 * this._pollingInterval && (this._fastQueryDate = e2, this._fastBlockNumberPromise = this.getBlockNumber().then(function(e3) {
            return (t2._fastBlockNumber == null || e3 > t2._fastBlockNumber) && (t2._fastBlockNumber = e3), t2._fastBlockNumber;
          })), this._fastBlockNumberPromise;
        }, W.prototype._setFastBlockNumber = function(e2) {
          this._fastBlockNumber != null && e2 < this._fastBlockNumber || (this._fastQueryDate = V(), (this._fastBlockNumber == null || e2 > this._fastBlockNumber) && (this._fastBlockNumber = e2, this._fastBlockNumberPromise = Promise.resolve(e2)));
        }, W.prototype.waitForTransaction = function(n2, i2) {
          var o2 = this;
          return i2 == null && (i2 = 1), this.getTransactionReceipt(n2).then(function(e2) {
            return i2 === 0 || e2 && e2.confirmations >= i2 ? e2 : new Promise(function(t2) {
              var r2 = function(e3) {
                e3.confirmations < i2 || (o2.removeListener(n2, r2), t2(e3));
              };
              o2.on(n2, r2);
            });
          });
        }, W.prototype.getBlockNumber = function() {
          var r2 = this;
          return this.ready.then(function() {
            return r2.perform("getBlockNumber", {}).then(function(e2) {
              var t2 = parseInt(e2);
              if (t2 != e2)
                throw new Error("invalid response - getBlockNumber");
              return r2._setFastBlockNumber(t2), t2;
            });
          });
        }, W.prototype.getGasPrice = function() {
          var e2 = this;
          return this.ready.then(function() {
            return e2.perform("getGasPrice", {}).then(function(e3) {
              return a.bigNumberify(e3);
            });
          });
        }, W.prototype.getBalance = function(e2, t2) {
          var n2 = this;
          return this.ready.then(function() {
            return c.resolveProperties({ addressOrName: e2, blockTag: t2 }).then(function(e3) {
              var t3 = e3.addressOrName, r2 = e3.blockTag;
              return n2._getAddress(t3).then(function(e4) {
                var t4 = { address: e4, blockTag: S(r2) };
                return n2.perform("getBalance", t4).then(function(e5) {
                  return a.bigNumberify(e5);
                });
              });
            });
          });
        }, W.prototype.getTransactionCount = function(e2, t2) {
          var n2 = this;
          return this.ready.then(function() {
            return c.resolveProperties({ addressOrName: e2, blockTag: t2 }).then(function(e3) {
              var t3 = e3.addressOrName, r2 = e3.blockTag;
              return n2._getAddress(t3).then(function(e4) {
                var t4 = { address: e4, blockTag: S(r2) };
                return n2.perform("getTransactionCount", t4).then(function(e5) {
                  return a.bigNumberify(e5).toNumber();
                });
              });
            });
          });
        }, W.prototype.getCode = function(e2, t2) {
          var n2 = this;
          return this.ready.then(function() {
            return c.resolveProperties({ addressOrName: e2, blockTag: t2 }).then(function(e3) {
              var t3 = e3.addressOrName, r2 = e3.blockTag;
              return n2._getAddress(t3).then(function(e4) {
                var t4 = { address: e4, blockTag: S(r2) };
                return n2.perform("getCode", t4).then(function(e5) {
                  return u.hexlify(e5);
                });
              });
            });
          });
        }, W.prototype.getStorageAt = function(e2, t2, r2) {
          var i2 = this;
          return this.ready.then(function() {
            return c.resolveProperties({ addressOrName: e2, position: t2, blockTag: r2 }).then(function(e3) {
              var t3 = e3.addressOrName, r3 = e3.position, n2 = e3.blockTag;
              return i2._getAddress(t3).then(function(e4) {
                var t4 = { address: e4, blockTag: S(n2), position: u.hexStripZeros(u.hexlify(r3)) };
                return i2.perform("getStorageAt", t4).then(function(e5) {
                  return u.hexlify(e5);
                });
              });
            });
          });
        }, W.prototype.sendTransaction = function(e2) {
          var n2 = this;
          return this.ready.then(function() {
            return c.resolveProperties({ signedTransaction: e2 }).then(function(e3) {
              var t2 = e3.signedTransaction, r2 = { signedTransaction: u.hexlify(t2) };
              return n2.perform("sendTransaction", r2).then(function(e4) {
                return n2._wrapTransaction(p.parse(t2), e4);
              }, function(e4) {
                throw e4.transaction = p.parse(t2), e4.transaction.hash && (e4.transactionHash = e4.transaction.hash), e4;
              });
            });
          });
        }, W.prototype._wrapTransaction = function(r2, e2) {
          var n2 = this;
          if (e2 != null && u.hexDataLength(e2) !== 32)
            throw new Error("invalid response - sendTransaction");
          var t2 = r2;
          return e2 != null && r2.hash !== e2 && m.throwError("Transaction hash mismatch from Provider.sendTransaction.", m.UNKNOWN_ERROR, { expectedHash: r2.hash, returnedHash: e2 }), t2.wait = function(t3) {
            return t3 !== 0 && (n2._emitted["t:" + r2.hash] = "pending"), n2.waitForTransaction(r2.hash, t3).then(function(e3) {
              return e3 == null && t3 === 0 ? null : (n2._emitted["t:" + r2.hash] = e3.blockNumber, e3.status === 0 && m.throwError("transaction failed", m.CALL_EXCEPTION, { transactionHash: r2.hash, transaction: r2 }), e3);
            });
          }, t2;
        }, W.prototype.call = function(e2, t2) {
          var n2 = this, r2 = c.shallowCopy(e2);
          return this.ready.then(function() {
            return c.resolveProperties({ blockTag: t2, tx: r2 }).then(function(e3) {
              var r3 = e3.blockTag, t3 = e3.tx;
              return n2._resolveNames(t3, ["to", "from"]).then(function(e4) {
                var t4 = { blockTag: S(r3), transaction: R(e4) };
                return n2.perform("call", t4).then(function(e5) {
                  return u.hexlify(e5);
                });
              });
            });
          });
        }, W.prototype.estimateGas = function(e2) {
          var r2 = this, t2 = { to: e2.to, from: e2.from, data: e2.data, gasPrice: e2.gasPrice, value: e2.value };
          return this.ready.then(function() {
            return c.resolveProperties(t2).then(function(e3) {
              return r2._resolveNames(e3, ["to", "from"]).then(function(e4) {
                var t3 = { transaction: R(e4) };
                return r2.perform("estimateGas", t3).then(function(e5) {
                  return a.bigNumberify(e5);
                });
              });
            });
          });
        }, W.prototype.getBlock = function(e2, o2) {
          var s2 = this;
          return this.ready.then(function() {
            return c.resolveProperties({ blockHashOrBlockTag: e2 }).then(function(e3) {
              var t2 = e3.blockHashOrBlockTag;
              try {
                var r2 = u.hexlify(t2);
                if (u.hexDataLength(r2) === 32)
                  return y.poll(function() {
                    return s2.perform("getBlock", { blockHash: r2, includeTransactions: !!o2 }).then(function(e4) {
                      return e4 == null ? s2._emitted["b:" + r2] == null ? null : void 0 : I(e4, o2);
                    });
                  }, { onceBlock: s2 });
              } catch (e4) {
              }
              try {
                var n2 = -128, i2 = S(t2);
                return u.isHexString(i2) && (n2 = parseInt(i2.substring(2), 16)), y.poll(function() {
                  return s2.perform("getBlock", { blockTag: i2, includeTransactions: !!o2 }).then(function(e4) {
                    return e4 != null ? I(e4, o2) : n2 <= s2._emitted.block ? void 0 : null;
                  });
                }, { onceBlock: s2 });
              } catch (e4) {
              }
              throw new Error("invalid block hash or block tag");
            });
          });
        }, W.prototype.getTransaction = function(e2) {
          var n2 = this;
          return this.ready.then(function() {
            return c.resolveProperties({ transactionHash: e2 }).then(function(e3) {
              var t2 = e3.transactionHash, r2 = { transactionHash: M(t2, true) };
              return y.poll(function() {
                return n2.perform("getTransaction", r2).then(function(e4) {
                  if (e4 == null)
                    return n2._emitted["t:" + t2] == null ? null : void 0;
                  var r3 = W.checkTransactionResponse(e4);
                  if (r3.blockNumber == null)
                    r3.confirmations = 0;
                  else if (r3.confirmations == null)
                    return n2._getFastBlockNumber().then(function(e5) {
                      var t3 = e5 - r3.blockNumber + 1;
                      return t3 <= 0 && (t3 = 1), r3.confirmations = t3, n2._wrapTransaction(r3);
                    });
                  return n2._wrapTransaction(r3);
                });
              }, { onceBlock: n2 });
            });
          });
        }, W.prototype.getTransactionReceipt = function(e2) {
          var n2 = this;
          return this.ready.then(function() {
            return c.resolveProperties({ transactionHash: e2 }).then(function(e3) {
              var t2 = e3.transactionHash, r2 = { transactionHash: M(t2, true) };
              return y.poll(function() {
                return n2.perform("getTransactionReceipt", r2).then(function(e4) {
                  if (e4 == null)
                    return n2._emitted["t:" + t2] == null ? null : void 0;
                  if (e4.blockHash != null) {
                    var r3 = function(e5) {
                      var t3 = b(C, e5);
                      return t3.logs.forEach(function(e6, t4) {
                        e6.transactionLogIndex == null && (e6.transactionLogIndex = t4);
                      }), e5.status != null && (t3.byzantium = true), t3;
                    }(e4);
                    if (r3.blockNumber == null)
                      r3.confirmations = 0;
                    else if (r3.confirmations == null)
                      return n2._getFastBlockNumber().then(function(e5) {
                        var t3 = e5 - r3.blockNumber + 1;
                        return t3 <= 0 && (t3 = 1), r3.confirmations = t3, r3;
                      });
                    return r3;
                  }
                });
              }, { onceBlock: n2 });
            });
          });
        }, W.prototype.getLogs = function(e2) {
          var r2 = this;
          return this.ready.then(function() {
            return c.resolveProperties(e2).then(function(e3) {
              return r2._resolveNames(e3, ["address"]).then(function(e4) {
                var t2 = { filter: function(e5) {
                  return e5 && e5.blockHash ? b(B, e5) : b(D, e5);
                }(e4) };
                return r2.perform("getLogs", t2).then(function(e5) {
                  return _(G)(e5);
                });
              });
            });
          });
        }, W.prototype.getEtherPrice = function() {
          var e2 = this;
          return this.ready.then(function() {
            return e2.perform("getEtherPrice", {}).then(function(e3) {
              return e3;
            });
          });
        }, W.prototype._getAddress = function(t2) {
          return this.resolveName(t2).then(function(e2) {
            return e2 == null && m.throwError("ENS name not configured", m.UNSUPPORTED_OPERATION, { operation: "resolveName(" + JSON.stringify(t2) + ")" }), e2;
          });
        }, W.prototype._resolveNames = function(e2, t2) {
          var r2 = [], n2 = c.shallowCopy(e2);
          return t2.forEach(function(t3) {
            n2[t3] != null && r2.push(this._getAddress(n2[t3]).then(function(e3) {
              n2[t3] = e3;
            }));
          }, this), Promise.all(r2).then(function() {
            return n2;
          });
        }, W.prototype._getResolver = function(n2) {
          var i2 = this;
          return this.getNetwork().then(function(e2) {
            e2.ensAddress || m.throwError("network does not support ENS", m.UNSUPPORTED_OPERATION, { operation: "ENS", network: e2.name });
            var t2 = "0x0178b8bf" + h.namehash(n2).substring(2), r2 = { to: e2.ensAddress, data: t2 };
            return i2.call(r2).then(function(e3) {
              if (u.hexDataLength(e3) !== 32)
                return null;
              var t3 = s.getAddress(u.hexDataSlice(e3, 12));
              return t3 === l.AddressZero ? null : t3;
            });
          });
        }, W.prototype.resolveName = function(t2) {
          var r2 = this;
          if (t2 instanceof Promise)
            return t2.then(function(e2) {
              return r2.resolveName(e2);
            });
          try {
            return Promise.resolve(s.getAddress(t2));
          } catch (e2) {
            if (u.isHexString(t2))
              throw e2;
          }
          var n2 = this, i2 = h.namehash(t2);
          return this._getResolver(t2).then(function(e2) {
            if (e2 == null)
              return null;
            var t3 = { to: e2, data: "0x3b3b57de" + i2.substring(2) };
            return n2.call(t3);
          }).then(function(e2) {
            if (u.hexDataLength(e2) !== 32)
              return null;
            var t3 = s.getAddress(u.hexDataSlice(e2, 12));
            return t3 === l.AddressZero ? null : t3;
          });
        }, W.prototype.lookupAddress = function(n2) {
          var t2 = this;
          if (n2 instanceof Promise)
            return n2.then(function(e3) {
              return t2.lookupAddress(e3);
            });
          var e2 = (n2 = s.getAddress(n2)).substring(2) + ".addr.reverse", r2 = h.namehash(e2), i2 = this;
          return this._getResolver(e2).then(function(e3) {
            if (!e3)
              return null;
            var t3 = { to: e3, data: "0x691f3431" + r2.substring(2) };
            return i2.call(t3);
          }).then(function(e3) {
            if (e3 == null)
              return null;
            if ((e3 = e3.substring(2)).length < 64)
              return null;
            if ((e3 = e3.substring(64)).length < 64)
              return null;
            var t3 = a.bigNumberify("0x" + e3.substring(0, 64)).toNumber();
            if (2 * t3 > (e3 = e3.substring(64)).length)
              return null;
            var r3 = v.toUtf8String("0x" + e3.substring(0, 2 * t3));
            return i2.resolveName(r3).then(function(e4) {
              return e4 != n2 ? null : r3;
            });
          });
        }, W.checkTransactionResponse = function(e2) {
          return N(e2);
        }, W.prototype.doPoll = function() {
        }, W.prototype.perform = function(e2, t2) {
          return m.throwError(e2 + " not implemented", m.NOT_IMPLEMENTED, { operation: e2 }), null;
        }, W.prototype._startPending = function() {
          m.warn("WARNING: this provider does not support pending events");
        }, W.prototype._stopPending = function() {
        }, W.prototype._addEventListener = function(e2, t2, r2) {
          this._events.push({ tag: z(e2), listener: t2, once: r2 }), e2 === "pending" && this._startPending(), this.polling = true;
        }, W.prototype.on = function(e2, t2) {
          return this._addEventListener(e2, t2, false), this;
        }, W.prototype.once = function(e2, t2) {
          return this._addEventListener(e2, t2, true), this;
        }, W.prototype.addEventListener = function(e2, t2) {
          return this.on(e2, t2);
        }, W.prototype.emit = function(e2) {
          for (var t2 = this, r2 = [], n2 = 1; n2 < arguments.length; n2++)
            r2[n2 - 1] = arguments[n2];
          var i2 = false, o2 = z(e2);
          return this._events = this._events.filter(function(e3) {
            return e3.tag !== o2 || (setTimeout(function() {
              e3.listener.apply(t2, r2);
            }, 0), i2 = true, !e3.once);
          }), this.listenerCount() === 0 && (this.polling = false), i2;
        }, W.prototype.listenerCount = function(e2) {
          if (!e2)
            return this._events.length;
          var t2 = z(e2);
          return this._events.filter(function(e3) {
            return e3.tag === t2;
          }).length;
        }, W.prototype.listeners = function(e2) {
          var t2 = z(e2);
          return this._events.filter(function(e3) {
            return e3.tag === t2;
          }).map(function(e3) {
            return e3.listener;
          });
        }, W.prototype.removeAllListeners = function(e2) {
          if (e2 == null)
            this._events = [], this._stopPending();
          else {
            var t2 = z(e2);
            this._events = this._events.filter(function(e3) {
              return e3.tag !== t2;
            }), e2 === "pending" && this._stopPending();
          }
          return this._events.length === 0 && (this.polling = false), this;
        }, W.prototype.removeListener = function(e2, t2) {
          var r2 = false, n2 = z(e2);
          return this._events = this._events.filter(function(e3) {
            return e3.tag !== n2 || e3.listener != t2 || !!r2 || !(r2 = true);
          }), e2 === "pending" && this.listenerCount("pending") === 0 && this._stopPending(), this.listenerCount() === 0 && (this.polling = false), this;
        }, W);
        function W(e2) {
          var t2 = K.call(this) || this;
          if (m.checkNew(t2, g.Provider), e2 instanceof Promise)
            c.defineReadOnly(t2, "ready", e2.then(function(e3) {
              return c.defineReadOnly(t2, "_network", e3), e3;
            })), t2.ready.catch(function(e3) {
            });
          else {
            var r2 = f2.getNetwork(e2 == null ? "homestead" : e2);
            r2 ? (c.defineReadOnly(t2, "_network", r2), c.defineReadOnly(t2, "ready", Promise.resolve(t2._network))) : m.throwError("invalid network", m.INVALID_ARGUMENT, { arg: "network", value: e2 });
          }
          return t2._lastBlockNumber = -2, t2._balances = {}, t2._events = [], t2._pollingInterval = 4e3, t2._emitted = { block: -2 }, t2._fastQueryDate = 0, t2;
        }
        r.BaseProvider = q, c.defineReadOnly(g.Provider, "inherits", c.inheritable(g.Provider));
      }, { "../constants": 3, "../errors": 5, "../utils/address": 60, "../utils/bignumber": 63, "../utils/bytes": 64, "../utils/hash": 65, "../utils/networks": 72, "../utils/properties": 74, "../utils/rlp": 76, "../utils/transaction": 83, "../utils/utf8": 85, "../utils/web": 86, "./abstract-provider": 50 }], 52: [function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e2, t2) {
          e2.__proto__ = t2;
        } || function(e2, t2) {
          for (var r2 in t2)
            t2.hasOwnProperty(r2) && (e2[r2] = t2[r2]);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var s = e("./base-provider"), a = e("../utils/bytes"), u = e("../utils/properties"), l = e("../utils/web"), h = o(e("../errors"));
        function f2(e2) {
          var t2 = [];
          for (var r2 in e2)
            if (e2[r2] != null) {
              var n2 = a.hexlify(e2[r2]);
              !{ gasLimit: true, gasPrice: true, nonce: true, value: true }[r2] || (n2 = a.hexStripZeros(n2)), t2.push(r2 + "=" + n2);
            }
          return t2.join("&");
        }
        function c(e2) {
          if (e2.status == 0 && (e2.message === "No records found" || e2.message === "No transactions found"))
            return e2.result;
          if (e2.status == 1 && e2.message == "OK")
            return e2.result;
          var t2 = new Error("invalid response");
          throw t2.result = JSON.stringify(e2), t2;
        }
        function d(e2) {
          if (e2.jsonrpc != "2.0")
            throw (t2 = new Error("invalid response")).result = JSON.stringify(e2), t2;
          if (e2.error) {
            var t2 = new Error(e2.error.message || "unknown error");
            throw e2.error.code && (t2.code = e2.error.code), e2.error.data && (t2.data = e2.error.data), t2;
          }
          return e2.result;
        }
        function p(e2) {
          if (e2 === "pending")
            throw new Error("pending not supported");
          return e2 === "latest" ? e2 : parseInt(e2.substring(2), 16);
        }
        var v, y = (v = s.BaseProvider, i(m, v), m.prototype.perform = function(e2, t2) {
          var r2 = this, n2 = this.baseUrl, i2 = "";
          function o2(t3, e3) {
            return l.fetchJson(t3, null, e3 || d).then(function(e4) {
              return r2.emit("debug", { action: "perform", request: t3, response: e4, provider: r2 }), e4;
            });
          }
          switch (this.apiKey && (i2 += "&apikey=" + this.apiKey), e2) {
            case "getBlockNumber":
              return o2(n2 += "/api?module=proxy&action=eth_blockNumber" + i2);
            case "getGasPrice":
              return o2(n2 += "/api?module=proxy&action=eth_gasPrice" + i2);
            case "getBalance":
              return n2 += "/api?module=account&action=balance&address=" + t2.address, o2(n2 += "&tag=" + t2.blockTag + i2, c);
            case "getTransactionCount":
              return n2 += "/api?module=proxy&action=eth_getTransactionCount&address=" + t2.address, o2(n2 += "&tag=" + t2.blockTag + i2);
            case "getCode":
              return n2 += "/api?module=proxy&action=eth_getCode&address=" + t2.address, o2(n2 += "&tag=" + t2.blockTag + i2, d);
            case "getStorageAt":
              return n2 += "/api?module=proxy&action=eth_getStorageAt&address=" + t2.address, n2 += "&position=" + t2.position, o2(n2 += "&tag=" + t2.blockTag + i2, d);
            case "sendTransaction":
              return n2 += "/api?module=proxy&action=eth_sendRawTransaction&hex=" + t2.signedTransaction, o2(n2 += i2).catch(function(e3) {
                throw e3.responseText && (0 <= e3.responseText.toLowerCase().indexOf("insufficient funds") && h.throwError("insufficient funds", h.INSUFFICIENT_FUNDS, {}), 0 <= e3.responseText.indexOf("same hash was already imported") && h.throwError("nonce has already been used", h.NONCE_EXPIRED, {}), 0 <= e3.responseText.indexOf("another transaction with same nonce") && h.throwError("replacement fee too low", h.REPLACEMENT_UNDERPRICED, {})), e3;
              });
            case "getBlock":
              return t2.blockTag ? (n2 += "/api?module=proxy&action=eth_getBlockByNumber&tag=" + t2.blockTag, t2.includeTransactions ? n2 += "&boolean=true" : n2 += "&boolean=false", o2(n2 += i2)) : Promise.reject(new Error("getBlock by blockHash not implemeneted"));
            case "getTransaction":
              return n2 += "/api?module=proxy&action=eth_getTransactionByHash&txhash=" + t2.transactionHash, o2(n2 += i2);
            case "getTransactionReceipt":
              return n2 += "/api?module=proxy&action=eth_getTransactionReceipt&txhash=" + t2.transactionHash, o2(n2 += i2);
            case "call":
              return n2 += "/api?module=proxy&action=eth_call" + (s2 = (s2 = f2(t2.transaction)) && "&" + s2), t2.blockTag !== "latest" ? Promise.reject(new Error("EtherscanProvider does not support blockTag for call")) : o2(n2 += i2);
            case "estimateGas":
              var s2;
              return n2 += "/api?module=proxy&action=eth_estimateGas&" + (s2 = (s2 = f2(t2.transaction)) && "&" + s2), o2(n2 += i2);
            case "getLogs":
              n2 += "/api?module=logs&action=getLogs";
              try {
                if (t2.filter.fromBlock && (n2 += "&fromBlock=" + p(t2.filter.fromBlock)), t2.filter.toBlock && (n2 += "&toBlock=" + p(t2.filter.toBlock)), t2.filter.blockHash)
                  try {
                    h.throwError("Etherscan does not support blockHash filters", h.UNSUPPORTED_OPERATION, { operation: "getLogs(blockHash)" });
                  } catch (e3) {
                    return Promise.reject(e3);
                  }
                if (t2.filter.address && (n2 += "&address=" + t2.filter.address), t2.filter.topics && 0 < t2.filter.topics.length) {
                  if (1 < t2.filter.topics.length)
                    throw new Error("unsupported topic format");
                  var a2 = t2.filter.topics[0];
                  if (typeof a2 != "string" || a2.length !== 66)
                    throw new Error("unsupported topic0 format");
                  n2 += "&topic0=" + a2;
                }
              } catch (e3) {
                return Promise.reject(e3);
              }
              var u2 = this;
              return o2(n2 += i2, c).then(function(e3) {
                var r3 = {}, n3 = Promise.resolve();
                return e3.forEach(function(t3) {
                  n3 = n3.then(function() {
                    return t3.blockHash != null ? null : (t3.blockHash = r3[t3.transactionHash], t3.blockHash == null ? u2.getTransaction(t3.transactionHash).then(function(e4) {
                      return r3[t3.transactionHash] = e4.blockHash, t3.blockHash = e4.blockHash, null;
                    }) : null);
                  });
                }), n3.then(function() {
                  return e3;
                });
              });
            case "getEtherPrice":
              return this.network.name !== "homestead" ? Promise.resolve(0) : (n2 += "/api?module=stats&action=ethprice", o2(n2 += i2, c).then(function(e3) {
                return parseFloat(e3.ethusd);
              }));
          }
          return v.prototype.perform.call(this, e2, t2);
        }, m.prototype.getHistory = function(e2, t2, r2) {
          var n2 = this, i2 = this.baseUrl, o2 = "";
          return this.apiKey && (o2 += "&apikey=" + this.apiKey), t2 == null && (t2 = 0), r2 == null && (r2 = 99999999), this.resolveName(e2).then(function(e3) {
            return i2 += "/api?module=account&action=txlist&address=" + e3, i2 += "&startblock=" + t2, i2 += "&endblock=" + r2, i2 += "&sort=asc" + o2, l.fetchJson(i2, null, c).then(function(e4) {
              n2.emit("debug", { action: "getHistory", request: i2, response: e4, provider: n2 });
              var r3 = [];
              return e4.forEach(function(t3) {
                ["contractAddress", "to"].forEach(function(e6) {
                  t3[e6] == "" && delete t3[e6];
                }), t3.creates == null && t3.contractAddress != null && (t3.creates = t3.contractAddress);
                var e5 = s.BaseProvider.checkTransactionResponse(t3);
                t3.timeStamp && (e5.timestamp = parseInt(t3.timeStamp)), r3.push(e5);
              }), r3;
            });
          });
        }, m);
        function m(e2, t2) {
          var r2 = v.call(this, e2) || this;
          h.checkNew(r2, m);
          var n2 = "invalid";
          r2.network && (n2 = r2.network.name);
          var i2 = null;
          switch (n2) {
            case "homestead":
              i2 = "https://api.etherscan.io";
              break;
            case "ropsten":
              i2 = "https://api-ropsten.etherscan.io";
              break;
            case "rinkeby":
              i2 = "https://api-rinkeby.etherscan.io";
              break;
            case "kovan":
              i2 = "https://api-kovan.etherscan.io";
              break;
            case "goerli":
              i2 = "https://api-goerli.etherscan.io";
              break;
            default:
              throw new Error("unsupported network");
          }
          return u.defineReadOnly(r2, "baseUrl", i2), u.defineReadOnly(r2, "apiKey", t2 || "8FG3JMZ9USS4NTA6YKEKHINU56SEPPVBJR"), r2;
        }
        r.EtherscanProvider = y;
      }, { "../errors": 5, "../utils/bytes": 64, "../utils/properties": 74, "../utils/web": 86, "./base-provider": 51 }], 53: [function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e2, t2) {
          e2.__proto__ = t2;
        } || function(e2, t2) {
          for (var r2 in t2)
            t2.hasOwnProperty(r2) && (e2[r2] = t2[r2]);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var s = e("./base-provider"), a = o(e("../errors"));
        function u(t2) {
          var r2 = true, n2 = null;
          return t2.forEach(function(e2) {
            e2 != null ? n2 != null ? n2.name === e2.name && n2.chainId === e2.chainId && (n2.ensAddress === e2.ensAddress || n2.ensAddress == null && e2.ensAddress == null) || a.throwError("provider mismatch", a.INVALID_ARGUMENT, { arg: "networks", value: t2 }) : n2 = e2 : r2 = false;
          }), r2;
        }
        var l, h = (l = s.BaseProvider, i(f2, l), Object.defineProperty(f2.prototype, "providers", { get: function() {
          return this._providers.slice(0);
        }, enumerable: true, configurable: true }), f2.prototype.perform = function(i2, o2) {
          var s2 = this.providers;
          return new Promise(function(r2, e2) {
            var n2 = null;
            !function t2() {
              s2.length ? s2.shift().perform(i2, o2).then(function(e3) {
                return r2(e3);
              }).catch(function(e3) {
                n2 = n2 || e3, setTimeout(t2, 0);
              }) : e2(n2);
            }();
          });
        }, f2);
        function f2(e2) {
          var t2 = this;
          if (e2.length === 0)
            throw new Error("no providers");
          if (u(e2.map(function(e3) {
            return e3.network;
          })))
            t2 = l.call(this, e2[0].network) || this;
          else {
            var r2 = Promise.all(e2.map(function(e3) {
              return e3.getNetwork();
            })).then(function(e3) {
              return u(e3) || a.throwError("getNetwork returned null", a.UNKNOWN_ERROR, {}), e3[0];
            });
            t2 = l.call(this, r2) || this;
          }
          return a.checkNew(t2, f2), t2._providers = e2.slice(0), t2;
        }
        r.FallbackProvider = h;
      }, { "../errors": 5, "./base-provider": 51 }], 54: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        var n = e("./abstract-provider");
        r.Provider = n.Provider;
        var i = e("./base-provider");
        r.BaseProvider = i.BaseProvider;
        var o = e("./etherscan-provider");
        r.EtherscanProvider = o.EtherscanProvider;
        var s = e("./fallback-provider");
        r.FallbackProvider = s.FallbackProvider;
        var a = e("./ipc-provider");
        r.IpcProvider = a.IpcProvider;
        var u = e("./infura-provider");
        r.InfuraProvider = u.InfuraProvider;
        var l = e("./json-rpc-provider");
        r.JsonRpcProvider = l.JsonRpcProvider, r.JsonRpcSigner = l.JsonRpcSigner;
        var h = e("./web3-provider");
        r.Web3Provider = h.Web3Provider;
      }, { "./abstract-provider": 50, "./base-provider": 51, "./etherscan-provider": 52, "./fallback-provider": 53, "./infura-provider": 55, "./ipc-provider": 56, "./json-rpc-provider": 57, "./web3-provider": 58 }], 55: [function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e2, t2) {
          e2.__proto__ = t2;
        } || function(e2, t2) {
          for (var r2 in t2)
            t2.hasOwnProperty(r2) && (e2[r2] = t2[r2]);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var s, a = e("./json-rpc-provider"), u = e("../utils/bytes"), l = e("../utils/networks"), h = e("../utils/properties"), f2 = o(e("../errors")), c = (s = a.JsonRpcProvider, i(d, s), d.prototype._startPending = function() {
          f2.warn("WARNING: INFURA does not support pending filters");
        }, d.prototype.getSigner = function(e2) {
          return f2.throwError("INFURA does not support signing", f2.UNSUPPORTED_OPERATION, { operation: "getSigner" });
        }, d.prototype.listAccounts = function() {
          return Promise.resolve([]);
        }, d);
        function d(e2, t2) {
          var r2 = this, n2 = l.getNetwork(e2 == null ? "homestead" : e2);
          t2 == null && (t2 = "7d0d81d0919f4f05b9ab6634be01ee73");
          var i2 = null;
          switch (n2.name) {
            case "homestead":
              i2 = "mainnet.infura.io";
              break;
            case "ropsten":
              i2 = "ropsten.infura.io";
              break;
            case "rinkeby":
              i2 = "rinkeby.infura.io";
              break;
            case "goerli":
              i2 = "goerli.infura.io";
              break;
            case "kovan":
              i2 = "kovan.infura.io";
              break;
            default:
              f2.throwError("unsupported network", f2.INVALID_ARGUMENT, { argument: "network", value: e2 });
          }
          return u.isHexString("0x" + t2, 16) ? (r2 = s.call(this, "https://" + i2 + "/v3/" + t2, n2) || this, h.defineReadOnly(r2, "apiAccessToken", null), h.defineReadOnly(r2, "projectId", t2)) : (f2.warn("The legacy INFURA apiAccesToken API is deprecated; please upgrade to a Project ID instead (see INFURA dshboard; https://infura.io)"), r2 = s.call(this, "https://" + i2 + "/" + t2, n2) || this, h.defineReadOnly(r2, "apiAccessToken", t2), h.defineReadOnly(r2, "projectId", null)), f2.checkNew(r2, d), r2;
        }
        r.InfuraProvider = c;
      }, { "../errors": 5, "../utils/bytes": 64, "../utils/networks": 72, "../utils/properties": 74, "./json-rpc-provider": 57 }], 56: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
      }, {}], 57: [function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e2, t2) {
          e2.__proto__ = t2;
        } || function(e2, t2) {
          for (var r2 in t2)
            t2.hasOwnProperty(r2) && (e2[r2] = t2[r2]);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var s = e("./base-provider"), a = e("../abstract-signer"), u = o(e("../errors")), l = e("../utils/address"), h = e("../utils/bytes"), f2 = e("../utils/networks"), c = e("../utils/properties"), d = e("../utils/utf8"), p = e("../utils/web");
        function v(e2) {
          if (e2.error) {
            var t2 = new Error(e2.error.message);
            throw t2.code = e2.error.code, t2.data = e2.error.data, t2;
          }
          return e2.result;
        }
        function y(e2) {
          return e2 ? e2.toLowerCase() : e2;
        }
        var m, g = {}, b = 42, w = (m = a.Signer, i(_, m), _.prototype.getAddress = function() {
          var t2 = this;
          return this._address ? Promise.resolve(this._address) : this.provider.send("eth_accounts", []).then(function(e2) {
            return e2.length <= t2._index && u.throwError("unknown account #" + t2._index, u.UNSUPPORTED_OPERATION, { operation: "getAddress" }), t2._address = l.getAddress(e2[t2._index]), t2._address;
          });
        }, _.prototype.getBalance = function(e2) {
          return this.provider.getBalance(this.getAddress(), e2);
        }, _.prototype.getTransactionCount = function(e2) {
          return this.provider.getTransactionCount(this.getAddress(), e2);
        }, _.prototype.sendUncheckedTransaction = function(e2) {
          var n2 = this;
          e2 = c.shallowCopy(e2);
          var t2 = this.getAddress().then(function(e3) {
            return e3 = e3 && e3.toLowerCase();
          });
          if (e2.gasLimit == null) {
            var r2 = c.shallowCopy(e2);
            r2.from = t2, e2.gasLimit = this.provider.estimateGas(r2);
          }
          return Promise.all([c.resolveProperties(e2), t2]).then(function(e3) {
            var t3 = e3[0], r3 = E.hexlifyTransaction(t3);
            return r3.from = e3[1], n2.provider.send("eth_sendTransaction", [r3]).then(function(e4) {
              return e4;
            }, function(e4) {
              throw e4.responseText && (0 <= e4.responseText.indexOf("insufficient funds") && u.throwError("insufficient funds", u.INSUFFICIENT_FUNDS, { transaction: t3 }), 0 <= e4.responseText.indexOf("nonce too low") && u.throwError("nonce has already been used", u.NONCE_EXPIRED, { transaction: t3 }), 0 <= e4.responseText.indexOf("replacement transaction underpriced") && u.throwError("replacement fee too low", u.REPLACEMENT_UNDERPRICED, { transaction: t3 })), e4;
            });
          });
        }, _.prototype.sendTransaction = function(e2) {
          var r2 = this;
          return this.sendUncheckedTransaction(e2).then(function(t2) {
            return p.poll(function() {
              return r2.provider.getTransaction(t2).then(function(e3) {
                if (e3 !== null)
                  return r2.provider._wrapTransaction(e3, t2);
              });
            }, { fastRetry: 250, onceBlock: r2.provider }).catch(function(e3) {
              throw e3.transactionHash = t2, e3;
            });
          });
        }, _.prototype.signMessage = function(e2) {
          var t2 = this, r2 = typeof e2 == "string" ? d.toUtf8Bytes(e2) : e2;
          return this.getAddress().then(function(e3) {
            return t2.provider.send("eth_sign", [e3.toLowerCase(), h.hexlify(r2)]);
          });
        }, _.prototype.unlock = function(t2) {
          var r2 = this.provider;
          return this.getAddress().then(function(e2) {
            return r2.send("personal_unlockAccount", [e2.toLowerCase(), t2, null]);
          });
        }, _);
        function _(e2, t2, r2) {
          var n2 = m.call(this) || this;
          if (u.checkNew(n2, _), e2 !== g)
            throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
          return c.defineReadOnly(n2, "provider", t2), r2 ? typeof r2 == "string" ? c.defineReadOnly(n2, "_address", l.getAddress(r2)) : typeof r2 == "number" ? c.defineReadOnly(n2, "_index", r2) : u.throwError("invalid address or index", u.INVALID_ARGUMENT, { argument: "addressOrIndex", value: r2 }) : c.defineReadOnly(n2, "_index", 0), n2;
        }
        r.JsonRpcSigner = w;
        var M, A = { chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true }, E = (M = s.BaseProvider, i(S, M), S.prototype.getSigner = function(e2) {
          return new w(g, this, e2);
        }, S.prototype.listAccounts = function() {
          return this.send("eth_accounts", []).then(function(e2) {
            return e2.map(function(e3) {
              return l.getAddress(e3);
            });
          });
        }, S.prototype.send = function(e2, t2) {
          var r2 = this, n2 = { method: e2, params: t2, id: b++, jsonrpc: "2.0" };
          return p.fetchJson(this.connection, JSON.stringify(n2), v).then(function(e3) {
            return r2.emit("debug", { action: "send", request: n2, response: e3, provider: r2 }), e3;
          });
        }, S.prototype.perform = function(e2, t2) {
          switch (e2) {
            case "getBlockNumber":
              return this.send("eth_blockNumber", []);
            case "getGasPrice":
              return this.send("eth_gasPrice", []);
            case "getBalance":
              return this.send("eth_getBalance", [y(t2.address), t2.blockTag]);
            case "getTransactionCount":
              return this.send("eth_getTransactionCount", [y(t2.address), t2.blockTag]);
            case "getCode":
              return this.send("eth_getCode", [y(t2.address), t2.blockTag]);
            case "getStorageAt":
              return this.send("eth_getStorageAt", [y(t2.address), t2.position, t2.blockTag]);
            case "sendTransaction":
              return this.send("eth_sendRawTransaction", [t2.signedTransaction]).catch(function(e3) {
                throw e3.responseText && (0 < e3.responseText.indexOf("insufficient funds") && u.throwError("insufficient funds", u.INSUFFICIENT_FUNDS, {}), 0 < e3.responseText.indexOf("nonce too low") && u.throwError("nonce has already been used", u.NONCE_EXPIRED, {}), 0 < e3.responseText.indexOf("replacement transaction underpriced") && u.throwError("replacement fee too low", u.REPLACEMENT_UNDERPRICED, {})), e3;
              });
            case "getBlock":
              return t2.blockTag ? this.send("eth_getBlockByNumber", [t2.blockTag, !!t2.includeTransactions]) : t2.blockHash ? this.send("eth_getBlockByHash", [t2.blockHash, !!t2.includeTransactions]) : Promise.reject(new Error("invalid block tag or block hash"));
            case "getTransaction":
              return this.send("eth_getTransactionByHash", [t2.transactionHash]);
            case "getTransactionReceipt":
              return this.send("eth_getTransactionReceipt", [t2.transactionHash]);
            case "call":
              return this.send("eth_call", [S.hexlifyTransaction(t2.transaction, { from: true }), t2.blockTag]);
            case "estimateGas":
              return this.send("eth_estimateGas", [S.hexlifyTransaction(t2.transaction, { from: true })]);
            case "getLogs":
              return t2.filter && t2.filter.address != null && (t2.filter.address = y(t2.filter.address)), this.send("eth_getLogs", [t2.filter]);
          }
          return u.throwError(e2 + " not implemented", u.NOT_IMPLEMENTED, { operation: e2 }), null;
        }, S.prototype._startPending = function() {
          if (this._pendingFilter == null) {
            var r2 = this, n2 = this.send("eth_newPendingTransactionFilter", []);
            (this._pendingFilter = n2).then(function(t2) {
              return function e2() {
                r2.send("eth_getFilterChanges", [t2]).then(function(e3) {
                  if (r2._pendingFilter != n2)
                    return null;
                  var t3 = Promise.resolve();
                  return e3.forEach(function(e4) {
                    r2._emitted["t:" + e4.toLowerCase()] = "pending", t3 = t3.then(function() {
                      return r2.getTransaction(e4).then(function(e5) {
                        return r2.emit("pending", e5), null;
                      });
                    });
                  }), t3.then(function() {
                    return function(t4) {
                      return new Promise(function(e4) {
                        setTimeout(function() {
                          e4();
                        }, t4);
                      });
                    }(1e3);
                  });
                }).then(function() {
                  if (r2._pendingFilter == n2)
                    return setTimeout(function() {
                      e2();
                    }, 0), null;
                  r2.send("eth_uninstallFilter", [t2]);
                }).catch(function(e3) {
                });
              }(), t2;
            }).catch(function(e2) {
            });
          }
        }, S.prototype._stopPending = function() {
          this._pendingFilter = null;
        }, S.hexlifyTransaction = function(r2, e2) {
          var t2 = c.shallowCopy(A);
          if (e2)
            for (var n2 in e2)
              e2[n2] && (t2[n2] = true);
          c.checkProperties(r2, t2);
          var i2 = {};
          return ["gasLimit", "gasPrice", "nonce", "value"].forEach(function(e3) {
            if (r2[e3] != null) {
              var t3 = h.hexStripZeros(h.hexlify(r2[e3]));
              e3 === "gasLimit" && (e3 = "gas"), i2[e3] = t3;
            }
          }), ["from", "to", "data"].forEach(function(e3) {
            r2[e3] != null && (i2[e3] = h.hexlify(r2[e3]));
          }), i2;
        }, S);
        function S(e2, t2) {
          var n2 = this;
          if (typeof e2 == "string" && t2 === null && f2.getNetwork(e2) && (t2 = e2, e2 = null), t2)
            n2 = M.call(this, t2) || this;
          else {
            var r2 = new Promise(function(t3, r3) {
              setTimeout(function() {
                n2.send("net_version", []).then(function(e3) {
                  return t3(f2.getNetwork(parseInt(e3)));
                }).catch(function(e3) {
                  r3(e3);
                });
              });
            });
            n2 = M.call(this, r2) || this;
          }
          return u.checkNew(n2, S), e2 = e2 || "http://localhost:8545", n2.connection = typeof e2 == "string" ? { url: e2 } : e2, n2;
        }
        r.JsonRpcProvider = E;
      }, { "../abstract-signer": 2, "../errors": 5, "../utils/address": 60, "../utils/bytes": 64, "../utils/networks": 72, "../utils/properties": 74, "../utils/utf8": 85, "../utils/web": 86, "./base-provider": 51 }], 58: [function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e2, t2) {
          e2.__proto__ = t2;
        } || function(e2, t2) {
          for (var r2 in t2)
            t2.hasOwnProperty(r2) && (e2[r2] = t2[r2]);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var s, a = e("./json-rpc-provider"), u = e("../utils/properties"), l = o(e("../errors")), h = 42, f2 = (s = a.JsonRpcProvider, i(c, s), c.prototype.send = function(t2, r2) {
          var o2 = this;
          return t2 == "eth_sign" && this._web3Provider.isMetaMask && (t2 = "personal_sign", r2 = [r2[1], r2[0]]), new Promise(function(n2, i2) {
            var e2 = { method: t2, params: r2, id: h++, jsonrpc: "2.0" };
            o2._sendAsync(e2, function(e3, t3) {
              if (e3)
                i2(e3);
              else {
                if (t3.error) {
                  var r3 = new Error(t3.error.message);
                  return r3.code = t3.error.code, r3.data = t3.error.data, void i2(r3);
                }
                n2(t3.result);
              }
            });
          });
        }, c);
        function c(e2, t2) {
          var r2 = s.call(this, e2.host || e2.path || "", t2) || this;
          return l.checkNew(r2, c), e2 && (e2.sendAsync ? r2._sendAsync = e2.sendAsync.bind(e2) : e2.send && (r2._sendAsync = e2.send.bind(e2))), e2 && r2._sendAsync || l.throwError("invalid web3Provider", l.INVALID_ARGUMENT, { arg: "web3Provider", value: e2 }), u.defineReadOnly(r2, "_web3Provider", e2), u.defineReadOnly(r2, "provider", e2), r2;
        }
        r.Web3Provider = f2;
      }, { "../errors": 5, "../utils/properties": 74, "./json-rpc-provider": 57 }], 59: [function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e2, t2) {
          e2.__proto__ = t2;
        } || function(e2, t2) {
          for (var r2 in t2)
            t2.hasOwnProperty(r2) && (e2[r2] = t2[r2]);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var s = e("../constants"), l = o(e("../errors")), a = e("./address"), u = e("./bignumber"), h = e("./bytes"), f2 = e("./utf8"), c = e("./properties"), d = new RegExp(/^bytes([0-9]*)$/), p = new RegExp(/^(u?int)([0-9]*)$/), v = new RegExp(/^(.*)\[([0-9]*)\]$/);
        r.defaultCoerceFunc = function(e2, t2) {
          var r2 = e2.match(p);
          return r2 && parseInt(r2[2]) <= 48 ? t2.toNumber() : t2;
        };
        var y = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$"), m = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
        function g(e2) {
          return e2.match(/^uint($|[^1-9])/) ? e2 = "uint256" + e2.substring(4) : e2.match(/^int($|[^1-9])/) && (e2 = "int256" + e2.substring(3)), e2;
        }
        function b(e2, t2) {
          var r2 = e2;
          function n2(e3) {
            throw new Error('unexpected character "' + r2[e3] + '" at position ' + e3 + ' in "' + r2 + '"');
          }
          e2 = e2.replace(/\s/g, " ");
          for (var i2 = { type: "", name: "", state: { allowType: true } }, o2 = i2, s2 = 0; s2 < e2.length; s2++) {
            var a2 = e2[s2];
            switch (a2) {
              case "(":
                o2.state.allowParams || n2(s2), o2.state.allowType = false, o2.type = g(o2.type), o2.components = [{ type: "", name: "", parent: o2, state: { allowType: true } }], o2 = o2.components[0];
                break;
              case ")":
                delete o2.state, t2 && o2.name === "indexed" && (o2.indexed = true, o2.name = ""), o2.type = g(o2.type);
                var u2 = o2;
                (o2 = o2.parent) || n2(s2), delete u2.parent, o2.state.allowParams = false, o2.state.allowName = true, o2.state.allowArray = true;
                break;
              case ",":
                delete o2.state, t2 && o2.name === "indexed" && (o2.indexed = true, o2.name = ""), o2.type = g(o2.type);
                var l2 = { type: "", name: "", parent: o2.parent, state: { allowType: true } };
                o2.parent.components.push(l2), delete o2.parent, o2 = l2;
                break;
              case " ":
                o2.state.allowType && o2.type !== "" && (o2.type = g(o2.type), delete o2.state.allowType, o2.state.allowName = true, o2.state.allowParams = true), o2.state.allowName && o2.name !== "" && (t2 && o2.name === "indexed" ? (o2.indexed = true, o2.name = "") : o2.state.allowName = false);
                break;
              case "[":
                o2.state.allowArray || n2(s2), o2.type += a2, o2.state.allowArray = false, o2.state.allowName = false, o2.state.readArray = true;
                break;
              case "]":
                o2.state.readArray || n2(s2), o2.type += a2, o2.state.readArray = false, o2.state.allowArray = true, o2.state.allowName = true;
                break;
              default:
                o2.state.allowType ? (o2.type += a2, o2.state.allowParams = true, o2.state.allowArray = true) : o2.state.allowName ? (o2.name += a2, delete o2.state.allowArray) : o2.state.readArray ? o2.type += a2 : n2(s2);
            }
          }
          if (o2.parent)
            throw new Error("unexpected eof");
          return delete i2.state, t2 && o2.name === "indexed" && (o2.indexed = true, o2.name = ""), i2.type = g(i2.type), i2;
        }
        function w(e2) {
          return se(r.defaultCoerceFunc, e2).type;
        }
        r.parseParamType = function(e2) {
          return b(e2, true);
        }, r.formatParamType = w, r.formatSignature = function(e2) {
          return e2.name + "(" + e2.inputs.map(function(e3) {
            return w(e3);
          }).join(",") + ")";
        }, r.parseSignature = function(e2) {
          if (typeof e2 == "string")
            return (e2 = (e2 = (e2 = e2.replace(/\s/g, " ")).replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ")).trim()).substring(0, 6) === "event " ? function(e3) {
              var t2 = { anonymous: false, inputs: [], name: "", type: "event" }, r2 = e3.match(y);
              if (!r2)
                throw new Error("invalid event: " + e3);
              if (t2.name = r2[1].trim(), ie(r2[2]).forEach(function(e4) {
                (e4 = b(e4, true)).indexed = !!e4.indexed, t2.inputs.push(e4);
              }), r2[3].split(" ").forEach(function(e4) {
                switch (e4) {
                  case "anonymous":
                    t2.anonymous = true;
                    break;
                  case "":
                    break;
                  default:
                    l.info("unknown modifier: " + e4);
                }
              }), t2.name && !t2.name.match(m))
                throw new Error('invalid identifier: "' + t2.name + '"');
              return t2;
            }(e2.substring(6).trim()) : (e2.substring(0, 9) === "function " && (e2 = e2.substring(9)), function(e3) {
              var t2 = { constant: false, gas: null, inputs: [], name: "", outputs: [], payable: false, stateMutability: null, type: "function" }, r2 = e3.split("@");
              if (r2.length !== 1) {
                if (2 < r2.length)
                  throw new Error("invalid signature");
                if (!r2[1].match(/^[0-9]+$/))
                  throw new Error("invalid signature gas");
                t2.gas = u.bigNumberify(r2[1]), e3 = r2[0];
              }
              var n2 = (r2 = e3.split(" returns "))[0].match(y);
              if (!n2)
                throw new Error("invalid signature");
              if (t2.name = n2[1].trim(), !t2.name.match(m))
                throw new Error('invalid identifier: "' + n2[1] + '"');
              if (ie(n2[2]).forEach(function(e4) {
                t2.inputs.push(b(e4));
              }), n2[3].split(" ").forEach(function(e4) {
                switch (e4) {
                  case "constant":
                    t2.constant = true;
                    break;
                  case "payable":
                    t2.payable = true, t2.stateMutability = "payable";
                    break;
                  case "pure":
                    t2.constant = true, t2.stateMutability = "pure";
                    break;
                  case "view":
                    t2.constant = true, t2.stateMutability = "view";
                    break;
                  case "external":
                  case "public":
                  case "":
                    break;
                  default:
                    l.info("unknown modifier: " + e4);
                }
              }), 1 < r2.length) {
                var i2 = r2[1].match(y);
                if (i2[1].trim() != "" || i2[3].trim() != "")
                  throw new Error("unexpected tokens");
                ie(i2[2]).forEach(function(e4) {
                  t2.outputs.push(b(e4));
                });
              }
              if (t2.name === "constructor") {
                if (t2.type = "constructor", t2.outputs.length)
                  throw new Error("constructor may not have outputs");
                delete t2.name, delete t2.outputs;
              }
              return t2;
            }(e2.trim()));
          throw new Error("unknown signature");
        };
        function _(e2, t2, r2, n2, i2) {
          this.coerceFunc = e2, this.name = t2, this.type = r2, this.localName = n2, this.dynamic = i2;
        }
        var M, A = (i(E, M = _), E.prototype.encode = function(e2) {
          return this.coder.encode(e2);
        }, E.prototype.decode = function(e2, t2) {
          return this.coder.decode(e2, t2);
        }, E);
        function E(e2) {
          var t2 = M.call(this, e2.coerceFunc, e2.name, e2.type, void 0, e2.dynamic) || this;
          return c.defineReadOnly(t2, "coder", e2), t2;
        }
        var S, k = (i(N, S = _), N.prototype.encode = function(e2) {
          return h.arrayify([]);
        }, N.prototype.decode = function(e2, t2) {
          if (t2 > e2.length)
            throw new Error("invalid null");
          return { consumed: 0, value: this.coerceFunc("null", void 0) };
        }, N);
        function N(e2, t2) {
          return S.call(this, e2, "null", "", t2, false) || this;
        }
        var x, P = (i(I, x = _), I.prototype.encode = function(t2) {
          try {
            var e2 = u.bigNumberify(t2);
            if (this.signed) {
              var r2 = s.MaxUint256.maskn(8 * this.size - 1);
              if (e2.gt(r2))
                throw new Error("out-of-bounds");
              if (r2 = r2.add(s.One).mul(s.NegativeOne), e2.lt(r2))
                throw new Error("out-of-bounds");
            } else if (e2.lt(s.Zero) || e2.gt(s.MaxUint256.maskn(8 * this.size)))
              throw new Error("out-of-bounds");
            return e2 = e2.toTwos(8 * this.size).maskn(8 * this.size), this.signed && (e2 = e2.fromTwos(8 * this.size).toTwos(256)), h.padZeros(h.arrayify(e2), 32);
          } catch (e3) {
            l.throwError("invalid number value", l.INVALID_ARGUMENT, { arg: this.localName, coderType: this.name, value: t2 });
          }
          return null;
        }, I.prototype.decode = function(e2, t2) {
          e2.length < t2 + 32 && l.throwError("insufficient data for " + this.name + " type", l.INVALID_ARGUMENT, { arg: this.localName, coderType: this.name, value: h.hexlify(e2.slice(t2, t2 + 32)) });
          var r2 = 32 - this.size, n2 = u.bigNumberify(e2.slice(t2 + r2, t2 + 32));
          return n2 = this.signed ? n2.fromTwos(8 * this.size) : n2.maskn(8 * this.size), { consumed: 32, value: this.coerceFunc(this.name, n2) };
        }, I);
        function I(e2, t2, r2, n2) {
          var i2 = this, o2 = (r2 ? "int" : "uint") + 8 * t2;
          return (i2 = x.call(this, e2, o2, o2, n2, false) || this).size = t2, i2.signed = r2, i2;
        }
        var T, R = new P(function(e2, t2) {
          return t2;
        }, 32, false, "none"), O = (i(C, T = _), C.prototype.encode = function(e2) {
          return R.encode(e2 ? 1 : 0);
        }, C.prototype.decode = function(e2, t2) {
          try {
            var r2 = R.decode(e2, t2);
          } catch (e3) {
            throw e3.reason === "insufficient data for uint256 type" && l.throwError("insufficient data for boolean type", l.INVALID_ARGUMENT, { arg: this.localName, coderType: "boolean", value: e3.value }), e3;
          }
          return { consumed: r2.consumed, value: this.coerceFunc("bool", !r2.value.isZero()) };
        }, C);
        function C(e2, t2) {
          return T.call(this, e2, "bool", "bool", t2, false) || this;
        }
        var L, D = (i(B, L = _), B.prototype.encode = function(t2) {
          var e2 = new Uint8Array(32);
          try {
            var r2 = h.arrayify(t2);
            if (r2.length !== this.length)
              throw new Error("incorrect data length");
            e2.set(r2);
          } catch (e3) {
            l.throwError("invalid " + this.name + " value", l.INVALID_ARGUMENT, { arg: this.localName, coderType: this.name, value: e3.value || t2 });
          }
          return e2;
        }, B.prototype.decode = function(e2, t2) {
          return e2.length < t2 + 32 && l.throwError("insufficient data for " + this.name + " type", l.INVALID_ARGUMENT, { arg: this.localName, coderType: this.name, value: h.hexlify(e2.slice(t2, t2 + 32)) }), { consumed: 32, value: this.coerceFunc(this.name, h.hexlify(e2.slice(t2, t2 + this.length))) };
        }, B);
        function B(e2, t2, r2) {
          var n2 = this, i2 = "bytes" + t2;
          return (n2 = L.call(this, e2, i2, i2, r2, false) || this).length = t2, n2;
        }
        var U, F = (i(j, U = _), j.prototype.encode = function(t2) {
          var e2 = new Uint8Array(32);
          try {
            e2.set(h.arrayify(a.getAddress(t2)), 12);
          } catch (e3) {
            l.throwError("invalid address", l.INVALID_ARGUMENT, { arg: this.localName, coderType: "address", value: t2 });
          }
          return e2;
        }, j.prototype.decode = function(e2, t2) {
          return e2.length < t2 + 32 && l.throwError("insufficient data for address type", l.INVALID_ARGUMENT, { arg: this.localName, coderType: "address", value: h.hexlify(e2.slice(t2, t2 + 32)) }), { consumed: 32, value: this.coerceFunc("address", a.getAddress(h.hexlify(e2.slice(t2 + 12, t2 + 32)))) };
        }, j);
        function j(e2, t2) {
          return U.call(this, e2, "address", "address", t2, false) || this;
        }
        function G(e2) {
          var t2 = 32 * Math.ceil(e2.length / 32), r2 = new Uint8Array(t2 - e2.length);
          return h.concat([R.encode(e2.length), e2, r2]);
        }
        function H(e2, t2, r2) {
          e2.length < t2 + 32 && l.throwError("insufficient data for dynamicBytes length", l.INVALID_ARGUMENT, { arg: r2, coderType: "dynamicBytes", value: h.hexlify(e2.slice(t2, t2 + 32)) });
          var n2 = R.decode(e2, t2).value;
          try {
            n2 = n2.toNumber();
          } catch (e3) {
            l.throwError("dynamic bytes count too large", l.INVALID_ARGUMENT, { arg: r2, coderType: "dynamicBytes", value: n2.toString() });
          }
          return e2.length < t2 + 32 + n2 && l.throwError("insufficient data for dynamicBytes type", l.INVALID_ARGUMENT, { arg: r2, coderType: "dynamicBytes", value: h.hexlify(e2.slice(t2, t2 + 32 + n2)) }), { consumed: 32 + 32 * Math.ceil(n2 / 32), value: e2.slice(t2 + 32, t2 + 32 + n2) };
        }
        var z, V = (i(K, z = _), K.prototype.encode = function(e2) {
          try {
            return G(h.arrayify(e2));
          } catch (e3) {
            l.throwError("invalid bytes value", l.INVALID_ARGUMENT, { arg: this.localName, coderType: "bytes", value: e3.value });
          }
          return null;
        }, K.prototype.decode = function(e2, t2) {
          var r2 = H(e2, t2, this.localName);
          return r2.value = this.coerceFunc("bytes", h.hexlify(r2.value)), r2;
        }, K);
        function K(e2, t2) {
          return z.call(this, e2, "bytes", "bytes", t2, true) || this;
        }
        var q, W = (i(Z, q = _), Z.prototype.encode = function(e2) {
          return typeof e2 != "string" && l.throwError("invalid string value", l.INVALID_ARGUMENT, { arg: this.localName, coderType: "string", value: e2 }), G(f2.toUtf8Bytes(e2));
        }, Z.prototype.decode = function(e2, t2) {
          var r2 = H(e2, t2, this.localName);
          return r2.value = this.coerceFunc("string", f2.toUtf8String(r2.value)), r2;
        }, Z);
        function Z(e2, t2) {
          return q.call(this, e2, "string", "string", t2, true) || this;
        }
        function J(e2) {
          return 32 * Math.ceil(e2 / 32);
        }
        function X(e2, r2) {
          if (Array.isArray(r2))
            ;
          else if (r2 && typeof r2 == "object") {
            var t2 = [];
            e2.forEach(function(e3) {
              t2.push(r2[e3.localName]);
            }), r2 = t2;
          } else
            l.throwError("invalid tuple value", l.INVALID_ARGUMENT, { coderType: "tuple", value: r2 });
          e2.length !== r2.length && l.throwError("types/value length mismatch", l.INVALID_ARGUMENT, { coderType: "tuple", value: r2 });
          var n2 = [];
          e2.forEach(function(e3, t3) {
            n2.push({ dynamic: e3.dynamic, value: e3.encode(r2[t3]) });
          });
          var i2 = 0, o2 = 0;
          n2.forEach(function(e3) {
            e3.dynamic ? (i2 += 32, o2 += J(e3.value.length)) : i2 += J(e3.value.length);
          });
          var s2 = 0, a2 = i2, u2 = new Uint8Array(i2 + o2);
          return n2.forEach(function(e3) {
            e3.dynamic ? (u2.set(R.encode(a2), s2), s2 += 32, u2.set(e3.value, a2), a2 += J(e3.value.length)) : (u2.set(e3.value, s2), s2 += J(e3.value.length));
          }), u2;
        }
        function $(e2, n2, i2) {
          var o2 = i2, s2 = 0, a2 = [];
          return e2.forEach(function(e3) {
            if (e3.dynamic) {
              var t2 = R.decode(n2, i2);
              (r2 = e3.decode(n2, o2 + t2.value.toNumber())).consumed = t2.consumed;
            } else
              var r2 = e3.decode(n2, i2);
            r2.value != null && a2.push(r2.value), i2 += r2.consumed, s2 += r2.consumed;
          }), e2.forEach(function(e3, t2) {
            var r2 = e3.localName;
            r2 && (r2 === "length" && (r2 = "_length"), a2[r2] == null && (a2[r2] = a2[t2]));
          }), { value: a2, consumed: s2 };
        }
        var Q, Y = (i(ee, Q = _), ee.prototype.encode = function(e2) {
          Array.isArray(e2) || l.throwError("expected array value", l.INVALID_ARGUMENT, { arg: this.localName, coderType: "array", value: e2 });
          var t2 = this.length, r2 = new Uint8Array(0);
          t2 === -1 && (t2 = e2.length, r2 = R.encode(t2)), l.checkArgumentCount(t2, e2.length, " in coder array" + (this.localName ? " " + this.localName : ""));
          for (var n2 = [], i2 = 0; i2 < e2.length; i2++)
            n2.push(this.coder);
          return h.concat([r2, X(n2, e2)]);
        }, ee.prototype.decode = function(e2, t2) {
          var r2 = 0, n2 = this.length;
          if (n2 === -1) {
            try {
              var i2 = R.decode(e2, t2);
            } catch (e3) {
              l.throwError("insufficient data for dynamic array length", l.INVALID_ARGUMENT, { arg: this.localName, coderType: "array", value: e3.value });
            }
            try {
              n2 = i2.value.toNumber();
            } catch (e3) {
              l.throwError("array count too large", l.INVALID_ARGUMENT, { arg: this.localName, coderType: "array", value: i2.value.toString() });
            }
            r2 += i2.consumed, t2 += i2.consumed;
          }
          for (var o2 = [], s2 = 0; s2 < n2; s2++)
            o2.push(new A(this.coder));
          var a2 = $(o2, e2, t2);
          return a2.consumed += r2, a2.value = this.coerceFunc(this.type, a2.value), a2;
        }, ee);
        function ee(e2, t2, r2, n2) {
          var i2 = this, o2 = t2.type + "[" + (0 <= r2 ? r2 : "") + "]", s2 = r2 === -1 || t2.dynamic;
          return (i2 = Q.call(this, e2, "array", o2, n2, s2) || this).coder = t2, i2.length = r2, i2;
        }
        var te, re = (i(ne, te = _), ne.prototype.encode = function(e2) {
          return X(this.coders, e2);
        }, ne.prototype.decode = function(e2, t2) {
          var r2 = $(this.coders, e2, t2);
          return r2.value = this.coerceFunc(this.type, r2.value), r2;
        }, ne);
        function ne(e2, t2, r2) {
          var n2 = this, i2 = false, o2 = [];
          t2.forEach(function(e3) {
            e3.dynamic && (i2 = true), o2.push(e3.type);
          });
          var s2 = "tuple(" + o2.join(",") + ")";
          return (n2 = te.call(this, e2, "tuple", s2, r2, i2) || this).coders = t2, n2;
        }
        function ie(e2) {
          e2 = e2.trim();
          for (var t2 = [], r2 = "", n2 = 0, i2 = 0; i2 < e2.length; i2++) {
            var o2 = e2[i2];
            if (o2 === "," && n2 === 0)
              t2.push(r2), r2 = "";
            else if (r2 += o2, o2 === "(")
              n2++;
            else if (o2 === ")" && --n2 === -1)
              throw new Error("unbalanced parenthsis");
          }
          return r2 && t2.push(r2), t2;
        }
        var oe = { address: F, bool: O, string: W, bytes: V };
        function se(e2, t2) {
          var r2, n2 = oe[t2.type];
          if (n2)
            return new n2(e2, t2.name);
          if (r2 = t2.type.match(p))
            return ((i2 = parseInt(r2[2] || "256")) === 0 || 256 < i2 || i2 % 8 != 0) && l.throwError("invalid " + r2[1] + " bit length", l.INVALID_ARGUMENT, { arg: "param", value: t2 }), new P(e2, i2 / 8, r2[1] === "int", t2.name);
          if (r2 = t2.type.match(d))
            return ((i2 = parseInt(r2[1])) === 0 || 32 < i2) && l.throwError("invalid bytes length", l.INVALID_ARGUMENT, { arg: "param", value: t2 }), new D(e2, i2, t2.name);
          if (r2 = t2.type.match(v)) {
            var i2 = parseInt(r2[2] || "-1");
            return (t2 = c.shallowCopy(t2)).type = r2[1], t2 = c.deepCopy(t2), new Y(e2, se(e2, t2), i2, t2.name);
          }
          return t2.type.substring(0, 5) === "tuple" ? function(t3, e3, r3) {
            var n3 = [];
            return (e3 = e3 || []).forEach(function(e4) {
              n3.push(se(t3, e4));
            }), new re(t3, n3, r3);
          }(e2, t2.components, t2.name) : t2.type === "" ? new k(e2, t2.name) : (l.throwError("invalid type", l.INVALID_ARGUMENT, { arg: "type", value: t2.type }), null);
        }
        var ae = (ue.prototype.encode = function(e2, t2) {
          e2.length !== t2.length && l.throwError("types/values length mismatch", l.INVALID_ARGUMENT, { count: { types: e2.length, values: t2.length }, value: { types: e2, values: t2 } });
          var r2 = [];
          return e2.forEach(function(e3) {
            var t3 = null;
            t3 = typeof e3 == "string" ? b(e3) : e3, r2.push(se(this.coerceFunc, t3));
          }, this), h.hexlify(new re(this.coerceFunc, r2, "_").encode(t2));
        }, ue.prototype.decode = function(e2, t2) {
          var r2 = [];
          return e2.forEach(function(e3) {
            var t3 = null;
            t3 = typeof e3 == "string" ? b(e3) : c.deepCopy(e3), r2.push(se(this.coerceFunc, t3));
          }, this), new re(this.coerceFunc, r2, "_").decode(h.arrayify(t2), 0).value;
        }, ue);
        function ue(e2) {
          l.checkNew(this, ue), e2 = e2 || r.defaultCoerceFunc, c.defineReadOnly(this, "coerceFunc", e2);
        }
        r.AbiCoder = ae, r.defaultAbiCoder = new ae();
      }, { "../constants": 3, "../errors": 5, "./address": 60, "./bignumber": 63, "./bytes": 64, "./properties": 74, "./utf8": 85 }], 60: [function(e, t, r) {
        "use strict";
        var n = this && this.__importDefault || function(e2) {
          return e2 && e2.__esModule ? e2 : { default: e2 };
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var i = n(e("bn.js")), o = e("./bytes"), s = e("./keccak256"), a = e("./rlp"), u = e("../errors");
        function l(e2) {
          typeof e2 == "string" && e2.match(/^0x[0-9A-Fa-f]{40}$/) || u.throwError("invalid address", u.INVALID_ARGUMENT, { arg: "address", value: e2 });
          for (var t2 = (e2 = e2.toLowerCase()).substring(2).split(""), r2 = new Uint8Array(40), n2 = 0; n2 < 40; n2++)
            r2[n2] = t2[n2].charCodeAt(0);
          r2 = o.arrayify(s.keccak256(r2));
          for (var i2 = 0; i2 < 40; i2 += 2)
            8 <= r2[i2 >> 1] >> 4 && (t2[i2] = t2[i2].toUpperCase()), 8 <= (15 & r2[i2 >> 1]) && (t2[i2 + 1] = t2[i2 + 1].toUpperCase());
          return "0x" + t2.join("");
        }
        for (var h = {}, f2 = 0; f2 < 10; f2++)
          h[String(f2)] = String(f2);
        for (f2 = 0; f2 < 26; f2++)
          h[String.fromCharCode(65 + f2)] = String(10 + f2);
        var c, d = Math.floor((c = 9007199254740991, Math.log10 ? Math.log10(c) : Math.log(c) / Math.LN10));
        function p(e2) {
          e2 = (e2 = e2.toUpperCase()).substring(4) + e2.substring(0, 2) + "00";
          var t2 = "";
          for (e2.split("").forEach(function(e3) {
            t2 += h[e3];
          }); t2.length >= d; ) {
            var r2 = t2.substring(0, d);
            t2 = parseInt(r2, 10) % 97 + t2.substring(r2.length);
          }
          for (var n2 = String(98 - parseInt(t2, 10) % 97); n2.length < 2; )
            n2 = "0" + n2;
          return n2;
        }
        function v(e2) {
          var t2 = null;
          if (typeof e2 != "string" && u.throwError("invalid address", u.INVALID_ARGUMENT, { arg: "address", value: e2 }), e2.match(/^(0x)?[0-9a-fA-F]{40}$/))
            e2.substring(0, 2) !== "0x" && (e2 = "0x" + e2), t2 = l(e2), e2.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t2 !== e2 && u.throwError("bad address checksum", u.INVALID_ARGUMENT, { arg: "address", value: e2 });
          else if (e2.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            for (e2.substring(2, 4) !== p(e2) && u.throwError("bad icap checksum", u.INVALID_ARGUMENT, { arg: "address", value: e2 }), t2 = new i.default.BN(e2.substring(4), 36).toString(16); t2.length < 40; )
              t2 = "0" + t2;
            t2 = l("0x" + t2);
          } else
            u.throwError("invalid address", u.INVALID_ARGUMENT, { arg: "address", value: e2 });
          return t2;
        }
        r.getAddress = v, r.getIcapAddress = function(e2) {
          for (var t2 = new i.default.BN(v(e2).substring(2), 16).toString(36).toUpperCase(); t2.length < 30; )
            t2 = "0" + t2;
          return "XE" + p("XE00" + t2) + t2;
        }, r.getContractAddress = function(e2) {
          if (!e2.from)
            throw new Error("missing from address");
          var t2 = e2.nonce;
          return v("0x" + s.keccak256(a.encode([v(e2.from), o.stripZeros(o.hexlify(t2))])).substring(26));
        }, r.getCreate2Address = function(e2) {
          var t2 = e2.initCodeHash;
          e2.initCode && (t2 ? s.keccak256(e2.initCode) !== t2 && u.throwError("initCode/initCodeHash mismatch", u.INVALID_ARGUMENT, { arg: "options", value: e2 }) : t2 = s.keccak256(e2.initCode)), t2 || u.throwError("missing initCode or initCodeHash", u.INVALID_ARGUMENT, { arg: "options", value: e2 });
          var r2 = v(e2.from), n2 = o.arrayify(e2.salt);
          return n2.length !== 32 && u.throwError("invalid salt", u.INVALID_ARGUMENT, { arg: "options", value: e2 }), v("0x" + s.keccak256(o.concat(["0xff", r2, n2, t2])).substring(26));
        };
      }, { "../errors": 5, "./bytes": 64, "./keccak256": 71, "./rlp": 76, "bn.js": 9 }], 61: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        var n = e("../utils/bytes");
        t.exports = { decode: function(e2) {
          e2 = atob(e2);
          for (var t2 = [], r2 = 0; r2 < e2.length; r2++)
            t2.push(e2.charCodeAt(r2));
          return n.arrayify(t2);
        }, encode: function(e2) {
          e2 = n.arrayify(e2);
          for (var t2 = "", r2 = 0; r2 < e2.length; r2++)
            t2 += String.fromCharCode(e2[r2]);
          return btoa(t2);
        } };
      }, { "../utils/bytes": 64 }], 62: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        var l = e("./bytes"), n = e("./properties"), i = (o.prototype.encode = function(e2) {
          var t2 = l.arrayify(e2);
          if (t2.length === 0)
            return "";
          for (var r2 = [0], n2 = 0; n2 < t2.length; ++n2) {
            for (var i2 = t2[n2], o2 = 0; o2 < r2.length; ++o2)
              i2 += r2[o2] << 8, r2[o2] = i2 % this.base, i2 = i2 / this.base | 0;
            for (; 0 < i2; )
              r2.push(i2 % this.base), i2 = i2 / this.base | 0;
          }
          for (var s2 = "", a2 = 0; t2[a2] === 0 && a2 < t2.length - 1; ++a2)
            s2 += this._leader;
          for (var u = r2.length - 1; 0 <= u; --u)
            s2 += this.alphabet[r2[u]];
          return s2;
        }, o.prototype.decode = function(e2) {
          if (typeof e2 != "string")
            throw new TypeError("Expected String");
          var t2 = [];
          if (e2.length === 0)
            return new Uint8Array(t2);
          t2.push(0);
          for (var r2 = 0; r2 < e2.length; r2++) {
            var n2 = this._alphabetMap[e2[r2]];
            if (n2 === void 0)
              throw new Error("Non-base" + this.base + " character");
            for (var i2 = n2, o2 = 0; o2 < t2.length; ++o2)
              i2 += t2[o2] * this.base, t2[o2] = 255 & i2, i2 >>= 8;
            for (; 0 < i2; )
              t2.push(255 & i2), i2 >>= 8;
          }
          for (var s2 = 0; e2[s2] === this._leader && s2 < e2.length - 1; ++s2)
            t2.push(0);
          return l.arrayify(new Uint8Array(t2.reverse()));
        }, o);
        function o(e2) {
          n.defineReadOnly(this, "alphabet", e2), n.defineReadOnly(this, "base", e2.length), n.defineReadOnly(this, "_alphabetMap", {}), n.defineReadOnly(this, "_leader", e2.charAt(0));
          for (var t2 = 0; t2 < e2.length; t2++)
            this._alphabetMap[e2.charAt(t2)] = t2;
        }
        var s = new (r.BaseX = i)("abcdefghijklmnopqrstuvwxyz234567");
        r.Base32 = s;
        var a = new i("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
        r.Base58 = a;
      }, { "./bytes": 64, "./properties": 74 }], 63: [function(e, t, r) {
        "use strict";
        var n = this && this.__importDefault || function(e2) {
          return e2 && e2.__esModule ? e2 : { default: e2 };
        }, i = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var o = n(e("bn.js")), s = e("./bytes"), a = e("./properties"), u = i(e("../errors")), l = new o.default.BN(-1);
        function h(e2) {
          var t2 = e2.toString(16);
          return t2[0] === "-" ? t2.length % 2 == 0 ? "-0x0" + t2.substring(1) : "-0x" + t2.substring(1) : t2.length % 2 == 1 ? "0x0" + t2 : "0x" + t2;
        }
        function f2(e2) {
          return d(y(e2));
        }
        function c(e2) {
          return new p(h(e2));
        }
        function d(e2) {
          var t2 = e2._hex;
          return t2[0] === "-" ? new o.default.BN(t2.substring(3), 16).mul(l) : new o.default.BN(t2.substring(2), 16);
        }
        var p = (v.prototype.fromTwos = function(e2) {
          return c(d(this).fromTwos(e2));
        }, v.prototype.toTwos = function(e2) {
          return c(d(this).toTwos(e2));
        }, v.prototype.abs = function() {
          return this._hex[0] === "-" ? c(d(this).mul(l)) : this;
        }, v.prototype.add = function(e2) {
          return c(d(this).add(f2(e2)));
        }, v.prototype.sub = function(e2) {
          return c(d(this).sub(f2(e2)));
        }, v.prototype.div = function(e2) {
          return y(e2).isZero() && u.throwError("division by zero", u.NUMERIC_FAULT, { operation: "divide", fault: "division by zero" }), c(d(this).div(f2(e2)));
        }, v.prototype.mul = function(e2) {
          return c(d(this).mul(f2(e2)));
        }, v.prototype.mod = function(e2) {
          return c(d(this).mod(f2(e2)));
        }, v.prototype.pow = function(e2) {
          return c(d(this).pow(f2(e2)));
        }, v.prototype.maskn = function(e2) {
          return c(d(this).maskn(e2));
        }, v.prototype.eq = function(e2) {
          return d(this).eq(f2(e2));
        }, v.prototype.lt = function(e2) {
          return d(this).lt(f2(e2));
        }, v.prototype.lte = function(e2) {
          return d(this).lte(f2(e2));
        }, v.prototype.gt = function(e2) {
          return d(this).gt(f2(e2));
        }, v.prototype.gte = function(e2) {
          return d(this).gte(f2(e2));
        }, v.prototype.isZero = function() {
          return d(this).isZero();
        }, v.prototype.toNumber = function() {
          try {
            return d(this).toNumber();
          } catch (e2) {
            u.throwError("overflow", u.NUMERIC_FAULT, { operation: "setValue", fault: "overflow", details: e2.message });
          }
          return null;
        }, v.prototype.toString = function() {
          return d(this).toString(10);
        }, v.prototype.toHexString = function() {
          return this._hex;
        }, v.isBigNumber = function(e2) {
          return a.isType(e2, "BigNumber");
        }, v);
        function v(e2) {
          if (u.checkNew(this, v), a.setType(this, "BigNumber"), typeof e2 == "string")
            s.isHexString(e2) ? (e2 == "0x" && (e2 = "0x0"), a.defineReadOnly(this, "_hex", e2)) : e2[0] === "-" && s.isHexString(e2.substring(1)) ? a.defineReadOnly(this, "_hex", e2) : e2.match(/^-?[0-9]*$/) ? (e2 == "" && (e2 = "0"), a.defineReadOnly(this, "_hex", h(new o.default.BN(e2)))) : u.throwError("invalid BigNumber string value", u.INVALID_ARGUMENT, { arg: "value", value: e2 });
          else if (typeof e2 == "number") {
            parseInt(String(e2)) !== e2 && u.throwError("underflow", u.NUMERIC_FAULT, { operation: "setValue", fault: "underflow", value: e2, outputValue: parseInt(String(e2)) });
            try {
              a.defineReadOnly(this, "_hex", h(new o.default.BN(e2)));
            } catch (e3) {
              u.throwError("overflow", u.NUMERIC_FAULT, { operation: "setValue", fault: "overflow", details: e3.message });
            }
          } else
            e2 instanceof v ? a.defineReadOnly(this, "_hex", e2._hex) : e2.toHexString ? a.defineReadOnly(this, "_hex", h(f2(e2.toHexString()))) : e2._hex && s.isHexString(e2._hex) ? a.defineReadOnly(this, "_hex", e2._hex) : s.isArrayish(e2) ? a.defineReadOnly(this, "_hex", h(new o.default.BN(s.hexlify(e2).substring(2), 16))) : u.throwError("invalid BigNumber value", u.INVALID_ARGUMENT, { arg: "value", value: e2 });
        }
        function y(e2) {
          return p.isBigNumber(e2) ? e2 : new p(e2);
        }
        r.BigNumber = p, r.bigNumberify = y;
      }, { "../errors": 5, "./bytes": 64, "./properties": 74, "bn.js": 9 }], 64: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var s = n(e("../errors"));
        function a(e2) {
          return !!e2.toHexString;
        }
        function u(t2) {
          return t2.slice || (t2.slice = function() {
            var e2 = Array.prototype.slice.call(arguments);
            return u(new Uint8Array(Array.prototype.slice.apply(t2, e2)));
          }), t2;
        }
        function l(e2) {
          if (!e2 || parseInt(String(e2.length)) != e2.length || typeof e2 == "string")
            return false;
          for (var t2 = 0; t2 < e2.length; t2++) {
            var r2 = e2[t2];
            if (r2 < 0 || 256 <= r2 || parseInt(String(r2)) != r2)
              return false;
          }
          return true;
        }
        function h(e2) {
          if (e2 == null && s.throwError("cannot convert null value to array", s.INVALID_ARGUMENT, { arg: "value", value: e2 }), a(e2) && (e2 = e2.toHexString()), typeof e2 != "string")
            return l(e2) ? u(new Uint8Array(e2)) : (s.throwError("invalid arrayify value", null, { arg: "value", value: e2, type: typeof e2 }), null);
          var t2 = e2.match(/^(0x)?[0-9a-fA-F]*$/);
          t2 || s.throwError("invalid hexidecimal string", s.INVALID_ARGUMENT, { arg: "value", value: e2 }), t2[1] !== "0x" && s.throwError("hex string must have 0x prefix", s.INVALID_ARGUMENT, { arg: "value", value: e2 }), (e2 = e2.substring(2)).length % 2 && (e2 = "0" + e2);
          for (var r2 = [], n2 = 0; n2 < e2.length; n2 += 2)
            r2.push(parseInt(e2.substr(n2, 2), 16));
          return u(new Uint8Array(r2));
        }
        function i(e2) {
          for (var t2 = [], r2 = 0, n2 = 0; n2 < e2.length; n2++) {
            var i2 = h(e2[n2]);
            t2.push(i2), r2 += i2.length;
          }
          var o2 = new Uint8Array(r2), s2 = 0;
          for (n2 = 0; n2 < t2.length; n2++)
            o2.set(t2[n2], s2), s2 += t2[n2].length;
          return u(o2);
        }
        function o(e2, t2) {
          return !(typeof e2 != "string" || !e2.match(/^0x[0-9A-Fa-f]*$/)) && (!t2 || e2.length === 2 + 2 * t2);
        }
        r.isHexable = a, r.isArrayish = l, r.arrayify = h, r.concat = i, r.stripZeros = function(e2) {
          var t2 = h(e2);
          if (t2.length === 0)
            return t2;
          for (var r2 = 0; t2[r2] === 0; )
            r2++;
          return r2 && (t2 = t2.slice(r2)), t2;
        }, r.padZeros = function(e2, t2) {
          if (t2 < (e2 = h(e2)).length)
            throw new Error("cannot pad");
          var r2 = new Uint8Array(t2);
          return r2.set(e2, t2 - e2.length), u(r2);
        }, r.isHexString = o;
        var f2 = "0123456789abcdef";
        function c(e2) {
          if (a(e2))
            return e2.toHexString();
          if (typeof e2 == "number") {
            e2 < 0 && s.throwError("cannot hexlify negative value", s.INVALID_ARGUMENT, { arg: "value", value: e2 }), 9007199254740991 <= e2 && s.throwError("out-of-range", s.NUMERIC_FAULT, { operartion: "hexlify", fault: "out-of-safe-range" });
            for (var t2 = ""; e2; )
              t2 = f2[15 & e2] + t2, e2 = Math.floor(e2 / 16);
            return t2.length ? (t2.length % 2 && (t2 = "0" + t2), "0x" + t2) : "0x00";
          }
          if (typeof e2 == "string") {
            var r2 = e2.match(/^(0x)?[0-9a-fA-F]*$/);
            return r2 || s.throwError("invalid hexidecimal string", s.INVALID_ARGUMENT, { arg: "value", value: e2 }), r2[1] !== "0x" && s.throwError("hex string must have 0x prefix", s.INVALID_ARGUMENT, { arg: "value", value: e2 }), e2.length % 2 && (e2 = "0x0" + e2.substring(2)), e2;
          }
          if (l(e2)) {
            for (var n2 = [], i2 = 0; i2 < e2.length; i2++) {
              var o2 = e2[i2];
              n2.push(f2[(240 & o2) >> 4] + f2[15 & o2]);
            }
            return "0x" + n2.join("");
          }
          return s.throwError("invalid hexlify value", null, { arg: "value", value: e2 }), "never";
        }
        function d(e2, t2) {
          for (o(e2) || s.throwError("invalid hex string", s.INVALID_ARGUMENT, { arg: "value", value: e2 }); e2.length < 2 * t2 + 2; )
            e2 = "0x0" + e2.substring(2);
          return e2;
        }
        function p(e2) {
          var t2 = 0, r2 = "0x", n2 = "0x";
          if (function(e3) {
            return e3 && e3.r != null && e3.s != null;
          }(e2)) {
            e2.v == null && e2.recoveryParam == null && s.throwError("at least on of recoveryParam or v must be specified", s.INVALID_ARGUMENT, { argument: "signature", value: e2 }), r2 = d(e2.r, 32), n2 = d(e2.s, 32), typeof (t2 = e2.v) == "string" && (t2 = parseInt(t2, 16));
            var i2 = e2.recoveryParam;
            i2 == null && e2.v != null && (i2 = 1 - t2 % 2), t2 = 27 + i2;
          } else {
            var o2 = h(e2);
            if (o2.length !== 65)
              throw new Error("invalid signature");
            r2 = c(o2.slice(0, 32)), n2 = c(o2.slice(32, 64)), (t2 = o2[64]) !== 27 && t2 !== 28 && (t2 = 27 + t2 % 2);
          }
          return { r: r2, s: n2, recoveryParam: t2 - 27, v: t2 };
        }
        r.hexlify = c, r.hexDataLength = function(e2) {
          return o(e2) && e2.length % 2 == 0 ? (e2.length - 2) / 2 : null;
        }, r.hexDataSlice = function(e2, t2, r2) {
          return o(e2) || s.throwError("invalid hex data", s.INVALID_ARGUMENT, { arg: "value", value: e2 }), e2.length % 2 != 0 && s.throwError("hex data length must be even", s.INVALID_ARGUMENT, { arg: "value", value: e2 }), t2 = 2 + 2 * t2, r2 != null ? "0x" + e2.substring(t2, 2 + 2 * r2) : "0x" + e2.substring(t2);
        }, r.hexStripZeros = function(e2) {
          for (o(e2) || s.throwError("invalid hex string", s.INVALID_ARGUMENT, { arg: "value", value: e2 }); 3 < e2.length && e2.substring(0, 3) === "0x0"; )
            e2 = "0x" + e2.substring(3);
          return e2;
        }, r.hexZeroPad = d, r.splitSignature = p, r.joinSignature = function(e2) {
          return c(i([(e2 = p(e2)).r, e2.s, e2.recoveryParam ? "0x1c" : "0x1b"]));
        };
      }, { "../errors": 5 }], 65: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var i = n(e("../errors")), o = e("./bytes"), s = e("./utf8"), a = e("./keccak256"), u = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), l = new RegExp("^((.*)\\.)?([^.]+)$"), h = new RegExp("^[a-z0-9.-]*$");
        r.namehash = function(e2) {
          typeof e2 != "string" && i.throwError("invalid address - " + String(e2), i.INVALID_ARGUMENT, { argument: "name", value: e2 }), (e2 = e2.toLowerCase()).match(h) || i.throwError("contains invalid UseSTD3ASCIIRules characters", i.INVALID_ARGUMENT, { argument: "name", value: e2 });
          for (var t2 = u; e2.length; ) {
            var r2 = e2.match(l), n2 = s.toUtf8Bytes(r2[3]);
            t2 = a.keccak256(o.concat([t2, a.keccak256(n2)])), e2 = r2[2] || "";
          }
          return o.hexlify(t2);
        }, r.id = function(e2) {
          return a.keccak256(s.toUtf8Bytes(e2));
        }, r.hashMessage = function(e2) {
          return a.keccak256(o.concat([s.toUtf8Bytes("Ethereum Signed Message:\n"), s.toUtf8Bytes(String(e2.length)), typeof e2 == "string" ? s.toUtf8Bytes(e2) : e2]));
        };
      }, { "../errors": 5, "./bytes": 64, "./keccak256": 71, "./utf8": 85 }], 66: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var f2 = n(e("../errors")), c = e("../wordlists/lang-en"), a = e("./basex"), d = e("./bytes"), l = e("./bignumber"), i = e("./utf8"), o = e("./pbkdf2"), h = e("./hmac"), p = e("./properties"), v = e("./secp256k1"), y = e("./sha2"), m = l.bigNumberify("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), s = i.toUtf8Bytes("Bitcoin seed"), g = 2147483648;
        function b(e2) {
          return (1 << e2) - 1 << 8 - e2;
        }
        function w(e2) {
          return d.hexZeroPad(d.hexlify(e2), 32);
        }
        function u(e2) {
          var t2 = d.hexDataSlice(y.sha256(y.sha256(e2)), 0, 4);
          return a.Base58.encode(d.concat([e2, t2]));
        }
        var _ = {};
        r.defaultPath = "m/44'/60'/0'/0/0";
        var M = (Object.defineProperty(A.prototype, "extendedKey", { get: function() {
          if (256 <= this.depth)
            throw new Error("Depth too large!");
          return u(d.concat([this.privateKey != null ? "0x0488ADE4" : "0x0488B21E", d.hexlify(this.depth), this.parentFingerprint, d.hexZeroPad(d.hexlify(this.index), 4), this.chainCode, this.privateKey != null ? d.concat(["0x00", this.privateKey]) : this.publicKey]));
        }, enumerable: true, configurable: true }), A.prototype.neuter = function() {
          return new A(_, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, null, this.path);
        }, A.prototype._derive = function(e2) {
          if (4294967295 < e2)
            throw new Error("invalid index - " + String(e2));
          var t2 = this.path;
          t2 && (t2 += "/" + (e2 & ~g));
          var r2 = new Uint8Array(37);
          if (e2 & g) {
            if (!this.privateKey)
              throw new Error("cannot derive child of neutered node");
            r2.set(d.arrayify(this.privateKey), 1), t2 && (t2 += "'");
          } else
            r2.set(d.arrayify(this.publicKey));
          for (var n2 = 24; 0 <= n2; n2 -= 8)
            r2[33 + (n2 >> 3)] = e2 >> 24 - n2 & 255;
          var i2 = h.computeHmac(h.SupportedAlgorithms.sha512, this.chainCode, r2), o2 = i2.slice(0, 32), s2 = i2.slice(32), a2 = null, u2 = null;
          return this.privateKey ? a2 = w(l.bigNumberify(o2).add(this.privateKey).mod(m)) : u2 = new v.KeyPair(d.hexlify(o2))._addPoint(this.publicKey), new A(_, a2, u2, this.fingerprint, w(s2), e2, this.depth + 1, this.mnemonic, t2);
        }, A.prototype.derivePath = function(e2) {
          var t2 = e2.split("/");
          if (t2.length === 0 || t2[0] === "m" && this.depth !== 0)
            throw new Error("invalid path - " + e2);
          t2[0] === "m" && t2.shift();
          for (var r2 = this, n2 = 0; n2 < t2.length; n2++) {
            var i2 = t2[n2];
            if (i2.match(/^[0-9]+'$/)) {
              var o2 = parseInt(i2.substring(0, i2.length - 1));
              if (g <= o2)
                throw new Error("invalid path index - " + i2);
              r2 = r2._derive(g + o2);
            } else {
              if (!i2.match(/^[0-9]+$/))
                throw new Error("invalid path component - " + i2);
              if (o2 = parseInt(i2), g <= o2)
                throw new Error("invalid path index - " + i2);
              r2 = r2._derive(o2);
            }
          }
          return r2;
        }, A.isHDNode = function(e2) {
          return p.isType(e2, "HDNode");
        }, A);
        function A(e2, t2, r2, n2, i2, o2, s2, a2, u2) {
          if (f2.checkNew(this, A), e2 !== _)
            throw new Error("HDNode constructor cannot be called directly");
          if (t2) {
            var l2 = new v.KeyPair(t2);
            p.defineReadOnly(this, "privateKey", l2.privateKey), p.defineReadOnly(this, "publicKey", l2.compressedPublicKey);
          } else
            p.defineReadOnly(this, "privateKey", null), p.defineReadOnly(this, "publicKey", d.hexlify(r2));
          p.defineReadOnly(this, "parentFingerprint", n2), p.defineReadOnly(this, "fingerprint", d.hexDataSlice(y.ripemd160(y.sha256(this.publicKey)), 0, 4)), p.defineReadOnly(this, "address", v.computeAddress(this.publicKey)), p.defineReadOnly(this, "chainCode", i2), p.defineReadOnly(this, "index", o2), p.defineReadOnly(this, "depth", s2), p.defineReadOnly(this, "mnemonic", a2), p.defineReadOnly(this, "path", u2), p.setType(this, "HDNode");
        }
        function E(e2, t2) {
          var r2 = d.arrayify(e2);
          if (r2.length < 16 || 64 < r2.length)
            throw new Error("invalid seed");
          var n2 = d.arrayify(h.computeHmac(h.SupportedAlgorithms.sha512, s, r2));
          return new M(_, w(n2.slice(0, 32)), null, "0x00000000", w(n2.slice(32)), 0, 0, t2, "m");
        }
        function S(e2, t2) {
          t2 = t2 || "";
          var r2 = i.toUtf8Bytes("mnemonic" + t2, i.UnicodeNormalizationForm.NFKD);
          return d.hexlify(o.pbkdf2(i.toUtf8Bytes(e2, i.UnicodeNormalizationForm.NFKD), r2, 2048, 64, "sha512"));
        }
        function k(e2, t2) {
          t2 = t2 || c.langEn, f2.checkNormalize();
          var r2 = t2.split(e2);
          if (r2.length % 3 != 0)
            throw new Error("invalid mnemonic");
          for (var n2 = d.arrayify(new Uint8Array(Math.ceil(11 * r2.length / 8))), i2 = 0, o2 = 0; o2 < r2.length; o2++) {
            var s2 = t2.getWordIndex(r2[o2].normalize("NFKD"));
            if (s2 === -1)
              throw new Error("invalid mnemonic");
            for (var a2 = 0; a2 < 11; a2++)
              s2 & 1 << 10 - a2 && (n2[i2 >> 3] |= 1 << 7 - i2 % 8), i2++;
          }
          var u2 = 32 * r2.length / 3, l2 = b(r2.length / 3), h2 = d.arrayify(y.sha256(n2.slice(0, u2 / 8)))[0];
          if ((h2 &= l2) != (n2[n2.length - 1] & l2))
            throw new Error("invalid checksum");
          return d.hexlify(n2.slice(0, u2 / 8));
        }
        function N(e2, t2) {
          if ((e2 = d.arrayify(e2)).length % 4 != 0 || e2.length < 16 || 32 < e2.length)
            throw new Error("invalid entropy");
          for (var r2 = [0], n2 = 11, i2 = 0; i2 < e2.length; i2++)
            8 < n2 ? (r2[r2.length - 1] <<= 8, r2[r2.length - 1] |= e2[i2], n2 -= 8) : (r2[r2.length - 1] <<= n2, r2[r2.length - 1] |= e2[i2] >> 8 - n2, r2.push(e2[i2] & (1 << 8 - n2) - 1), n2 += 3);
          var o2 = d.arrayify(y.sha256(e2))[0], s2 = e2.length / 4;
          return o2 &= b(s2), r2[r2.length - 1] <<= s2, r2[r2.length - 1] |= o2 >> 8 - s2, (t2 = t2 || c.langEn).join(r2.map(function(e3) {
            return t2.getWord(e3);
          }));
        }
        r.HDNode = M, r.fromExtendedKey = function(e2) {
          var t2 = a.Base58.decode(e2);
          t2.length === 82 && u(t2.slice(0, 78)) === e2 || f2.throwError("invalid extended key", f2.INVALID_ARGUMENT, { argument: "extendedKey", value: "[REDACTED]" });
          var r2 = t2[4], n2 = d.hexlify(t2.slice(5, 9)), i2 = parseInt(d.hexlify(t2.slice(9, 13)).substring(2), 16), o2 = d.hexlify(t2.slice(13, 45)), s2 = t2.slice(45, 78);
          switch (d.hexlify(t2.slice(0, 4))) {
            case "0x0488b21e":
            case "0x043587cf":
              return new M(_, null, d.hexlify(s2), n2, o2, i2, r2, null, null);
            case "0x0488ade4":
            case "0x04358394":
              if (s2[0] !== 0)
                break;
              return new M(_, d.hexlify(s2.slice(1)), null, n2, o2, i2, r2, null, null);
          }
          return f2.throwError("invalid extended key", f2.INVALID_ARGUMENT, { argument: "extendedKey", value: "[REDACTED]" });
        }, r.fromMnemonic = function(e2, t2, r2) {
          return E(S(e2 = N(k(e2, t2), t2), r2), e2);
        }, r.fromSeed = function(e2) {
          return E(e2, null);
        }, r.mnemonicToSeed = S, r.mnemonicToEntropy = k, r.entropyToMnemonic = N, r.isValidMnemonic = function(e2, t2) {
          try {
            return k(e2, t2), true;
          } catch (e3) {
          }
          return false;
        };
      }, { "../errors": 5, "../wordlists/lang-en": 90, "./basex": 62, "./bignumber": 63, "./bytes": 64, "./hmac": 67, "./pbkdf2": 73, "./properties": 74, "./secp256k1": 77, "./sha2": 79, "./utf8": 85 }], 67: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var i, o, s = n(e("hash.js")), a = e("../utils/bytes"), u = n(e("../errors"));
        (o = i = r.SupportedAlgorithms || (r.SupportedAlgorithms = {})).sha256 = "sha256", o.sha512 = "sha512", r.computeHmac = function(e2, t2, r2) {
          return i[e2] || u.throwError("unsupported algorithm " + e2, u.UNSUPPORTED_OPERATION, { operation: "hmac", algorithm: e2 }), a.arrayify(s.hmac(s[e2], a.arrayify(t2)).update(a.arrayify(r2)).digest());
        };
      }, { "../errors": 5, "../utils/bytes": 64, "hash.js": 26 }], 68: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var i = e("./abi-coder");
        r.AbiCoder = i.AbiCoder, r.defaultAbiCoder = i.defaultAbiCoder, r.formatSignature = i.formatSignature, r.formatParamType = i.formatParamType, r.parseSignature = i.parseSignature, r.parseParamType = i.parseParamType;
        var o = e("./address");
        r.getAddress = o.getAddress, r.getContractAddress = o.getContractAddress, r.getCreate2Address = o.getCreate2Address, r.getIcapAddress = o.getIcapAddress;
        var s = n(e("./base64"));
        r.base64 = s;
        var a = e("./bignumber");
        r.BigNumber = a.BigNumber, r.bigNumberify = a.bigNumberify;
        var u = e("./bytes");
        r.arrayify = u.arrayify, r.concat = u.concat, r.hexDataSlice = u.hexDataSlice, r.hexDataLength = u.hexDataLength, r.hexlify = u.hexlify, r.hexStripZeros = u.hexStripZeros, r.hexZeroPad = u.hexZeroPad, r.isHexString = u.isHexString, r.joinSignature = u.joinSignature, r.padZeros = u.padZeros, r.splitSignature = u.splitSignature, r.stripZeros = u.stripZeros;
        var l = e("./hash");
        r.hashMessage = l.hashMessage, r.id = l.id, r.namehash = l.namehash;
        var h = n(e("./hdnode"));
        r.HDNode = h;
        var f2 = e("./interface");
        r.Interface = f2.Interface;
        var c = e("./json-wallet");
        r.getJsonWalletAddress = c.getJsonWalletAddress;
        var d = e("./keccak256");
        r.keccak256 = d.keccak256;
        var p = e("./sha2");
        r.sha256 = p.sha256;
        var v = e("./solidity");
        r.solidityKeccak256 = v.keccak256, r.solidityPack = v.pack, r.soliditySha256 = v.sha256;
        var y = e("./random-bytes");
        r.randomBytes = y.randomBytes;
        var m = e("./networks");
        r.getNetwork = m.getNetwork;
        var g = e("./properties");
        r.checkProperties = g.checkProperties, r.deepCopy = g.deepCopy, r.defineReadOnly = g.defineReadOnly, r.resolveProperties = g.resolveProperties, r.shallowCopy = g.shallowCopy;
        var b = n(e("./rlp"));
        r.RLP = b;
        var w = e("./secp256k1");
        r.computeAddress = w.computeAddress, r.computePublicKey = w.computePublicKey, r.recoverAddress = w.recoverAddress, r.recoverPublicKey = w.recoverPublicKey, r.verifyMessage = w.verifyMessage;
        var _ = e("./signing-key");
        r.SigningKey = _.SigningKey;
        var M = e("./transaction");
        r.populateTransaction = M.populateTransaction;
        var A = e("./transaction");
        r.parseTransaction = A.parse, r.serializeTransaction = A.serialize;
        var E = e("./utf8");
        r.formatBytes32String = E.formatBytes32String, r.parseBytes32String = E.parseBytes32String, r.toUtf8Bytes = E.toUtf8Bytes, r.toUtf8String = E.toUtf8String;
        var S = e("./units");
        r.commify = S.commify, r.formatEther = S.formatEther, r.parseEther = S.parseEther, r.formatUnits = S.formatUnits, r.parseUnits = S.parseUnits;
        var k = e("./web");
        r.fetchJson = k.fetchJson, r.poll = k.poll;
        var N = e("./hmac");
        r.SupportedAlgorithms = N.SupportedAlgorithms;
        var x = e("./utf8");
        r.UnicodeNormalizationForm = x.UnicodeNormalizationForm;
        var P = e("./wordlist");
        r.Wordlist = P.Wordlist;
      }, { "./abi-coder": 59, "./address": 60, "./base64": 61, "./bignumber": 63, "./bytes": 64, "./hash": 65, "./hdnode": 66, "./hmac": 67, "./interface": 69, "./json-wallet": 70, "./keccak256": 71, "./networks": 72, "./properties": 74, "./random-bytes": 75, "./rlp": 76, "./secp256k1": 77, "./sha2": 79, "./signing-key": 81, "./solidity": 82, "./transaction": 83, "./units": 84, "./utf8": 85, "./web": 86, "./wordlist": 87 }], 69: [function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e2, t2) {
          e2.__proto__ = t2;
        } || function(e2, t2) {
          for (var r2 in t2)
            t2.hasOwnProperty(r2) && (e2[r2] = t2[r2]);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        function s(e2) {
          for (var t2 in p.setType(this, "Description"), e2)
            p.defineReadOnly(this, t2, p.deepCopy(e2[t2], true));
          Object.freeze(this);
        }
        var a, u = e("./address"), f2 = e("./abi-coder"), l = e("./bignumber"), c = e("./bytes"), h = e("./hash"), d = e("./keccak256"), p = e("./properties"), v = o(e("../errors")), y = function(e2) {
          p.setType(this, "Indexed"), p.defineReadOnly(this, "hash", e2);
        }, m = (i(g, a = s), g.prototype.encode = function(e2, t2) {
          c.isHexString(e2) || v.throwError("invalid contract bytecode", v.INVALID_ARGUMENT, { arg: "bytecode", value: e2 }), v.checkArgumentCount(t2.length, this.inputs.length, " in Interface constructor");
          try {
            return e2 + f2.defaultAbiCoder.encode(this.inputs, t2).substring(2);
          } catch (e3) {
            v.throwError("invalid constructor argument", v.INVALID_ARGUMENT, { arg: e3.arg, reason: e3.reason, value: e3.value });
          }
          return null;
        }, g);
        function g() {
          return a !== null && a.apply(this, arguments) || this;
        }
        var b, w = (i(_, b = s), _.prototype.encode = function(e2) {
          v.checkArgumentCount(e2.length, this.inputs.length, " in interface function " + this.name);
          try {
            return this.sighash + f2.defaultAbiCoder.encode(this.inputs, e2).substring(2);
          } catch (e3) {
            v.throwError("invalid input argument", v.INVALID_ARGUMENT, { arg: e3.arg, reason: e3.reason, value: e3.value });
          }
          return null;
        }, _.prototype.decode = function(t2) {
          try {
            return f2.defaultAbiCoder.decode(this.outputs, c.arrayify(t2));
          } catch (e2) {
            v.throwError("invalid data for function output", v.INVALID_ARGUMENT, { arg: "data", errorArg: e2.arg, errorValue: e2.value, value: t2, reason: e2.reason });
          }
        }, _);
        function _() {
          return b !== null && b.apply(this, arguments) || this;
        }
        var M, A = (i(E, M = s), E);
        function E() {
          return M !== null && M.apply(this, arguments) || this;
        }
        var S, k = (i(N, S = s), N.prototype.encodeTopics = function(e2) {
          var n2 = this;
          e2.length > this.inputs.length && v.throwError("too many arguments for " + this.name, v.UNEXPECTED_ARGUMENT, { maxCount: e2.length, expectedCount: this.inputs.length });
          var i2 = [];
          for (this.anonymous || i2.push(this.topic), e2.forEach(function(e3, t2) {
            var r2 = n2.inputs[t2];
            r2.indexed ? e3 == null ? i2.push(null) : r2.type === "string" ? i2.push(h.id(e3)) : r2.type === "bytes" ? i2.push(d.keccak256(e3)) : r2.type.indexOf("[") !== -1 || r2.type.substring(0, 5) === "tuple" ? v.throwError("filtering with tuples or arrays not implemented yet; bug us on GitHub", v.NOT_IMPLEMENTED, { operation: "filter(array|tuple)" }) : (r2.type === "address" && u.getAddress(e3), i2.push(c.hexZeroPad(c.hexlify(e3), 32).toLowerCase())) : e3 != null && v.throwError("cannot filter non-indexed parameters; must be null", v.INVALID_ARGUMENT, { argument: r2.name || t2, value: e3 });
          }); i2.length && i2[i2.length - 1] === null; )
            i2.pop();
          return i2;
        }, N.prototype.decode = function(e2, r2) {
          r2 == null || this.anonymous || (r2 = r2.slice(1));
          var n2 = [], i2 = [], o2 = [];
          if (this.inputs.forEach(function(e3, t2) {
            e3.indexed ? e3.type === "string" || e3.type === "bytes" || 0 <= e3.type.indexOf("[") || e3.type.substring(0, 5) === "tuple" ? (n2.push({ type: "bytes32", name: e3.name || "" }), o2.push(true)) : (n2.push(e3), o2.push(false)) : (i2.push(e3), o2.push(false));
          }), r2 != null)
            var s2 = f2.defaultAbiCoder.decode(n2, c.concat(r2));
          var a2 = f2.defaultAbiCoder.decode(i2, c.arrayify(e2)), u2 = {}, l2 = 0, h2 = 0;
          return this.inputs.forEach(function(e3, t2) {
            e3.indexed ? r2 == null ? u2[t2] = new y(null) : o2[t2] ? u2[t2] = new y(s2[h2++]) : u2[t2] = s2[h2++] : u2[t2] = a2[l2++], e3.name && (u2[e3.name] = u2[t2]);
          }), u2.length = this.inputs.length, new A(u2);
        }, N);
        function N() {
          return S !== null && S.apply(this, arguments) || this;
        }
        var x, P = (i(I, x = s), I);
        function I() {
          return x !== null && x.apply(this, arguments) || this;
        }
        var T, R = (i(O, T = s), O);
        function O() {
          return T !== null && T.apply(this, arguments) || this;
        }
        function C(e2) {
          switch (e2.type) {
            case "constructor":
              var t2 = new m({ inputs: e2.inputs, payable: e2.payable == null || !!e2.payable });
              this.deployFunction || (this.deployFunction = t2);
              break;
            case "function":
              var r2 = f2.formatSignature(e2).replace(/tuple/g, ""), n2 = h.id(r2).substring(0, 10), i2 = false;
              e2.constant != null ? i2 = e2.constant : e2.stateMutability != null && (i2 = e2.stateMutability == "view" || e2.stateMutability == "pure");
              t2 = new w({ inputs: e2.inputs, outputs: e2.outputs, gas: e2.gas, payable: e2.payable == null || !!e2.payable, type: i2 ? "call" : "transaction", name: e2.name, signature: r2, sighash: n2 });
              e2.name && (this.functions[e2.name] == null ? p.defineReadOnly(this.functions, e2.name, t2) : v.warn("WARNING: Multiple definitions for " + e2.name)), this.functions[t2.signature] == null && p.defineReadOnly(this.functions, t2.signature, t2);
              break;
            case "event":
              r2 = f2.formatSignature(e2).replace(/tuple/g, ""), t2 = new k({ name: e2.name, signature: r2, inputs: e2.inputs, topic: h.id(r2), anonymous: !!e2.anonymous });
              e2.name && this.events[e2.name] == null && p.defineReadOnly(this.events, e2.name, t2), this.events[t2.signature] == null && p.defineReadOnly(this.events, t2.signature, t2);
              break;
            case "receive":
            case "fallback":
              break;
            default:
              v.warn("WARNING: unsupported ABI type - " + e2.type);
          }
        }
        var L = (D.prototype.parseTransaction = function(e2) {
          var t2 = e2.data.substring(0, 10).toLowerCase();
          for (var r2 in this.functions)
            if (r2.indexOf("(") !== -1) {
              var n2 = this.functions[r2];
              if (n2.sighash === t2) {
                var i2 = f2.defaultAbiCoder.decode(n2.inputs, "0x" + e2.data.substring(10));
                return new P({ args: i2, decode: n2.decode, name: n2.name, signature: n2.signature, sighash: n2.sighash, value: l.bigNumberify(e2.value || "0") });
              }
            }
          return null;
        }, D.prototype.parseLog = function(e2) {
          for (var t2 in this.events)
            if (t2.indexOf("(") !== -1) {
              var r2 = this.events[t2];
              if (!r2.anonymous && r2.topic === e2.topics[0])
                return new R({ decode: r2.decode, name: r2.name, signature: r2.signature, topic: r2.topic, values: r2.decode(e2.data, e2.topics) });
            }
          return null;
        }, D.isInterface = function(e2) {
          return p.isType(e2, "Interface");
        }, D.isIndexed = function(e2) {
          return p.isType(e2, "Indexed");
        }, D);
        function D(t2) {
          if (v.checkNew(this, D), typeof t2 == "string") {
            try {
              t2 = JSON.parse(t2);
            } catch (e2) {
              v.throwError("could not parse ABI JSON", v.INVALID_ARGUMENT, { arg: "abi", errorMessage: e2.message, value: t2 });
            }
            if (!Array.isArray(t2))
              return v.throwError("invalid abi", v.INVALID_ARGUMENT, { arg: "abi", value: t2 }), null;
          }
          p.defineReadOnly(this, "functions", {}), p.defineReadOnly(this, "events", {});
          var r2 = [];
          t2.forEach(function(e2) {
            typeof e2 == "string" && (e2 = f2.parseSignature(e2)), r2.push(e2);
          }), p.defineReadOnly(this, "abi", p.deepCopy(r2, true)), r2.forEach(C, this), this.deployFunction || C.call(this, { type: "constructor", inputs: [] }), p.setType(this, "Interface");
        }
        r.Interface = L;
      }, { "../errors": 5, "./abi-coder": 59, "./address": 60, "./bignumber": 63, "./bytes": 64, "./hash": 65, "./keccak256": 71, "./properties": 74 }], 70: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        var n = e("./address");
        function i(e2) {
          try {
            var t2 = JSON.parse(e2);
          } catch (e3) {
            return false;
          }
          return t2.encseed && t2.ethaddr;
        }
        function o(e2) {
          try {
            var t2 = JSON.parse(e2);
          } catch (e3) {
            return false;
          }
          return !(!t2.version || parseInt(t2.version) !== t2.version || parseInt(t2.version) !== 3);
        }
        r.isCrowdsaleWallet = i, r.isSecretStorageWallet = o, r.getJsonWalletAddress = function(e2) {
          if (i(e2))
            try {
              return n.getAddress(JSON.parse(e2).ethaddr);
            } catch (e3) {
              return null;
            }
          if (o(e2))
            try {
              return n.getAddress(JSON.parse(e2).address);
            } catch (e3) {
              return null;
            }
          return null;
        };
      }, { "./address": 60 }], 71: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        var n = e("js-sha3"), i = e("./bytes");
        r.keccak256 = function(e2) {
          return "0x" + n.keccak_256(i.arrayify(e2));
        };
      }, { "./bytes": 64, "js-sha3": 40 }], 72: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var o = n(e("../errors"));
        function i(r2) {
          return function(e2) {
            var t2 = [];
            return e2.InfuraProvider && t2.push(new e2.InfuraProvider(r2)), e2.EtherscanProvider && t2.push(new e2.EtherscanProvider(r2)), t2.length === 0 ? null : e2.FallbackProvider ? new e2.FallbackProvider(t2) : t2[0];
          };
        }
        function s(t2, r2) {
          return function(e2) {
            return e2.JsonRpcProvider ? new e2.JsonRpcProvider(t2, r2) : null;
          };
        }
        var a = { chainId: 1, ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", name: "homestead", _defaultProvider: i("homestead") }, u = { chainId: 3, ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", name: "ropsten", _defaultProvider: i("ropsten") }, l = { unspecified: { chainId: 0, name: "unspecified" }, homestead: a, mainnet: a, morden: { chainId: 2, name: "morden" }, ropsten: u, testnet: u, rinkeby: { chainId: 4, ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", name: "rinkeby", _defaultProvider: i("rinkeby") }, goerli: { chainId: 5, ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e", name: "goerli", _defaultProvider: i("goerli") }, kovan: { chainId: 42, name: "kovan", _defaultProvider: i("kovan") }, classic: { chainId: 61, name: "classic", _defaultProvider: s("https://web3.gastracker.io", "classic") }, classicTestnet: { chainId: 62, name: "classicTestnet", _defaultProvider: s("https://web3.gastracker.io/morden", "classicTestnet") } };
        r.getNetwork = function(e2) {
          if (e2 == null)
            return null;
          if (typeof e2 == "number") {
            for (var t2 in l) {
              var r2 = l[t2];
              if (r2.chainId === e2)
                return { name: r2.name, chainId: r2.chainId, ensAddress: r2.ensAddress || null, _defaultProvider: r2._defaultProvider || null };
            }
            return { chainId: e2, name: "unknown" };
          }
          if (typeof e2 == "string") {
            var n2 = l[e2];
            return n2 == null ? null : { name: n2.name, chainId: n2.chainId, ensAddress: n2.ensAddress, _defaultProvider: n2._defaultProvider || null };
          }
          var i2 = l[e2.name];
          return i2 ? (e2.chainId !== 0 && e2.chainId !== i2.chainId && o.throwError("network chainId mismatch", o.INVALID_ARGUMENT, { arg: "network", value: e2 }), { name: e2.name, chainId: i2.chainId, ensAddress: e2.ensAddress || i2.ensAddress || null, _defaultProvider: e2._defaultProvider || i2._defaultProvider || null }) : (typeof e2.chainId != "number" && o.throwError("invalid network chainId", o.INVALID_ARGUMENT, { arg: "network", value: e2 }), e2);
        };
      }, { "../errors": 5 }], 73: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        var m = e("../utils/bytes"), g = e("./hmac");
        r.pbkdf2 = function(e2, t2, r2, n, i) {
          var o;
          e2 = m.arrayify(e2), t2 = m.arrayify(t2);
          var s, a, u = 1, l = new Uint8Array(n), h = new Uint8Array(t2.length + 4);
          h.set(t2);
          for (var f2 = 1; f2 <= u; f2++) {
            h[t2.length] = f2 >> 24 & 255, h[t2.length + 1] = f2 >> 16 & 255, h[t2.length + 2] = f2 >> 8 & 255, h[t2.length + 3] = 255 & f2;
            var c = g.computeHmac(i, e2, h);
            o || (o = c.length, a = new Uint8Array(o), s = n - ((u = Math.ceil(n / o)) - 1) * o), a.set(c);
            for (var d = 1; d < r2; d++) {
              c = g.computeHmac(i, e2, c);
              for (var p = 0; p < o; p++)
                a[p] ^= c[p];
            }
            var v = (f2 - 1) * o, y = f2 === u ? s : o;
            l.set(m.arrayify(a).slice(0, y), v);
          }
          return m.arrayify(l);
        };
      }, { "../utils/bytes": 64, "./hmac": 67 }], 74: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var i = n(e("../errors"));
        function s(e2, t2, r2) {
          Object.defineProperty(e2, t2, { enumerable: true, value: r2, writable: false });
        }
        function a(e2, t2) {
          return e2 && e2._ethersType === t2;
        }
        r.defineReadOnly = s, r.setType = function(e2, t2) {
          Object.defineProperty(e2, "_ethersType", { configurable: false, value: t2, writable: false });
        }, r.isType = a, r.resolveProperties = function(r2) {
          var n2 = {}, i2 = [];
          return Object.keys(r2).forEach(function(t2) {
            var e2 = r2[t2];
            e2 instanceof Promise ? i2.push(e2.then(function(e3) {
              return n2[t2] = e3, null;
            })) : n2[t2] = e2;
          }), Promise.all(i2).then(function() {
            return n2;
          });
        }, r.checkProperties = function(t2, r2) {
          t2 && typeof t2 == "object" || i.throwError("invalid object", i.INVALID_ARGUMENT, { argument: "object", value: t2 }), Object.keys(t2).forEach(function(e2) {
            r2[e2] || i.throwError("invalid object key - " + e2, i.INVALID_ARGUMENT, { argument: "transaction", value: t2, key: e2 });
          });
        }, r.shallowCopy = function(e2) {
          var t2 = {};
          for (var r2 in e2)
            t2[r2] = e2[r2];
          return t2;
        };
        var u = { boolean: true, number: true, string: true };
        r.deepCopy = function t2(e2, r2) {
          if (e2 == null || u[typeof e2])
            return e2;
          if (Array.isArray(e2)) {
            var n2 = e2.map(function(e3) {
              return t2(e3, r2);
            });
            return r2 && Object.freeze(n2), n2;
          }
          if (typeof e2 == "object") {
            if (a(e2, "BigNumber"))
              return e2;
            if (a(e2, "Description"))
              return e2;
            if (a(e2, "Indexed"))
              return e2;
            for (var i2 in n2 = {}, e2) {
              var o = e2[i2];
              o !== void 0 && s(n2, i2, t2(o, r2));
            }
            return r2 && Object.freeze(n2), n2;
          }
          if (typeof e2 == "function")
            return e2;
          throw new Error("Cannot deepCopy " + typeof e2);
        }, r.inheritable = function t2(r2) {
          return function(e2) {
            !function(e3, t3) {
              e3.super_ = t3, e3.prototype = Object.create(t3.prototype, { constructor: { value: e3, enumerable: false, writable: true, configurable: true } });
            }(e2, r2), s(e2, "inherits", t2(e2));
          };
        };
      }, { "../errors": 5 }], 75: [function(o, e, s) {
        (function(e2) {
          "use strict";
          Object.defineProperty(s, "__esModule", { value: true });
          var r = o("../utils/bytes"), t = o("../utils/properties"), n = e2.crypto || e2.msCrypto;
          function i(e3) {
            if (e3 <= 0 || 1024 < e3 || parseInt(String(e3)) != e3)
              throw new Error("invalid length");
            var t2 = new Uint8Array(e3);
            return n.getRandomValues(t2), r.arrayify(t2);
          }
          n && n.getRandomValues || (console.log("WARNING: Missing strong random number source; using weak randomBytes"), n = { getRandomValues: function(e3) {
            for (var t2 = 0; t2 < 20; t2++)
              for (var r2 = 0; r2 < e3.length; r2++)
                t2 ? e3[r2] ^= Math.trunc(256 * Math.random()) : e3[r2] = Math.trunc(256 * Math.random());
            return e3;
          }, _weakCrypto: true }), s.randomBytes = i, n._weakCrypto === true && t.defineReadOnly(i, "_weakCrypto", true);
        }).call(this, typeof global != "undefined" ? global : typeof self != "undefined" ? self : typeof window != "undefined" ? window : {});
      }, { "../utils/bytes": 64, "../utils/properties": 74 }], 76: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        var o = e("./bytes");
        function s(e2) {
          for (var t2 = []; e2; )
            t2.unshift(255 & e2), e2 >>= 8;
          return t2;
        }
        function i(e2, t2, r2) {
          for (var n = 0, i2 = 0; i2 < r2; i2++)
            n = 256 * n + e2[t2 + i2];
          return n;
        }
        function a(e2, t2, r2, n) {
          for (var i2 = []; r2 < t2 + 1 + n; ) {
            var o2 = u(e2, r2);
            if (i2.push(o2.result), t2 + 1 + n < (r2 += o2.consumed))
              throw new Error("invalid rlp");
          }
          return { consumed: 1 + n, result: i2 };
        }
        function u(e2, t2) {
          if (e2.length === 0)
            throw new Error("invalid rlp data");
          if (248 <= e2[t2]) {
            if (t2 + 1 + (r2 = e2[t2] - 247) > e2.length)
              throw new Error("too short");
            if (t2 + 1 + r2 + (n = i(e2, t2 + 1, r2)) > e2.length)
              throw new Error("to short");
            return a(e2, t2, t2 + 1 + r2, r2 + n);
          }
          if (192 <= e2[t2]) {
            if (t2 + 1 + (n = e2[t2] - 192) > e2.length)
              throw new Error("invalid rlp data");
            return a(e2, t2, t2 + 1, n);
          }
          if (184 <= e2[t2]) {
            var r2;
            if (t2 + 1 + (r2 = e2[t2] - 183) > e2.length)
              throw new Error("invalid rlp data");
            if (t2 + 1 + r2 + (n = i(e2, t2 + 1, r2)) > e2.length)
              throw new Error("invalid rlp data");
            return { consumed: 1 + r2 + n, result: o.hexlify(e2.slice(t2 + 1 + r2, t2 + 1 + r2 + n)) };
          }
          if (128 <= e2[t2]) {
            var n;
            if (t2 + 1 + (n = e2[t2] - 128) > e2.length)
              throw new Error("invalid rlp data");
            return { consumed: 1 + n, result: o.hexlify(e2.slice(t2 + 1, t2 + 1 + n)) };
          }
          return { consumed: 1, result: o.hexlify(e2[t2]) };
        }
        r.encode = function(e2) {
          return o.hexlify(function t2(e3) {
            if (Array.isArray(e3)) {
              var r2 = [];
              return e3.forEach(function(e4) {
                r2 = r2.concat(t2(e4));
              }), r2.length <= 55 ? (r2.unshift(192 + r2.length), r2) : ((n = s(r2.length)).unshift(247 + n.length), n.concat(r2));
            }
            var n, i2 = Array.prototype.slice.call(o.arrayify(e3));
            return i2.length === 1 && i2[0] <= 127 ? i2 : i2.length <= 55 ? (i2.unshift(128 + i2.length), i2) : ((n = s(i2.length)).unshift(183 + n.length), n.concat(i2));
          }(e2));
        }, r.decode = function(e2) {
          var t2 = o.arrayify(e2), r2 = u(t2, 0);
          if (r2.consumed !== t2.length)
            throw new Error("invalid rlp data");
          return r2.result;
        };
      }, { "./bytes": 64 }], 77: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var i = e("elliptic"), o = e("./address"), s = e("./bytes"), a = e("./hash"), u = e("./keccak256"), l = e("./properties"), h = n(e("../errors")), f2 = null;
        function c() {
          return f2 = f2 || new i.ec("secp256k1");
        }
        var d = (p.prototype.sign = function(e2) {
          var t2 = c().keyFromPrivate(s.arrayify(this.privateKey)).sign(s.arrayify(e2), { canonical: true });
          return { recoveryParam: t2.recoveryParam, r: s.hexZeroPad("0x" + t2.r.toString(16), 32), s: s.hexZeroPad("0x" + t2.s.toString(16), 32), v: 27 + t2.recoveryParam };
        }, p.prototype.computeSharedSecret = function(e2) {
          var t2 = c().keyFromPrivate(s.arrayify(this.privateKey)), r2 = c().keyFromPublic(s.arrayify(v(e2)));
          return s.hexZeroPad("0x" + t2.derive(r2.getPublic()).toString(16), 32);
        }, p.prototype._addPoint = function(e2) {
          var t2 = c().keyFromPublic(s.arrayify(this.publicKey)), r2 = c().keyFromPublic(s.arrayify(e2));
          return "0x" + t2.pub.add(r2.pub).encodeCompressed("hex");
        }, p);
        function p(e2) {
          var t2 = c().keyFromPrivate(s.arrayify(e2));
          l.defineReadOnly(this, "privateKey", s.hexlify(t2.priv.toArray("be", 32))), l.defineReadOnly(this, "publicKey", "0x" + t2.getPublic(false, "hex")), l.defineReadOnly(this, "compressedPublicKey", "0x" + t2.getPublic(true, "hex")), l.defineReadOnly(this, "publicKeyBytes", t2.getPublic().encode(null, true));
        }
        function v(e2, t2) {
          var r2 = s.arrayify(e2);
          if (r2.length !== 32)
            return r2.length === 33 ? t2 ? s.hexlify(r2) : "0x" + c().keyFromPublic(r2).getPublic(false, "hex") : r2.length === 65 ? t2 ? "0x" + c().keyFromPublic(r2).getPublic(true, "hex") : s.hexlify(r2) : (h.throwError("invalid public or private key", h.INVALID_ARGUMENT, { arg: "key", value: "[REDACTED]" }), null);
          var n2 = new d(r2);
          return t2 ? n2.compressedPublicKey : n2.publicKey;
        }
        function y(e2) {
          var t2 = "0x" + v(e2).slice(4);
          return o.getAddress("0x" + u.keccak256(t2).substring(26));
        }
        function m(e2, t2) {
          var r2 = s.splitSignature(t2), n2 = { r: s.arrayify(r2.r), s: s.arrayify(r2.s) };
          return "0x" + c().recoverPubKey(s.arrayify(e2), n2, r2.recoveryParam).encode("hex", false);
        }
        function g(e2, t2) {
          return y(m(s.arrayify(e2), t2));
        }
        r.KeyPair = d, r.computePublicKey = v, r.computeAddress = y, r.recoverPublicKey = m, r.recoverAddress = g, r.verifyMessage = function(e2, t2) {
          return g(a.hashMessage(e2), t2);
        };
      }, { "../errors": 5, "./address": 60, "./bytes": 64, "./hash": 65, "./keccak256": 71, "./properties": 74, elliptic: 12 }], 78: [function(e, t, r) {
        "use strict";
        var n = this && this.__importDefault || function(e2) {
          return e2 && e2.__esModule ? e2 : { default: e2 };
        }, i = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var R = n(e("aes-js")), m = n(e("scrypt-js")), O = n(e("uuid")), C = e("./signing-key"), g = i(e("./hdnode")), b = e("./address"), L = e("./bytes"), w = e("./pbkdf2"), D = e("./keccak256"), p = e("./utf8"), B = e("./random-bytes");
        function _(e2) {
          return typeof e2 == "string" && e2.substring(0, 2) !== "0x" && (e2 = "0x" + e2), L.arrayify(e2);
        }
        function U(e2, t2) {
          for (e2 = String(e2); e2.length < t2; )
            e2 = "0" + e2;
          return e2;
        }
        function F(e2) {
          return typeof e2 == "string" ? p.toUtf8Bytes(e2, p.UnicodeNormalizationForm.NFKC) : L.arrayify(e2);
        }
        function M(e2, t2) {
          for (var r2 = e2, n2 = t2.toLowerCase().split("/"), i2 = 0; i2 < n2.length; i2++) {
            var o = null;
            for (var s in r2)
              if (s.toLowerCase() === n2[i2]) {
                o = r2[s];
                break;
              }
            if (o === null)
              return null;
            r2 = o;
          }
          return r2;
        }
        r.decryptCrowdsale = function(e2, t2) {
          var r2 = JSON.parse(e2);
          t2 = F(t2);
          var n2 = b.getAddress(M(r2, "ethaddr")), i2 = _(M(r2, "encseed"));
          if (!i2 || i2.length % 16 != 0)
            throw new Error("invalid encseed");
          var o = w.pbkdf2(t2, t2, 2e3, 32, "sha256").slice(0, 16), s = i2.slice(0, 16), a = i2.slice(16), u = new R.default.ModeOfOperation.cbc(o, s), l = L.arrayify(u.decrypt(a));
          l = R.default.padding.pkcs7.strip(l);
          for (var h = "", f2 = 0; f2 < l.length; f2++)
            h += String.fromCharCode(l[f2]);
          var c = p.toUtf8Bytes(h), d = new C.SigningKey(D.keccak256(c));
          if (d.address !== n2)
            throw new Error("corrupt crowdsale wallet");
          return d;
        }, r.decrypt = function(e2, t2, d) {
          function p2(e3, t3) {
            var r2 = _(M(v, "crypto/ciphertext"));
            if (L.hexlify(function(e4, t4) {
              return D.keccak256(L.concat([e4, t4]));
            }(e3.slice(16, 32), r2)).substring(2) !== M(v, "crypto/mac").toLowerCase())
              return t3(new Error("invalid password")), null;
            var n2 = function(e4, t4) {
              if (M(v, "crypto/cipher") !== "aes-128-ctr")
                return null;
              var r3 = _(M(v, "crypto/cipherparams/iv")), n3 = new R.default.Counter(r3), i3 = new R.default.ModeOfOperation.ctr(e4, n3);
              return L.arrayify(i3.decrypt(t4));
            }(e3.slice(0, 16), r2), i2 = e3.slice(32, 64);
            if (!n2)
              return t3(new Error("unsupported cipher")), null;
            var o = new C.SigningKey(n2);
            if (v.address && o.address !== b.getAddress(v.address))
              return t3(new Error("address mismatch")), null;
            var s = M(v, "x-ethers/locale");
            if (M(v, "x-ethers/version") === "0.1" && (s == null || s === "en")) {
              var a = _(M(v, "x-ethers/mnemonicCiphertext")), u = _(M(v, "x-ethers/mnemonicCounter")), l = new R.default.Counter(u), h = new R.default.ModeOfOperation.ctr(i2, l), f2 = M(v, "x-ethers/path") || g.defaultPath, c = L.arrayify(h.decrypt(a)), d2 = g.entropyToMnemonic(c), p3 = g.fromMnemonic(d2).derivePath(f2);
              if (p3.privateKey != L.hexlify(n2))
                return t3(new Error("mnemonic mismatch")), null;
              o = new C.SigningKey(p3);
            }
            return o;
          }
          var v = JSON.parse(e2), y = F(t2);
          return new Promise(function(i2, o) {
            var e3 = M(v, "crypto/kdf");
            if (e3 && typeof e3 == "string")
              if (e3.toLowerCase() === "scrypt") {
                var t3 = _(M(v, "crypto/kdfparams/salt")), r2 = parseInt(M(v, "crypto/kdfparams/n")), n2 = parseInt(M(v, "crypto/kdfparams/r")), s = parseInt(M(v, "crypto/kdfparams/p"));
                if (!r2 || !n2 || !s)
                  return void o(new Error("unsupported key-derivation function parameters"));
                if ((r2 & r2 - 1) != 0)
                  return void o(new Error("unsupported key-derivation function parameter value for N"));
                if ((l = parseInt(M(v, "crypto/kdfparams/dklen"))) !== 32)
                  return void o(new Error("unsupported key-derivation derived-key length"));
                d && d(0), m.default(y, t3, r2, n2, s, 64, function(e4, t4, r3) {
                  if (e4)
                    e4.progress = t4, o(e4);
                  else if (r3) {
                    r3 = L.arrayify(r3);
                    var n3 = p2(r3, o);
                    if (!n3)
                      return;
                    d && d(1), i2(n3);
                  } else if (d)
                    return d(t4);
                });
              } else if (e3.toLowerCase() === "pbkdf2") {
                t3 = _(M(v, "crypto/kdfparams/salt"));
                var a = null, u = M(v, "crypto/kdfparams/prf");
                if (u === "hmac-sha256")
                  a = "sha256";
                else {
                  if (u !== "hmac-sha512")
                    return void o(new Error("unsupported prf"));
                  a = "sha512";
                }
                var l, h = parseInt(M(v, "crypto/kdfparams/c"));
                if ((l = parseInt(M(v, "crypto/kdfparams/dklen"))) !== 32)
                  return void o(new Error("unsupported key-derivation derived-key length"));
                var f2 = w.pbkdf2(y, t3, h, l, a), c = p2(f2, o);
                if (!c)
                  return;
                i2(c);
              } else
                o(new Error("unsupported key-derivation function"));
            else
              o(new Error("unsupported key-derivation function"));
          });
        }, r.encrypt = function(e2, t2, w2, _2) {
          typeof w2 != "function" || _2 || (_2 = w2, w2 = {}), w2 = w2 || {};
          var M2 = null;
          if ((M2 = C.SigningKey.isSigningKey(e2) ? L.arrayify(e2.privateKey) : L.arrayify(e2)).length !== 32)
            throw new Error("invalid private key");
          var r2 = F(t2), A = null;
          if (w2.entropy && (A = L.arrayify(w2.entropy)), w2.mnemonic)
            if (A) {
              if (g.entropyToMnemonic(A) !== w2.mnemonic)
                throw new Error("entropy and mnemonic mismatch");
            } else
              A = L.arrayify(g.mnemonicToEntropy(w2.mnemonic, w2.wordlist));
          var E = w2.path;
          A && !E && (E = g.defaultPath);
          var S = w2.client;
          S = S || "ethers.js";
          var k = null;
          k = w2.salt ? L.arrayify(w2.salt) : B.randomBytes(32);
          var N = null;
          if (w2.iv) {
            if ((N = L.arrayify(w2.iv)).length !== 16)
              throw new Error("invalid iv");
          } else
            N = B.randomBytes(16);
          var x = null;
          if (w2.uuid) {
            if ((x = L.arrayify(w2.uuid)).length !== 16)
              throw new Error("invalid uuid");
          } else
            x = B.randomBytes(16);
          var P = 1 << 17, I = 8, T = 1;
          return w2.scrypt && (w2.scrypt.N && (P = w2.scrypt.N), w2.scrypt.r && (I = w2.scrypt.r), w2.scrypt.p && (T = w2.scrypt.p)), new Promise(function(g2, b2) {
            _2 && _2(0), m.default(r2, k, P, I, T, 64, function(e3, t3, r3) {
              if (e3)
                e3.progress = t3, b2(e3);
              else if (r3) {
                var n2 = (r3 = L.arrayify(r3)).slice(0, 16), i2 = r3.slice(16, 32), o = r3.slice(32, 64), s = new C.SigningKey(M2).address, a = new R.default.Counter(N), u = new R.default.ModeOfOperation.ctr(n2, a), l = L.arrayify(u.encrypt(M2)), h = D.keccak256(L.concat([i2, l])), f2 = { address: s.substring(2).toLowerCase(), id: O.default.v4({ random: x }), version: 3, Crypto: { cipher: "aes-128-ctr", cipherparams: { iv: L.hexlify(N).substring(2) }, ciphertext: L.hexlify(l).substring(2), kdf: "scrypt", kdfparams: { salt: L.hexlify(k).substring(2), n: P, dklen: 32, p: T, r: I }, mac: h.substring(2) } };
                if (A) {
                  var c = B.randomBytes(16), d = new R.default.Counter(c), p2 = new R.default.ModeOfOperation.ctr(o, d), v = L.arrayify(p2.encrypt(A)), y = new Date(), m2 = y.getUTCFullYear() + "-" + U(y.getUTCMonth() + 1, 2) + "-" + U(y.getUTCDate(), 2) + "T" + U(y.getUTCHours(), 2) + "-" + U(y.getUTCMinutes(), 2) + "-" + U(y.getUTCSeconds(), 2) + ".0Z";
                  f2["x-ethers"] = { client: S, gethFilename: "UTC--" + m2 + "--" + f2.address, mnemonicCounter: L.hexlify(c).substring(2), mnemonicCiphertext: L.hexlify(v).substring(2), path: E, version: "0.1" }, w2.wordlist && typeof w2.wordlist.locale == "string" && (f2["x-ethers"].locale = w2.wordlist.locale);
                }
                _2 && _2(1), g2(JSON.stringify(f2));
              } else if (_2)
                return _2(t3);
            });
          });
        };
      }, { "./address": 60, "./bytes": 64, "./hdnode": 66, "./keccak256": 71, "./pbkdf2": 73, "./random-bytes": 75, "./signing-key": 81, "./utf8": 85, "aes-js": 8, "scrypt-js": 44, uuid: 48 }], 79: [function(e, t, r) {
        "use strict";
        var n = this && this.__importDefault || function(e2) {
          return e2 && e2.__esModule ? e2 : { default: e2 };
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var i = n(e("hash.js")), o = e("./bytes");
        r.ripemd160 = function(e2) {
          return "0x" + i.default.ripemd160().update(o.arrayify(e2)).digest("hex");
        }, r.sha256 = function(e2) {
          return "0x" + i.default.sha256().update(o.arrayify(e2)).digest("hex");
        }, r.sha512 = function(e2) {
          return "0x" + i.default.sha512().update(o.arrayify(e2)).digest("hex");
        };
      }, { "./bytes": 64, "hash.js": 26 }], 80: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true }), e("setimmediate"), r.platform = "browser";
      }, { setimmediate: 45 }], 81: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var i = e("./hdnode"), o = e("./bytes"), s = e("./properties"), a = e("./secp256k1"), u = n(e("../errors")), l = (h.prototype.signDigest = function(e2) {
          return this.keyPair.sign(e2);
        }, h.prototype.computeSharedSecret = function(e2) {
          return this.keyPair.computeSharedSecret(o.arrayify(e2));
        }, h.isSigningKey = function(e2) {
          return s.isType(e2, "SigningKey");
        }, h);
        function h(e2) {
          u.checkNew(this, h);
          var t2 = null;
          t2 = i.HDNode.isHDNode(e2) ? (s.defineReadOnly(this, "mnemonic", e2.mnemonic), s.defineReadOnly(this, "path", e2.path), o.arrayify(e2.privateKey)) : (typeof e2 == "string" && e2.match(/^[0-9a-f]*$/i) && e2.length === 64 && (e2 = "0x" + e2), o.arrayify(e2));
          try {
            t2.length !== 32 && u.throwError("exactly 32 bytes required", u.INVALID_ARGUMENT, { arg: "privateKey", value: "[REDACTED]" });
          } catch (e3) {
            var r2 = { arg: "privateKey", reason: e3.reason, value: "[REDACTED]" };
            e3.value && (typeof e3.value.length == "number" && (r2.length = e3.value.length), r2.type = typeof e3.value), u.throwError("invalid private key", e3.code, r2);
          }
          s.defineReadOnly(this, "privateKey", o.hexlify(t2)), s.defineReadOnly(this, "keyPair", new a.KeyPair(t2)), s.defineReadOnly(this, "publicKey", this.keyPair.publicKey), s.defineReadOnly(this, "address", a.computeAddress(this.keyPair.publicKey)), s.setType(this, "SigningKey");
        }
        r.SigningKey = l;
      }, { "../errors": 5, "./bytes": 64, "./hdnode": 66, "./properties": 74, "./secp256k1": 77 }], 82: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        var u = e("./bignumber"), l = e("./bytes"), h = e("./utf8"), n = e("./keccak256"), i = e("./sha2"), f2 = new RegExp("^bytes([0-9]+)$"), c = new RegExp("^(u?int)([0-9]*)$"), d = new RegExp("^(.*)\\[([0-9]*)\\]$"), p = "0000000000000000000000000000000000000000000000000000000000000000";
        function o(e2, r2) {
          if (e2.length != r2.length)
            throw new Error("type/value count mismatch");
          var n2 = [];
          return e2.forEach(function(e3, t2) {
            n2.push(function t3(e4, r3, n3) {
              switch (e4) {
                case "address":
                  return n3 ? l.padZeros(r3, 32) : l.arrayify(r3);
                case "string":
                  return h.toUtf8Bytes(r3);
                case "bytes":
                  return l.arrayify(r3);
                case "bool":
                  return r3 = r3 ? "0x01" : "0x00", n3 ? l.padZeros(r3, 32) : l.arrayify(r3);
              }
              var i2 = e4.match(c);
              if (i2) {
                if ((o2 = parseInt(i2[2] || "256")) % 8 != 0 || o2 === 0 || 256 < o2)
                  throw new Error("invalid number type - " + e4);
                return n3 && (o2 = 256), r3 = u.bigNumberify(r3).toTwos(o2), l.padZeros(r3, o2 / 8);
              }
              if (i2 = e4.match(f2)) {
                var o2 = parseInt(i2[1]);
                if (String(o2) != i2[1] || o2 === 0 || 32 < o2)
                  throw new Error("invalid number type - " + e4);
                if (l.arrayify(r3).byteLength !== o2)
                  throw new Error("invalid value for " + e4);
                return n3 ? l.arrayify((r3 + p).substring(0, 66)) : r3;
              }
              if ((i2 = e4.match(d)) && Array.isArray(r3)) {
                var s = i2[1];
                if (parseInt(i2[2] || String(r3.length)) != r3.length)
                  throw new Error("invalid value for " + e4);
                var a = [];
                return r3.forEach(function(e5) {
                  a.push(t3(s, e5, true));
                }), l.concat(a);
              }
              throw new Error("unknown type - " + e4);
            }(e3, r2[t2]));
          }), l.hexlify(l.concat(n2));
        }
        r.pack = o, r.keccak256 = function(e2, t2) {
          return n.keccak256(o(e2, t2));
        }, r.sha256 = function(e2, t2) {
          return i.sha256(o(e2, t2));
        };
      }, { "./bignumber": 63, "./bytes": 64, "./keccak256": 71, "./sha2": 79, "./utf8": 85 }], 83: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var i = e("../constants"), s = n(e("../errors")), a = e("./secp256k1"), u = e("./address"), l = e("./bignumber"), h = e("./bytes"), f2 = e("./keccak256"), c = e("./properties"), d = n(e("./rlp")), o = e("../providers/abstract-provider");
        function p(e2) {
          return e2 === "0x" ? i.Zero : l.bigNumberify(e2);
        }
        var v = [{ name: "nonce", maxLength: 32 }, { name: "gasPrice", maxLength: 32 }, { name: "gasLimit", maxLength: 32 }, { name: "to", length: 20 }, { name: "value", maxLength: 32 }, { name: "data" }], y = { chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true };
        r.serialize = function(r2, e2) {
          c.checkProperties(r2, y);
          var n2 = [];
          v.forEach(function(e3) {
            var t3 = r2[e3.name] || [];
            t3 = h.arrayify(h.hexlify(t3)), e3.length && t3.length !== e3.length && 0 < t3.length && s.throwError("invalid length for " + e3.name, s.INVALID_ARGUMENT, { arg: "transaction" + e3.name, value: t3 }), e3.maxLength && (t3 = h.stripZeros(t3)).length > e3.maxLength && s.throwError("invalid length for " + e3.name, s.INVALID_ARGUMENT, { arg: "transaction" + e3.name, value: t3 }), n2.push(h.hexlify(t3));
          }), r2.chainId != null && r2.chainId !== 0 && (n2.push(h.hexlify(r2.chainId)), n2.push("0x"), n2.push("0x"));
          var t2 = d.encode(n2);
          if (!e2)
            return t2;
          var i2 = h.splitSignature(e2), o2 = 27 + i2.recoveryParam;
          return n2.length === 9 && (n2.pop(), n2.pop(), n2.pop(), o2 += 2 * r2.chainId + 8), n2.push(h.hexlify(o2)), n2.push(h.stripZeros(h.arrayify(i2.r))), n2.push(h.stripZeros(h.arrayify(i2.s))), d.encode(n2);
        }, r.parse = function(e2) {
          var t2 = d.decode(e2);
          t2.length !== 9 && t2.length !== 6 && s.throwError("invalid raw transaction", s.INVALID_ARGUMENT, { arg: "rawTransactin", value: e2 });
          var r2 = { nonce: p(t2[0]).toNumber(), gasPrice: p(t2[1]), gasLimit: p(t2[2]), to: function(e3) {
            return e3 === "0x" ? null : u.getAddress(e3);
          }(t2[3]), value: p(t2[4]), data: t2[5], chainId: 0 };
          if (t2.length === 6)
            return r2;
          try {
            r2.v = l.bigNumberify(t2[6]).toNumber();
          } catch (e3) {
            return s.info(e3), r2;
          }
          if (r2.r = h.hexZeroPad(t2[7], 32), r2.s = h.hexZeroPad(t2[8], 32), l.bigNumberify(r2.r).isZero() && l.bigNumberify(r2.s).isZero())
            r2.chainId = r2.v, r2.v = 0;
          else {
            r2.chainId = Math.floor((r2.v - 35) / 2), r2.chainId < 0 && (r2.chainId = 0);
            var n2 = r2.v - 27, i2 = t2.slice(0, 6);
            r2.chainId !== 0 && (i2.push(h.hexlify(r2.chainId)), i2.push("0x"), i2.push("0x"), n2 -= 2 * r2.chainId + 8);
            var o2 = f2.keccak256(d.encode(i2));
            try {
              r2.from = a.recoverAddress(o2, { r: h.hexlify(r2.r), s: h.hexlify(r2.s), recoveryParam: n2 });
            } catch (e3) {
              s.info(e3);
            }
            r2.hash = f2.keccak256(e2);
          }
          return r2;
        }, r.populateTransaction = function(e2, t2, r2) {
          o.Provider.isProvider(t2) || s.throwError("missing provider", s.INVALID_ARGUMENT, { argument: "provider", value: t2 }), c.checkProperties(e2, y);
          var n2 = c.shallowCopy(e2);
          if (n2.to != null && (n2.to = t2.resolveName(n2.to)), n2.gasPrice == null && (n2.gasPrice = t2.getGasPrice()), n2.nonce == null && (n2.nonce = t2.getTransactionCount(r2)), n2.gasLimit == null) {
            var i2 = c.shallowCopy(n2);
            i2.from = r2, n2.gasLimit = t2.estimateGas(i2);
          }
          return n2.chainId == null && (n2.chainId = t2.getNetwork().then(function(e3) {
            return e3.chainId;
          })), c.resolveProperties(n2);
        };
      }, { "../constants": 3, "../errors": 5, "../providers/abstract-provider": 50, "./address": 60, "./bignumber": 63, "./bytes": 64, "./keccak256": 71, "./properties": 74, "./rlp": 76, "./secp256k1": 77 }], 84: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var i, h = e("../constants"), f2 = n(e("../errors")), c = e("./bignumber"), o = {};
        function s(e2) {
          return { decimals: e2.length - 1, tenPower: c.bigNumberify(e2) };
        }
        function d(e2) {
          var t2 = o[String(e2).toLowerCase()];
          if (!t2 && typeof e2 == "number" && parseInt(String(e2)) == e2 && 0 <= e2 && e2 <= 256) {
            for (var r2 = "1", n2 = 0; n2 < e2; n2++)
              r2 += "0";
            t2 = s(r2);
          }
          return t2 || f2.throwError("invalid unitType", f2.INVALID_ARGUMENT, { argument: "name", value: e2 }), t2;
        }
        function a(e2, t2) {
          var r2 = d(t2), n2 = (e2 = c.bigNumberify(e2)).lt(h.Zero);
          n2 && (e2 = e2.mul(h.NegativeOne));
          for (var i2 = e2.mod(r2.tenPower).toString(); i2.length < r2.decimals; )
            i2 = "0" + i2;
          return i2 = i2.match(/^([0-9]*[1-9]|0)(0*)/)[1], e2 = e2.div(r2.tenPower).toString() + "." + i2, n2 && (e2 = "-" + e2), e2;
        }
        function u(e2, t2) {
          t2 == null && (t2 = 18);
          var r2 = d(t2);
          if (typeof e2 == "string" && e2.match(/^-?[0-9.,]+$/) || f2.throwError("invalid decimal value", f2.INVALID_ARGUMENT, { arg: "value", value: e2 }), r2.decimals === 0)
            return c.bigNumberify(e2);
          var n2 = e2.substring(0, 1) === "-";
          n2 && (e2 = e2.substring(1)), e2 === "." && f2.throwError("missing value", f2.INVALID_ARGUMENT, { arg: "value", value: e2 });
          var i2 = e2.split(".");
          2 < i2.length && f2.throwError("too many decimal points", f2.INVALID_ARGUMENT, { arg: "value", value: e2 });
          var o2 = i2[0], s2 = i2[1];
          for (o2 = o2 || "0", (s2 = s2 || "0").length > r2.decimals && f2.throwError("underflow occurred", f2.NUMERIC_FAULT, { operation: "division", fault: "underflow" }); s2.length < r2.decimals; )
            s2 += "0";
          var a2 = c.bigNumberify(o2), u2 = c.bigNumberify(s2), l = a2.mul(r2.tenPower).add(u2);
          return n2 && (l = l.mul(h.NegativeOne)), l;
        }
        i = "1", ["wei", "kwei", "Mwei", "Gwei", "szabo", "finney", "ether"].forEach(function(e2) {
          var t2 = s(i);
          o[e2.toLowerCase()] = t2, o[String(t2.decimals)] = t2, i += "000";
        }), r.commify = function(e2) {
          var t2 = String(e2).split(".");
          (2 < t2.length || !t2[0].match(/^-?[0-9]*$/) || t2[1] && !t2[1].match(/^[0-9]*$/) || e2 === "." || e2 === "-.") && f2.throwError("invalid value", f2.INVALID_ARGUMENT, { argument: "value", value: e2 });
          var r2 = t2[0], n2 = "";
          for (r2.substring(0, 1) === "-" && (n2 = "-", r2 = r2.substring(1)); r2.substring(0, 1) === "0"; )
            r2 = r2.substring(1);
          r2 === "" && (r2 = "0");
          var i2 = "";
          t2.length === 2 && (i2 = "." + (t2[1] || "0"));
          for (var o2 = []; r2.length; ) {
            if (r2.length <= 3) {
              o2.unshift(r2);
              break;
            }
            var s2 = r2.length - 3;
            o2.unshift(r2.substring(s2)), r2 = r2.substring(0, s2);
          }
          return n2 + o2.join(",") + i2;
        }, r.formatUnits = a, r.parseUnits = u, r.formatEther = function(e2) {
          return a(e2, 18);
        }, r.parseEther = function(e2) {
          return u(e2, 18);
        };
      }, { "../constants": 3, "../errors": 5, "./bignumber": 63 }], 85: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        var s, n, i = e("../constants"), a = e("../errors"), h = e("./bytes");
        function o(e2, t2) {
          t2 === void 0 && (t2 = s.current), t2 != s.current && (a.checkNormalize(), e2 = e2.normalize(t2));
          for (var r2 = [], n2 = 0; n2 < e2.length; n2++) {
            var i2 = e2.charCodeAt(n2);
            if (i2 < 128)
              r2.push(i2);
            else if (i2 < 2048)
              r2.push(i2 >> 6 | 192), r2.push(63 & i2 | 128);
            else if ((64512 & i2) == 55296) {
              n2++;
              var o2 = e2.charCodeAt(n2);
              if (n2 >= e2.length || (64512 & o2) != 56320)
                throw new Error("invalid utf-8 string");
              i2 = 65536 + ((1023 & i2) << 10) + (1023 & o2), r2.push(i2 >> 18 | 240), r2.push(i2 >> 12 & 63 | 128), r2.push(i2 >> 6 & 63 | 128), r2.push(63 & i2 | 128);
            } else
              r2.push(i2 >> 12 | 224), r2.push(i2 >> 6 & 63 | 128), r2.push(63 & i2 | 128);
          }
          return h.arrayify(r2);
        }
        function u(e2, t2) {
          e2 = h.arrayify(e2);
          for (var r2 = "", n2 = 0; n2 < e2.length; ) {
            var i2 = e2[n2++];
            if (i2 >> 7 != 0) {
              var o2 = null, s2 = null;
              if ((224 & i2) == 192)
                o2 = 1, s2 = 127;
              else if ((240 & i2) == 224)
                o2 = 2, s2 = 2047;
              else {
                if ((248 & i2) != 240) {
                  if (t2)
                    continue;
                  if ((192 & i2) == 128)
                    throw new Error("invalid utf8 byte sequence; unexpected continuation byte");
                  throw new Error("invalid utf8 byte sequence; invalid prefix");
                }
                o2 = 3, s2 = 65535;
              }
              if (n2 + o2 > e2.length) {
                if (!t2)
                  throw new Error("invalid utf8 byte sequence; too short");
                for (; n2 < e2.length && e2[n2] >> 6 == 2; n2++)
                  ;
              } else {
                for (var a2 = i2 & (1 << 8 - o2 - 1) - 1, u2 = 0; u2 < o2; u2++) {
                  var l = e2[n2];
                  if ((192 & l) != 128) {
                    a2 = null;
                    break;
                  }
                  a2 = a2 << 6 | 63 & l, n2++;
                }
                if (a2 !== null)
                  if (a2 <= s2) {
                    if (!t2)
                      throw new Error("invalid utf8 byte sequence; overlong");
                  } else if (1114111 < a2) {
                    if (!t2)
                      throw new Error("invalid utf8 byte sequence; out-of-range");
                  } else if (55296 <= a2 && a2 <= 57343) {
                    if (!t2)
                      throw new Error("invalid utf8 byte sequence; utf-16 surrogate");
                  } else
                    a2 <= 65535 ? r2 += String.fromCharCode(a2) : (a2 -= 65536, r2 += String.fromCharCode(55296 + (a2 >> 10 & 1023), 56320 + (1023 & a2)));
                else if (!t2)
                  throw new Error("invalid utf8 byte sequence; invalid continuation byte");
              }
            } else
              r2 += String.fromCharCode(i2);
          }
          return r2;
        }
        (n = s = r.UnicodeNormalizationForm || (r.UnicodeNormalizationForm = {})).current = "", n.NFC = "NFC", n.NFD = "NFD", n.NFKC = "NFKC", n.NFKD = "NFKD", r.toUtf8Bytes = o, r.toUtf8String = u, r.formatBytes32String = function(e2) {
          var t2 = o(e2);
          if (31 < t2.length)
            throw new Error("bytes32 string must be less than 32 bytes");
          return h.hexlify(h.concat([t2, i.HashZero]).slice(0, 32));
        }, r.parseBytes32String = function(e2) {
          var t2 = h.arrayify(e2);
          if (t2.length !== 32)
            throw new Error("invalid bytes32 - not 32 bytes long");
          if (t2[31] !== 0)
            throw new Error("invalid bytes32 string - no null terminator");
          for (var r2 = 31; t2[r2 - 1] === 0; )
            r2--;
          return u(t2.slice(0, r2));
        };
      }, { "../constants": 3, "../errors": 5, "./bytes": 64 }], 86: [function(e, t, r) {
        "use strict";
        var n = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var f2 = e("xmlhttprequest"), i = e("./base64"), o = e("./properties"), s = e("./utf8"), c = n(e("../errors"));
        r.fetchJson = function(e2, a, u) {
          var r2 = {}, l = null, h = 12e4;
          if (typeof e2 == "string")
            l = e2;
          else if (typeof e2 == "object") {
            if (e2.url == null && c.throwError("missing URL", c.MISSING_ARGUMENT, { arg: "url" }), l = e2.url, typeof e2.timeout == "number" && 0 < e2.timeout && (h = e2.timeout), e2.headers)
              for (var t2 in e2.headers)
                r2[t2.toLowerCase()] = { key: t2, value: String(e2.headers[t2]) };
            if (e2.user != null && e2.password != null) {
              l.substring(0, 6) !== "https:" && e2.allowInsecure !== true && c.throwError("basic authentication requires a secure https url", c.INVALID_ARGUMENT, { arg: "url", url: l, user: e2.user, password: "[REDACTED]" });
              var n2 = e2.user + ":" + e2.password;
              r2.authorization = { key: "Authorization", value: "Basic " + i.encode(s.toUtf8Bytes(n2)) };
            }
          }
          return new Promise(function(n3, i2) {
            var o2 = new f2.XMLHttpRequest(), e3 = null;
            e3 = setTimeout(function() {
              e3 != null && (e3 = null, i2(new Error("timeout")), setTimeout(function() {
                o2.abort();
              }, 0));
            }, h);
            function s2() {
              e3 != null && (clearTimeout(e3), e3 = null);
            }
            a ? (o2.open("POST", l, true), r2["content-type"] = { key: "Content-Type", value: "application/json" }) : o2.open("GET", l, true), Object.keys(r2).forEach(function(e4) {
              var t4 = r2[e4];
              o2.setRequestHeader(t4.key, t4.value);
            }), o2.onreadystatechange = function() {
              if (o2.readyState === 4) {
                if (o2.status != 200) {
                  s2();
                  var e4 = new Error("invalid response - " + o2.status);
                  return e4.statusCode = o2.status, o2.responseText && (e4.responseText = o2.responseText), void i2(e4);
                }
                var t4 = null;
                try {
                  t4 = JSON.parse(o2.responseText);
                } catch (e5) {
                  s2();
                  var r3 = new Error("invalid json response");
                  return r3.orginialError = e5, r3.responseText = o2.responseText, a != null && (r3.requestBody = a), r3.url = l, void i2(r3);
                }
                if (u)
                  try {
                    t4 = u(t4);
                  } catch (e5) {
                    return s2(), e5.url = l, e5.body = a, e5.responseText = o2.responseText, void i2(e5);
                  }
                s2(), n3(t4);
              }
            }, o2.onerror = function(e4) {
              s2(), i2(e4);
            };
            try {
              a != null ? o2.send(a) : o2.send();
            } catch (e4) {
              s2();
              var t3 = new Error("connection error");
              t3.error = e4, i2(t3);
            }
          });
        }, r.poll = function(u, l) {
          return l = l || {}, (l = o.shallowCopy(l)).floor == null && (l.floor = 0), l.ceiling == null && (l.ceiling = 1e4), l.interval == null && (l.interval = 250), new Promise(function(n2, t2) {
            var e2 = null, i2 = false, o2 = function() {
              return !i2 && (i2 = true, e2 && clearTimeout(e2), true);
            };
            l.timeout && (e2 = setTimeout(function() {
              o2() && t2(new Error("timeout"));
            }, l.timeout));
            var s2 = l.fastRetry || null, a = 0;
            !function r2() {
              return u().then(function(e3) {
                if (e3 !== void 0)
                  o2() && n2(e3);
                else if (l.onceBlock)
                  l.onceBlock.once("block", r2);
                else if (!i2) {
                  a++;
                  var t3 = l.interval * parseInt(String(Math.random() * Math.pow(2, a)));
                  t3 < l.floor && (t3 = l.floor), t3 > l.ceiling && (t3 = l.ceiling), s2 && (a--, t3 = s2, s2 = null), setTimeout(r2, t3);
                }
                return null;
              }, function(e3) {
                o2() && t2(e3);
              });
            }();
          });
        };
      }, { "../errors": 5, "./base64": 61, "./properties": 74, "./utf8": 85, xmlhttprequest: 49 }], 87: [function(o, e, s) {
        (function(e2) {
          "use strict";
          Object.defineProperty(s, "__esModule", { value: true });
          var i = o("../utils/hash"), t = o("../utils/properties");
          s.check = function(e3) {
            for (var t2 = [], r2 = 0; r2 < 2048; r2++) {
              var n2 = e3.getWord(r2);
              if (r2 !== e3.getWordIndex(n2))
                return "0x";
              t2.push(n2);
            }
            return i.id(t2.join("\n") + "\n");
          };
          var r = (n.prototype.split = function(e3) {
            return e3.toLowerCase().split(/ +/g);
          }, n.prototype.join = function(e3) {
            return e3.join(" ");
          }, n);
          function n(e3) {
            t.defineReadOnly(this, "locale", e3);
          }
          s.Wordlist = r, s.register = function(e3, t2) {
            t2 = t2 || e3.locale;
          };
        }).call(this, typeof global != "undefined" ? global : typeof self != "undefined" ? self : typeof window != "undefined" ? window : {});
      }, { "../utils/hash": 65, "../utils/properties": 74 }], 88: [function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e2, t2) {
          e2.__proto__ = t2;
        } || function(e2, t2) {
          for (var r2 in t2)
            t2.hasOwnProperty(r2) && (e2[r2] = t2[r2]);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        }), o = this && this.__importStar || function(e2) {
          if (e2 && e2.__esModule)
            return e2;
          var t2 = {};
          if (e2 != null)
            for (var r2 in e2)
              Object.hasOwnProperty.call(e2, r2) && (t2[r2] = e2[r2]);
          return t2.default = e2, t2;
        };
        Object.defineProperty(r, "__esModule", { value: true });
        var s, a = e("./utils/bytes"), u = e("./utils/hash"), l = e("./utils/hdnode"), h = e("./utils/json-wallet"), f2 = e("./utils/keccak256"), c = e("./utils/properties"), d = e("./utils/random-bytes"), p = o(e("./utils/secret-storage")), v = e("./utils/signing-key"), y = e("./utils/transaction"), m = e("./abstract-signer"), g = e("./providers/abstract-provider"), b = o(e("./errors")), w = (s = m.Signer, i(_, s), Object.defineProperty(_.prototype, "address", { get: function() {
          return this.signingKey.address;
        }, enumerable: true, configurable: true }), Object.defineProperty(_.prototype, "mnemonic", { get: function() {
          return this.signingKey.mnemonic;
        }, enumerable: true, configurable: true }), Object.defineProperty(_.prototype, "path", { get: function() {
          return this.signingKey.path;
        }, enumerable: true, configurable: true }), Object.defineProperty(_.prototype, "privateKey", { get: function() {
          return this.signingKey.privateKey;
        }, enumerable: true, configurable: true }), _.prototype.connect = function(e2) {
          return g.Provider.isProvider(e2) || b.throwError("invalid provider", b.INVALID_ARGUMENT, { argument: "provider", value: e2 }), new _(this.signingKey, e2);
        }, _.prototype.getAddress = function() {
          return Promise.resolve(this.address);
        }, _.prototype.sign = function(e2) {
          var n2 = this;
          return c.resolveProperties(e2).then(function(e3) {
            var t2 = y.serialize(e3), r2 = n2.signingKey.signDigest(f2.keccak256(t2));
            return y.serialize(e3, r2);
          });
        }, _.prototype.signMessage = function(e2) {
          return Promise.resolve(a.joinSignature(this.signingKey.signDigest(u.hashMessage(e2))));
        }, _.prototype.getBalance = function(e2) {
          if (!this.provider)
            throw new Error("missing provider");
          return this.provider.getBalance(this.address, e2);
        }, _.prototype.getTransactionCount = function(e2) {
          if (!this.provider)
            throw new Error("missing provider");
          return this.provider.getTransactionCount(this.address, e2);
        }, _.prototype.sendTransaction = function(e2) {
          var t2 = this;
          if (!this.provider)
            throw new Error("missing provider");
          return e2.nonce == null && ((e2 = c.shallowCopy(e2)).nonce = this.getTransactionCount("pending")), y.populateTransaction(e2, this.provider, this.address).then(function(e3) {
            return t2.sign(e3).then(function(e4) {
              return t2.provider.sendTransaction(e4);
            });
          });
        }, _.prototype.encrypt = function(e2, t2, r2) {
          if (typeof t2 != "function" || r2 || (r2 = t2, t2 = {}), r2 && typeof r2 != "function")
            throw new Error("invalid callback");
          return t2 = t2 || {}, this.mnemonic && ((t2 = c.shallowCopy(t2)).mnemonic = this.mnemonic, t2.path = this.path), p.encrypt(this.privateKey, e2, t2, r2);
        }, _.createRandom = function(e2) {
          var t2 = d.randomBytes(16);
          (e2 = e2 || {}).extraEntropy && (t2 = a.arrayify(f2.keccak256(a.concat([t2, e2.extraEntropy])).substring(0, 34)));
          var r2 = l.entropyToMnemonic(t2, e2.locale);
          return _.fromMnemonic(r2, e2.path, e2.locale);
        }, _.fromEncryptedJson = function(e2, t2, r2) {
          if (h.isCrowdsaleWallet(e2))
            try {
              r2 && r2(0);
              var n2 = p.decryptCrowdsale(e2, t2);
              return r2 && r2(1), Promise.resolve(new _(n2));
            } catch (e3) {
              return Promise.reject(e3);
            }
          else if (h.isSecretStorageWallet(e2))
            return p.decrypt(e2, t2, r2).then(function(e3) {
              return new _(e3);
            });
          return Promise.reject("invalid wallet JSON");
        }, _.fromMnemonic = function(e2, t2, r2) {
          return t2 = t2 || l.defaultPath, new _(l.fromMnemonic(e2, r2).derivePath(t2));
        }, _);
        function _(e2, t2) {
          var r2 = s.call(this) || this;
          return b.checkNew(r2, _), v.SigningKey.isSigningKey(e2) ? c.defineReadOnly(r2, "signingKey", e2) : c.defineReadOnly(r2, "signingKey", new v.SigningKey(e2)), c.defineReadOnly(r2, "provider", t2), r2;
        }
        r.Wallet = w;
      }, { "./abstract-signer": 2, "./errors": 5, "./providers/abstract-provider": 50, "./utils/bytes": 64, "./utils/hash": 65, "./utils/hdnode": 66, "./utils/json-wallet": 70, "./utils/keccak256": 71, "./utils/properties": 74, "./utils/random-bytes": 75, "./utils/secret-storage": 78, "./utils/signing-key": 81, "./utils/transaction": 83 }], 89: [function(e, t, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true });
        var n = e("../wordlists/lang-en").langEn;
        r.en = n;
      }, { "../wordlists/lang-en": 90 }], 90: [function(e, t, r) {
        "use strict";
        var n, i = this && this.__extends || (n = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e2, t2) {
          e2.__proto__ = t2;
        } || function(e2, t2) {
          for (var r2 in t2)
            t2.hasOwnProperty(r2) && (e2[r2] = t2[r2]);
        }, function(e2, t2) {
          function r2() {
            this.constructor = e2;
          }
          n(e2, t2), e2.prototype = t2 === null ? Object.create(t2) : (r2.prototype = t2.prototype, new r2());
        });
        Object.defineProperty(r, "__esModule", { value: true });
        var o, s = e("../utils/wordlist"), a = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo", u = null;
        function l(e2) {
          if (u == null && (u = a.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" "), s.check(e2) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60"))
            throw u = null, new Error("BIP39 Wordlist for en (English) FAILED");
        }
        function h() {
          return o.call(this, "en") || this;
        }
        var f2 = new (o = s.Wordlist, i(h, o), h.prototype.getWord = function(e2) {
          return l(this), u[e2];
        }, h.prototype.getWordIndex = function(e2) {
          return l(this), u.indexOf(e2);
        }, h)();
        r.langEn = f2, s.register(f2);
      }, { "../utils/wordlist": 87 }] }, {}, [7])(7);
    });
  }
});

// node_modules/normalize-hex/index.js
var require_normalize_hex = __commonJS({
  "node_modules/normalize-hex/index.js"(exports, module) {
    init_define_process_env();
    function normalizeHex(hex, opts) {
      opts = __spreadValues({
        evenLength: false,
        addPrefix: false
      }, opts);
      let value = "";
      if (Buffer.isBuffer(hex)) {
        hex = hex.toString("hex");
      }
      if (typeof hex === "number") {
        hex = hex.toString();
      }
      if (typeof hex === "string") {
        value = hex.toLowerCase();
      }
      if (value.startsWith("0x")) {
        value = value.slice(2);
      }
      const data = value.length % 2 ? `0${value}` : value;
      if (Buffer.from(data, "hex")) {
        value = opts.evenLength ? data : value;
      }
      if (opts.addPrefix) {
        value = `0x${value}`;
      }
      return value;
    }
    module.exports = normalizeHex;
  }
});

// node_modules/to-hex/index.js
var require_to_hex = __commonJS({
  "node_modules/to-hex/index.js"(exports, module) {
    init_define_process_env();
    var normalizeHex = require_normalize_hex();
    function toHex(value, opts = {}) {
      opts = __spreadValues({
        size: 0,
        addPrefix: false,
        evenLength: false,
        default: ""
      }, opts);
      var result = "";
      if (opts.default !== "") {
        result = opts.default;
      }
      if (value === "" || value === void 0 || value === null) {
        value = result;
      }
      if (value === "0") {
        value = 0;
      }
      if (value === void 0 || value === null) {
      } else if (typeof value === "number") {
        result = value.toString(16);
      } else if (typeof value === "string") {
        value = value.trim();
        if (value.startsWith("0x")) {
          result = normalizeHex(value);
        } else if (value !== "" && Number.isFinite(+value)) {
          result = Number(value).toString(16);
        }
        if (result === opts.default) {
          result = Buffer.from(value, "utf8").toString("hex");
        }
      } else if (typeof value === "boolean") {
        result = value ? "1" : "0";
      } else if (typeof value === "object" && value !== null) {
        if (Buffer.isBuffer(value)) {
          result = value.toString("hex");
        } else if (/(BN|BigNumber|Big|Decimal)/.test(value.constructor.name)) {
          result = value.toString(16);
        } else if (value instanceof Uint8Array) {
          result = Buffer.from([
            ...value
          ]).toString("hex");
        } else if (value.toString && typeof value.toString === "function") {
          try {
            const h = value.toString(16);
            if (/^[a-fA-F0-9]+$/.test(h)) {
              result = h;
            }
          } catch (err) {
          }
        }
      }
      if (typeof result === "string") {
        result = result.toLowerCase();
        if (opts.size > result.length) {
          result = `${"0".repeat(opts.size - result.length)}${result}`;
        }
        if (opts.evenLength && result.length % 2) {
          result = `0${result}`;
        }
        if (opts.addPrefix) {
          result = `0x${result}`;
        }
      }
      return result;
    }
    module.exports = toHex;
  }
});

// node_modules/uuidv4/node_modules/uuid/dist/esm-browser/rng.js
function rng() {
  if (!getRandomValues) {
    throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
  }
  return getRandomValues(rnds8);
}
var getRandomValues, rnds8;
var init_rng = __esm({
  "node_modules/uuidv4/node_modules/uuid/dist/esm-browser/rng.js"() {
    init_define_process_env();
    getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
    rnds8 = new Uint8Array(16);
  }
});

// node_modules/uuidv4/node_modules/uuid/dist/esm-browser/bytesToUuid.js
function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return [bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], "-", bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]], bth[buf[i++]]].join("");
}
var byteToHex, i, bytesToUuid_default;
var init_bytesToUuid = __esm({
  "node_modules/uuidv4/node_modules/uuid/dist/esm-browser/bytesToUuid.js"() {
    init_define_process_env();
    byteToHex = [];
    for (i = 0; i < 256; ++i) {
      byteToHex[i] = (i + 256).toString(16).substr(1);
    }
    bytesToUuid_default = bytesToUuid;
  }
});

// node_modules/uuidv4/node_modules/uuid/dist/esm-browser/v1.js
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  var msecs = options.msecs !== void 0 ? options.msecs : new Date().getTime();
  var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  var tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf ? buf : bytesToUuid_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "node_modules/uuidv4/node_modules/uuid/dist/esm-browser/v1.js"() {
    init_define_process_env();
    init_rng();
    init_bytesToUuid();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

// node_modules/uuidv4/node_modules/uuid/dist/esm-browser/v35.js
function uuidToBytes(uuid) {
  var bytes = [];
  uuid.replace(/[a-fA-F0-9]{2}/g, function(hex) {
    bytes.push(parseInt(hex, 16));
  });
  return bytes;
}
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = new Array(str.length);
  for (var i = 0; i < str.length; i++) {
    bytes[i] = str.charCodeAt(i);
  }
  return bytes;
}
function v35_default(name, version, hashfunc) {
  var generateUUID = function generateUUID2(value, namespace, buf, offset) {
    var off = buf && offset || 0;
    if (typeof value == "string")
      value = stringToBytes(value);
    if (typeof namespace == "string")
      namespace = uuidToBytes(namespace);
    if (!Array.isArray(value))
      throw TypeError("value must be an array of bytes");
    if (!Array.isArray(namespace) || namespace.length !== 16)
      throw TypeError("namespace must be uuid string or an Array of 16 byte values");
    var bytes = hashfunc(namespace.concat(value));
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      for (var idx = 0; idx < 16; ++idx) {
        buf[off + idx] = bytes[idx];
      }
    }
    return buf || bytesToUuid_default(bytes);
  };
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/uuidv4/node_modules/uuid/dist/esm-browser/v35.js"() {
    init_define_process_env();
    init_bytesToUuid();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuidv4/node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes == "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Array(msg.length);
    for (var i = 0; i < msg.length; i++) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  var i;
  var x;
  var output = [];
  var length32 = input.length * 32;
  var hexTab = "0123456789abcdef";
  var hex;
  for (i = 0; i < length32; i += 8) {
    x = input[i >> 5] >>> i % 32 & 255;
    hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex);
  }
  return output;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[(len + 64 >>> 9 << 4) + 14] = len;
  var i;
  var olda;
  var oldb;
  var oldc;
  var oldd;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;
  for (i = 0; i < x.length; i += 16) {
    olda = a;
    oldb = b;
    oldc = c;
    oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
function bytesToWords(input) {
  var i;
  var output = [];
  output[(input.length >> 2) - 1] = void 0;
  for (i = 0; i < output.length; i += 1) {
    output[i] = 0;
  }
  var length8 = input.length * 8;
  for (i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd(x, y) {
  var lsw = (x & 65535) + (y & 65535);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default;
var init_md5 = __esm({
  "node_modules/uuidv4/node_modules/uuid/dist/esm-browser/md5.js"() {
    init_define_process_env();
    md5_default = md5;
  }
});

// node_modules/uuidv4/node_modules/uuid/dist/esm-browser/v3.js
var v3, v3_default;
var init_v3 = __esm({
  "node_modules/uuidv4/node_modules/uuid/dist/esm-browser/v3.js"() {
    init_define_process_env();
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

// node_modules/uuidv4/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  var i = buf && offset || 0;
  if (typeof options == "string") {
    buf = options === "binary" ? new Array(16) : null;
    options = null;
  }
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }
  return buf || bytesToUuid_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuidv4/node_modules/uuid/dist/esm-browser/v4.js"() {
    init_define_process_env();
    init_rng();
    init_bytesToUuid();
    v4_default = v4;
  }
});

// node_modules/uuidv4/node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  var K = [1518500249, 1859775393, 2400959708, 3395469782];
  var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes == "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Array(msg.length);
    for (var i = 0; i < msg.length; i++) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  bytes.push(128);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);
  for (var i = 0; i < N; i++) {
    M[i] = new Array(16);
    for (var j = 0; j < 16; j++) {
      M[i][j] = bytes[i * 64 + j * 4] << 24 | bytes[i * 64 + j * 4 + 1] << 16 | bytes[i * 64 + j * 4 + 2] << 8 | bytes[i * 64 + j * 4 + 3];
    }
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var i = 0; i < N; i++) {
    var W = new Array(80);
    for (var t = 0; t < 16; t++) {
      W[t] = M[i][t];
    }
    for (var t = 16; t < 80; t++) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }
    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];
    for (var t = 0; t < 80; t++) {
      var s = Math.floor(t / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default;
var init_sha1 = __esm({
  "node_modules/uuidv4/node_modules/uuid/dist/esm-browser/sha1.js"() {
    init_define_process_env();
    sha1_default = sha1;
  }
});

// node_modules/uuidv4/node_modules/uuid/dist/esm-browser/v5.js
var v5, v5_default;
var init_v5 = __esm({
  "node_modules/uuidv4/node_modules/uuid/dist/esm-browser/v5.js"() {
    init_define_process_env();
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

// node_modules/uuidv4/node_modules/uuid/dist/esm-browser/index.js
var esm_browser_exports = {};
__export(esm_browser_exports, {
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default
});
var init_esm_browser = __esm({
  "node_modules/uuidv4/node_modules/uuid/dist/esm-browser/index.js"() {
    init_define_process_env();
    init_v1();
    init_v3();
    init_v4();
    init_v5();
  }
});

// node_modules/uuidv4/build/lib/uuidv4.js
var require_uuidv4 = __commonJS({
  "node_modules/uuidv4/build/lib/uuidv4.js"(exports) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var uuid_1 = (init_esm_browser(), esm_browser_exports);
    var uuidv4 = function() {
      return uuid_1.v4();
    };
    exports.uuid = uuidv4;
    var regex = {
      v4: /(?:^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}$)|(?:^0{8}-0{4}-0{4}-0{4}-0{12}$)/u,
      v5: /(?:^[a-f0-9]{8}-[a-f0-9]{4}-5[a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}$)|(?:^0{8}-0{4}-0{4}-0{4}-0{12}$)/u
    };
    exports.regex = regex;
    var isUuid = function(value) {
      return regex.v4.test(value) || regex.v5.test(value);
    };
    exports.isUuid = isUuid;
    var empty = function() {
      return "00000000-0000-0000-0000-000000000000";
    };
    exports.empty = empty;
    var fromString = function(text) {
      const namespace = "bb5d0ffa-9a4c-4d7c-8fc2-0a7d2220ba45";
      const uuidFromString = uuid_1.v5(text, namespace);
      return uuidFromString;
    };
    exports.fromString = fromString;
  }
});

// node_modules/authereum/node_modules/bn.js/lib/bn.js
var require_bn5 = __commonJS({
  "node_modules/authereum/node_modules/bn.js/lib/bn.js"(exports, module) {
    init_define_process_env();
    (function(module2, exports2) {
      "use strict";
      function assert(val, msg) {
        if (!val)
          throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN(number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN;
      } else {
        exports2.BN = BN;
      }
      BN.BN = BN;
      BN.wordSize = 26;
      var Buffer2;
      try {
        Buffer2 = (init_buffer(), buffer_exports).Buffer;
      } catch (e) {
      }
      BN.isBN = function isBN(num) {
        if (num instanceof BN) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };
      BN.max = function max(left, right) {
        if (left.cmp(right) > 0)
          return left;
        return right;
      };
      BN.min = function min(left, right) {
        if (left.cmp(right) < 0)
          return left;
        return right;
      };
      BN.prototype._init = function init(number, base, endian) {
        if (typeof number === "number") {
          return this._initNumber(number, base, endian);
        }
        if (typeof number === "object") {
          return this._initArray(number, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, "");
        var start = 0;
        if (number[0] === "-") {
          start++;
        }
        if (base === 16) {
          this._parseHex(number, start);
        } else {
          this._parseBase(number, base, start);
        }
        if (number[0] === "-") {
          this.negative = 1;
        }
        this._strip();
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 67108864) {
          this.words = [number & 67108863];
          this.length = 1;
        } else if (number < 4503599627370496) {
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert(number < 9007199254740992);
          this.words = [
            number & 67108863,
            number / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le")
          return;
        this._initArray(this.toArray(), base, endian);
      };
      BN.prototype._initArray = function _initArray(number, base, endian) {
        assert(typeof number.length === "number");
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex(str, start, end) {
        var r = 0;
        var len = Math.min(str.length, end);
        var z = 0;
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r <<= 4;
          var b;
          if (c >= 49 && c <= 54) {
            b = c - 49 + 10;
          } else if (c >= 17 && c <= 22) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          r |= b;
          z |= b;
        }
        assert(!(z & 240), "Invalid character in " + str);
        return r;
      }
      BN.prototype._parseHex = function _parseHex(number, start) {
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        for (i = number.length - 6, j = 0; i >= start; i -= 6) {
          w = parseHex(number, i, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
          off += 24;
          if (off >= 26) {
            off -= 26;
            j++;
          }
        }
        if (i + 6 !== start) {
          w = parseHex(number, start, i + 6);
          this.words[j] |= w << off & 67108863;
          this.words[j + 1] |= w >>> 26 - off & 4194303;
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r *= mul;
          if (c >= 49) {
            b = c - 49 + 10;
          } else if (c >= 17) {
            b = c - 17 + 10;
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, "Invalid character");
          r += b;
        }
        return r;
      }
      BN.prototype._parseBase = function _parseBase(number, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);
          for (i = 0; i < mod; i++) {
            pow *= base;
          }
          this.imuln(pow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
      };
      BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
      };
      BN.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
      } else {
        BN.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert(false, "Base should be between 2 and 36");
      };
      BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, "byte array longer than desired length");
        assert(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits(w) {
          var t = w;
          var r = 0;
          if (t >= 4096) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }
      BN.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0)
          return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r++;
        }
        return r;
      };
      BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero())
          return 0;
        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26)
            break;
        }
        return r;
      };
      BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN.prototype.or = function or(num) {
        if (this.length > num.length)
          return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN.prototype.uor = function uor(num) {
        if (this.length > num.length)
          return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN.prototype.iuand = function iuand(num) {
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b.length;
        return this._strip();
      };
      BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN.prototype.and = function and(num) {
        if (this.length > num.length)
          return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN.prototype.uand = function uand(num) {
        if (this.length > num.length)
          return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN.prototype.iuxor = function iuxor(num) {
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN.prototype.xor = function xor(num) {
        if (this.length > num.length)
          return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length)
          return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN.prototype.inotn = function inotn(width) {
        assert(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN.prototype.iadd = function iadd(num) {
        var r;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 67108863;
          carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length)
          return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }
        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += r / 67108864 | 0;
            rword = r & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;
            var lo = r & 67108863;
            ncarry = ncarry + (r / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for (var i = 0; i < N; i++) {
          t[i] = this.revBin(i, l, N);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1)
          return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for (var i = 0; i < N; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for (var s = 1; s < N; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for (N = N / 2 | 0; N; N = N >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1)
          return;
        for (var i = 0; i < N / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N - i - 1];
          rws[N - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N - i - 1];
          iws[N - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for (var i = 0; i < N / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N; ++i) {
          rws[i] = 0;
        }
        assert(carry === 0);
        assert((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for (var i = 0; i < N; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for (var i = 0; i < N; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(typeof num === "number");
        assert(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0)
          return new BN(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0)
            break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0)
              continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN.prototype.ishln = function ishln(bits) {
        assert(this.negative === 0);
        return this.iushln(bits);
      };
      BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r | word >>> r;
          carry = word & mask;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN.prototype.testn = function testn(bit) {
        assert(typeof bit === "number" && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s)
          return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === "number" && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r !== 0) {
          var mask = 67108863 ^ 67108863 >>> r << r;
          this.words[this.length - 1] &= mask;
        }
        return this._strip();
      };
      BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN.prototype.isubn = function isubn(num) {
        assert(typeof num === "number");
        assert(num < 67108864);
        if (num < 0)
          return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0)
          return this._strip();
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }
        var m = a.length - b.length;
        var q;
        if (mode !== "mod") {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }
          return {
            div,
            mod
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }
          return {
            div: res.div,
            mod
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN.prototype.mod = function mod(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero())
          return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0)
          return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum)
          num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN(1);
        var B = new BN(0);
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
            ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
            ;
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN.prototype.gcd = function gcd(num) {
        if (this.isZero())
          return num.abs();
        if (num.isZero())
          return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }
          var r = a.cmp(b);
          if (r < 0) {
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }
          a.isub(b);
        } while (true);
        return b.iushln(shift);
      };
      BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === "number");
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative)
          return -1;
        if (this.negative === 0 && negative)
          return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0)
          return -1;
        if (this.negative === 0 && num.negative !== 0)
          return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0)
          return -res | 0;
        return res;
      };
      BN.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length)
          return 1;
        if (this.length < num.length)
          return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;
          if (a === b)
            continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN.red = function red(num) {
        return new Red(num);
      };
      BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        assert(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN.prototype.fromRed = function fromRed() {
        assert(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN.prototype.redSub = function redSub(num) {
        assert(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN.prototype.redISub = function redISub(num) {
        assert(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN.prototype.redShl = function redShl(num) {
        assert(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN.prototype.redMul = function redMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN.prototype.redSqr = function redSqr() {
        assert(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN.prototype.redISqr = function redISqr() {
        assert(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN.prototype.redInvm = function redInvm() {
        assert(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN.prototype.redNeg = function redNeg() {
        assert(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r = num;
        var rlen;
        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== void 0) {
            r.strip();
          } else {
            r._strip();
          }
        }
        return r;
      };
      MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split(input, output) {
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN._prime = function prime(name) {
        if (primes[name])
          return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, "red works only with positives");
        assert(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, "red works only with positives");
        assert(a.red && a.red === b.red, "red works only with red numbers");
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime)
          return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };
      Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero())
          return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));
          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow(a, num) {
        if (num.isZero())
          return new BN(1).toRed(this);
        if (num.cmpn(1) === 0)
          return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0))
              continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };
      Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero())
          return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/authereum/dist/utils.js
var require_utils3 = __commonJS({
  "node_modules/authereum/dist/utils.js"(exports) {
    init_define_process_env();
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var _privToAddress = __importStar(require_ethereum_private_key_to_address());
    var ethers = __importStar(require_ethers_min());
    var to_hex_1 = __importDefault(require_to_hex());
    var uuidlib = __importStar(require_uuidv4());
    var querystring_1 = __importDefault(require_querystring());
    var bn_js_1 = __importDefault(require_bn5());
    var { uuid } = uuidlib;
    exports.uuidv4 = uuid;
    exports.privateKeyToAddress = _privToAddress;
    exports.wait = (t) => __awaiter(void 0, void 0, void 0, function* () {
      return new Promise((resolve) => setTimeout(() => resolve(), t));
    });
    exports.toHex = (value, opts = {}) => {
      if (opts.addPrefix === void 0) {
        opts.addPrefix = true;
      }
      opts.default = 0;
      return to_hex_1.default(value, opts);
    };
    exports.signWithPrivateKey = (message, privateKey, providerUri) => __awaiter(void 0, void 0, void 0, function* () {
      if (!privateKey) {
        throw new Error("private key is required");
      }
      const provider = new ethers.providers.JsonRpcProvider(providerUri);
      const wallet = new ethers.Wallet(privateKey, provider);
      let data = message;
      if (message.startsWith("0x")) {
        data = ethers.utils.arrayify(message);
      }
      const signature = yield wallet.signMessage(data);
      const address = exports.privateKeyToAddress(privateKey);
      return signature;
    });
    exports.debounce = (callback, time) => {
      let interval;
      return (...args) => {
        clearTimeout(interval);
        interval = setTimeout(() => {
          interval = null;
          callback(...args);
        }, time);
      };
    };
    exports.throttle = (fn, interval, limit = 1) => {
      const queue = new Map();
      let currentTick = 0;
      let activeCount = 0;
      const throttled = function(...args) {
        let timeout;
        return new Promise((resolve, reject) => {
          const execute = () => {
            resolve(fn.apply(this, args));
            queue.delete(timeout);
          };
          const now = Date.now();
          if (now - currentTick > interval) {
            activeCount = 1;
            currentTick = now;
            timeout = setTimeout(execute, currentTick - now);
          } else if (activeCount < limit) {
            activeCount++;
          } else {
            activeCount = 1;
          }
          queue.set(timeout, reject);
        });
      };
      return throttled;
    };
    exports.getQueryParamValue = (name) => {
      const query = window.location.search.substr(1);
      const params = querystring_1.default.parse(query);
      if (params[name]) {
        return params[name];
      }
      return null;
    };
    exports.removeQueryParam = (key, url = window.location.href) => {
      try {
        const u = new URL(url);
        if ("URLSearchParams" in window) {
          const searchParams = new URLSearchParams(u.search);
          searchParams.delete(key);
          u.search = searchParams.toString();
          return u.toString();
        }
      } catch (err) {
      }
      return url;
    };
    exports.updateQueryParams = (params = {}, url = window.location.href) => {
      try {
        const u = new URL(url);
        if ("URLSearchParams" in window) {
          const searchParams = new URLSearchParams(u.search);
          for (let key in params) {
            const value = params[key];
            if (!value) {
              continue;
            }
            searchParams.set(key, value);
          }
          u.search = searchParams.toString();
          return u.toString();
        }
      } catch (err) {
      }
      return url;
    };
    exports.replaceWindowUrl = (newUrl) => {
      try {
        window.history.replaceState({}, document.title, newUrl);
      } catch (err) {
      }
    };
    exports.browserInfo = () => {
      let ret;
      let tmp;
      let ua = navigator.userAgent;
      let m = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
      if (/trident/i.test(m[1])) {
        tmp = /\brv[ :]+(\d+)/g.exec(ua) || [];
        ret = "IE " + (tmp[1] || "");
      }
      if (m[1] === "Chrome") {
        tmp = ua.match(/\b(OPR|Edge?)\/(\d+)/);
        if (tmp != null) {
          ret = tmp.slice(1).join(" ").replace("OPR", "Opera").replace("Edg ", "Edge ");
        }
      }
      m = m[2] ? [m[1], m[2]] : [navigator.appName, navigator.appVersion, "-?"];
      let v = (tmp = ua.match(/version\/(\d+)/i)) != null;
      if (v) {
        m.splice(1, 1, tmp[1]);
      }
      ret = m.join(" ");
      let p = ret.split(" ");
      return {
        browser: p[0],
        version: p[1]
      };
    };
    exports.exportRecoveryParam = (recoveryParam) => {
      return typeof recoveryParam === "number" ? new bn_js_1.default(recoveryParam).add(new bn_js_1.default(27)).toString(16) : null;
    };
    exports.importRecoveryParam = (v) => {
      return v.trim() ? new bn_js_1.default(v, 16).sub(new bn_js_1.default(27)).toNumber() : void 0;
    };
  }
});

// node_modules/authereum/dist/AuthereumProvider.js
var require_AuthereumProvider = __commonJS({
  "node_modules/authereum/dist/AuthereumProvider.js"(exports) {
    init_define_process_env();
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            result[k] = mod[k];
      }
      result["default"] = mod;
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var waterfall_1 = __importDefault(require_waterfall());
    var ethUtil = __importStar(require_dist());
    var xtend_1 = __importDefault(require_immutable());
    var web3_provider_engine_1 = __importDefault(require_web3_provider_engine());
    var hooked_wallet_1 = __importDefault(require_hooked_wallet());
    var rpc_1 = __importDefault(require_rpc());
    var subscriptions_1 = __importDefault(require_subscriptions());
    var filters_1 = __importDefault(require_filters());
    var pify_1 = __importDefault(require_pify());
    var web3Utils = __importStar(require_src4());
    var AuthereumSDK_1 = __importDefault(require_AuthereumSDK());
    var utils_1 = require_utils3();
    var AuthereumProvider = class extends web3_provider_engine_1.default {
      constructor(config) {
        super();
        this.isAuthereum = true;
        this.lastSignTx = "";
        this.lastSignTxTimeout = null;
        this.lastTx = "";
        this.lastTxTimeout = null;
        this.lastMsg = "";
        this.lastMsgTimeout = null;
        this.lastTypedMsg = "";
        this.lastTypedMsgTimeout = null;
        let authereumClient = null;
        if (config instanceof AuthereumSDK_1.default) {
          authereumClient = config;
          config = authereumClient.config;
        }
        this.config = config || {};
        this.authereum = authereumClient || new AuthereumSDK_1.default(this.config);
        this.initSubprovider();
        this.isAuthereum = true;
      }
      initSubprovider() {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.authereum._tilReady();
          this.rpcUri = this.config.rpcUri || (yield this.authereum.getRpcUri());
          const throttleTimeout = 2e3;
          const walletSubprovider = new hooked_wallet_1.default({
            getAccounts: (cb) => __awaiter(this, void 0, void 0, function* () {
              const loggedIn = yield this.authereum.isAuthenticated();
              if (!loggedIn) {
                if (cb) {
                  cb(null, []);
                }
                return [];
              }
              const accountAddress = yield this.authereum.getAccountAddress();
              if (!accountAddress) {
                if (cb) {
                  cb(null, []);
                }
                return [];
              }
              if (cb) {
                cb(null, [accountAddress]);
              }
              return [accountAddress];
            }),
            approveTransaction: (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
              if (cb) {
                cb(null, true);
              }
              return true;
            }),
            approveMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
              if (cb) {
                cb(null, true);
              }
              return true;
            }),
            approveTypedMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
              if (cb) {
                cb(null, true);
              }
              return true;
            }),
            signMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
              let currentMsg = msgParams;
              try {
                currentMsg = JSON.stringify(msgParams);
              } catch (err) {
              }
              clearTimeout(this.lastMsgTimeout);
              if (this.lastMsg === currentMsg) {
                return this._throttledSignMessage(msgParams, cb);
              }
              const isFirst = !this.lastMsg;
              this.lastMsg = currentMsg;
              this.lastMsgTimeout = setTimeout(() => {
                this.lastMsg = "";
              }, throttleTimeout);
              if (isFirst) {
                return this._throttledSignMessage(msgParams, cb);
              }
              return this._signMessage(msgParams, cb);
            }),
            signTransaction: (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
              const t = Object.assign({}, txParams);
              t.nonce = null;
              const currentTx = JSON.stringify(t);
              clearTimeout(this.lastSignTxTimeout);
              if (this.lastSignTx === currentTx) {
                return this._throttledSignTransaction(txParams, cb);
              }
              const isFirst = !this.lastSignTx;
              this.lastSignTx = currentTx;
              this.lastSignTxTimeout = setTimeout(() => {
                this.lastSignTx = "";
              }, throttleTimeout);
              if (isFirst) {
                return this._throttledSignTransaction(txParams, cb);
              }
              return this._signTransaction(txParams, cb);
            }),
            processSignTransaction: (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
              const t = Object.assign({}, txParams);
              t.nonce = null;
              const currentTx = JSON.stringify(t);
              clearTimeout(this.lastTxTimeout);
              if (this.lastTx === currentTx) {
                return this._throttledProcessSignTransaction(txParams, cb);
              }
              const isFirst = !this.lastTx;
              this.lastTx = currentTx;
              this.lastTxTimeout = setTimeout(() => {
                this.lastTx = "";
              }, throttleTimeout);
              if (isFirst) {
                return this._throttledProcessSignTransaction(txParams, cb);
              }
              return walletSubprovider.finalizeTx(txParams, cb);
            }),
            processTransaction: (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
              const t = Object.assign({}, txParams);
              t.nonce = null;
              const currentTx = JSON.stringify(t);
              clearTimeout(this.lastTxTimeout);
              if (this.lastTx === currentTx) {
                return this._throttledProcessTransaction(txParams, cb);
              }
              const isFirst = !this.lastTx;
              this.lastTx = currentTx;
              this.lastTxTimeout = setTimeout(() => {
                this.lastTx = "";
              }, throttleTimeout);
              if (isFirst) {
                return this._throttledProcessTransaction(txParams, cb);
              }
              return this._processTransaction(txParams, cb);
            }),
            finalizeTx: (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
              try {
                const signedTx = yield this._signTransaction(txParams);
                const res = { raw: signedTx, tx: txParams };
                if (cb) {
                  cb(null, res);
                }
                return res;
              } catch (err) {
                if (cb) {
                  cb(err);
                }
                throw err;
              }
            }),
            approvePersonalMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
              if (cb) {
                cb(null, true);
              }
              return true;
            }),
            signPersonalMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
              msgParams.personal = true;
              return walletSubprovider.signMessage(msgParams, cb);
            }),
            signTypedMessage: (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
              let currentTypedMsg = msgParams;
              try {
                currentTypedMsg = JSON.stringify(msgParams);
              } catch (err) {
              }
              clearTimeout(this.lastTypedMsgTimeout);
              if (this.lastTypedMsg === currentTypedMsg) {
                return this._throttledSignTypedMessage(msgParams, cb);
              }
              const isFirst = !this.lastTypedMsg;
              this.lastTypedMsg = currentTypedMsg;
              this.lastTypedMsgTimeout = setTimeout(() => {
                this.lastTypedMsg = "";
              }, throttleTimeout);
              if (isFirst) {
                return this._throttledSignTypedMessage(msgParams, cb);
              }
              return this._signTypedMessage(msgParams, cb);
            })
          });
          this.walletSubprovider = walletSubprovider;
          this._processTransaction = (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
            try {
              const signedTransaction = yield pify_1.default(walletSubprovider.signTransaction.bind(walletSubprovider))(txParams);
              const transactionHash = web3Utils.sha3(signedTransaction);
              if (cb) {
                cb(null, transactionHash);
              }
              return transactionHash;
            } catch (err) {
              if (cb) {
                cb(err);
                return;
              }
              throw err;
            }
          });
          this._throttledProcessSignTransaction = utils_1.throttle((txParams, cb) => __awaiter(this, void 0, void 0, function* () {
            return walletSubprovider.finalizeTx(txParams, cb);
          }), throttleTimeout);
          this._throttledProcessTransaction = utils_1.throttle((txParams, cb) => __awaiter(this, void 0, void 0, function* () {
            return this._processTransaction(txParams, cb);
          }), throttleTimeout);
          this._signMessage = (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
            try {
              const signature = yield this.authereum.signMessage(msgParams.data, {
                personal: msgParams.personal,
                includeAuthSignature: true
              });
              if (cb) {
                cb(null, signature);
              }
              return signature;
            } catch (err) {
              if (cb) {
                cb(err);
              }
            }
          });
          this._throttledSignMessage = utils_1.throttle((msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
            return this._signMessage(msgParams, cb);
          }), throttleTimeout);
          this._signTypedMessage = (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
            try {
              const signature = yield this.authereum.signMessage(msgParams.data, {
                includeAuthSignature: true
              });
              if (cb) {
                cb(null, signature);
              }
              return signature;
            } catch (err) {
              if (cb) {
                cb(err);
              }
            }
          });
          this._throttledSignTypedMessage = utils_1.throttle((msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
            return this._signTypedMessage(msgParams, cb);
          }), throttleTimeout);
          this._signTransaction = (txParams, cb) => __awaiter(this, void 0, void 0, function* () {
            try {
              const res = yield this.authereum.signTransaction(txParams);
              if (!res) {
                throw new Error("Error signing transaction");
              }
              if (cb) {
                cb(null, res.signedTransactionData);
              }
              return res.signedTransactionData;
            } catch (err) {
              cb(err);
            }
          });
          this._throttledSignTransaction = utils_1.throttle((txParams, cb) => __awaiter(this, void 0, void 0, function* () {
            return this._signTransaction(txParams, cb);
          }), throttleTimeout);
          this._sendAsync = this.sendAsync;
          this.sendAsync = (payload, callback) => __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
              if (!callback) {
                callback = (err, response) => {
                  if (err) {
                    reject(err);
                    return;
                  }
                  resolve(response);
                };
              }
              this._sendAsync(payload, callback);
            });
          });
          this.send = (payload, callback) => {
            if (typeof payload === "string") {
              return new Promise((resolve, reject) => {
                this.sendAsync({
                  jsonrpc: "2.0",
                  id: 1,
                  method: payload,
                  params: callback || []
                }, (error, response) => {
                  if (error) {
                    reject(error);
                  } else {
                    resolve(response.result);
                  }
                });
              });
            }
            if (callback) {
              this.sendAsync(payload, callback);
              return;
            }
            let result = null;
            switch (payload.method) {
              case "eth_uninstallFilter":
                this.sendAsync(payload, () => {
                });
                result = true;
                break;
              default:
                let message = `The Authereum Web3 object does not support synchronous methods like ${payload.method} without a callback parameter.`;
                throw new Error(message);
            }
            return {
              id: payload.id,
              jsonrpc: payload.jsonrpc,
              result
            };
          };
          walletSubprovider.handleRequest = (payload, next, end) => {
            const self2 = walletSubprovider;
            self2._parityRequests = {};
            self2._parityRequestCount = 0;
            let txParams;
            let msgParams;
            let extraParams;
            let message;
            let address;
            const method = payload.method;
            if (method && method.startsWith("stark_")) {
              this.authereum.getStarkProvider().send(method, payload.params).then((result) => end(null, result)).catch((err) => end(err));
              return;
            }
            switch (method) {
              case "eth_coinbase": {
                self2.getAccounts((err, accounts) => {
                  if (err)
                    return end(err);
                  let result = accounts[0] || null;
                  end(null, result);
                });
                return;
              }
              case "eth_accounts": {
                self2.getAccounts((err, accounts) => {
                  if (err)
                    return end(err);
                  end(null, accounts);
                });
                return;
              }
              case "eth_sendTransaction": {
                txParams = payload.params[0];
                waterfall_1.default([
                  (cb) => self2.processTransaction(txParams, cb)
                ], end);
                return;
              }
              case "eth_signTransaction": {
                txParams = payload.params[0];
                waterfall_1.default([
                  (cb) => self2.processSignTransaction(txParams, cb)
                ], end);
                return;
              }
              case "eth_sign": {
                address = payload.params[0];
                message = payload.params[1];
                extraParams = payload.params[2] || {};
                msgParams = xtend_1.default(extraParams, {
                  from: address,
                  data: message
                });
                waterfall_1.default([
                  (cb) => self2.processMessage(msgParams, cb)
                ], end);
                return;
              }
              case "personal_sign": {
                return (() => {
                  const first = payload.params[0];
                  const second = payload.params[1];
                  if (resemblesData(second) && resemblesAddress(first)) {
                    let warning = `The eth_personalSign method requires params ordered `;
                    warning += `[message, address]. This was previously handled incorrectly, `;
                    warning += `and has been corrected automatically. `;
                    warning += `Please switch this param order for smooth behavior in the future.`;
                    console.warn(warning);
                    address = payload.params[0];
                    message = payload.params[1];
                  } else {
                    message = payload.params[0];
                    address = payload.params[1];
                  }
                  extraParams = payload.params[2] || {};
                  msgParams = xtend_1.default(extraParams, {
                    from: address,
                    data: message
                  });
                  waterfall_1.default([
                    (cb) => self2.processPersonalMessage(msgParams, cb)
                  ], end);
                })();
              }
              case "eth_decryptMessage": {
                return (() => {
                  const first = payload.params[0];
                  const second = payload.params[1];
                  if (resemblesData(second) && resemblesAddress(first)) {
                    let warning = `The eth_decryptMessage method requires params ordered `;
                    warning += `[message, address]. This was previously handled incorrectly, `;
                    warning += `and has been corrected automatically. `;
                    warning += `Please switch this param order for smooth behavior in the future.`;
                    console.warn(warning);
                    address = payload.params[0];
                    message = payload.params[1];
                  } else {
                    message = payload.params[0];
                    address = payload.params[1];
                  }
                  extraParams = payload.params[2] || {};
                  msgParams = xtend_1.default(extraParams, {
                    from: address,
                    data: message
                  });
                  waterfall_1.default([
                    (cb) => self2.validateDecryptMessage(msgParams, cb),
                    (cb) => self2.processDecryptMessage(msgParams, cb)
                  ], end);
                })();
              }
              case "eth_getEncryptionKey": {
                this.authereum.getEncryptionPublicKey().then((result) => end(null, result)).catch((err) => end(err));
                return;
              }
              case "eth_decrypt": {
                const encryptedMessage = payload.params[0];
                this.authereum.decryptMessage().then((result) => end(null, result)).catch((err) => end(err));
                return;
              }
              case "encryption_public_key": {
                return (() => {
                  address = payload.params[0];
                  waterfall_1.default([
                    (cb) => self2.validateEncryptionPublicKey(address, cb),
                    (cb) => self2.processEncryptionPublicKey(address, cb)
                  ], end);
                })();
              }
              case "personal_ecRecover": {
                return (() => {
                  message = payload.params[0];
                  let signature = payload.params[1];
                  extraParams = payload.params[2] || {};
                  msgParams = xtend_1.default(extraParams, {
                    sig: signature,
                    data: message
                  });
                  self2.recoverPersonalSignature(msgParams, end);
                })();
              }
              case "eth_signTypedData": {
                message = payload.params[0];
                address = payload.params[1];
                extraParams = payload.params[2] || {};
                msgParams = xtend_1.default(extraParams, {
                  from: address,
                  data: message
                });
                waterfall_1.default([
                  (cb) => self2.processTypedMessage(msgParams, cb)
                ], end);
                return;
              }
              case "eth_signTypedData_v3": {
                address = payload.params[0];
                message = payload.params[1];
                extraParams = payload.params[2] || {};
                msgParams = xtend_1.default(extraParams, {
                  from: address,
                  data: message
                });
                waterfall_1.default([
                  (cb) => self2.processTypedMessage(msgParams, cb)
                ], end);
                return;
              }
              case "parity_postTransaction": {
                txParams = payload.params[0];
                self2.parityPostTransaction(txParams, end);
                return;
              }
              case "parity_postSign": {
                address = payload.params[0];
                message = payload.params[1];
                self2.parityPostSign(address, message, end);
                return;
              }
              case "parity_checkRequest": {
                return (() => {
                  const requestId = payload.params[0];
                  self2.parityCheckRequest(requestId, end);
                })();
              }
              case "parity_defaultAccount": {
                self2.getAccounts((err, accounts) => {
                  if (err)
                    return end(err);
                  const account = accounts[0] || null;
                  end(null, account);
                });
                return;
              }
              case "eth_requestAccounts": {
                self2.getAccounts((err, accounts) => {
                  if (err)
                    return end(err);
                  end(null, accounts);
                });
                return;
              }
              default: {
                next();
                return;
              }
            }
          };
          walletSubprovider.validatePersonalMessage = (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
            if (cb) {
              cb(null, true);
            }
            return true;
          });
          walletSubprovider.validateMessage = (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
            if (cb) {
              cb(null, true);
            }
            return true;
          });
          walletSubprovider.validateTypedMessage = (msgParams, cb) => __awaiter(this, void 0, void 0, function* () {
            if (cb) {
              cb(null, true);
            }
            return true;
          });
          this.addProvider(walletSubprovider);
          this.rpcSubProvider = new rpc_1.default({
            rpcUrl: this.rpcUri
          });
          this.addProvider(new subscriptions_1.default());
          this.addProvider(new filters_1.default());
          this.addProvider({
            setEngine: (_) => _,
            handleRequest: (payload, next, end) => __awaiter(this, void 0, void 0, function* () {
              this.rpcSubProvider.handleRequest(payload, next, end);
            })
          });
          this.on("error", (err) => {
            console.error(err.stack);
          });
          this.start();
          this._blockTracker.removeAllListeners();
        });
      }
      getAccounts(cb) {
        return __awaiter(this, void 0, void 0, function* () {
          const loggedIn = yield this.authereum.isAuthenticated();
          if (!loggedIn) {
            if (cb) {
              cb(null, []);
            }
            return [];
          }
          const accountAddress = yield this.authereum.getAccountAddress();
          if (!accountAddress) {
            if (cb) {
              cb(null, []);
            }
            return [];
          }
          if (cb) {
            cb(null, [accountAddress]);
          }
          return [accountAddress];
        });
      }
      isConnected() {
        return this.authereum.isAuthenticatedSync();
      }
      enable() {
        return __awaiter(this, void 0, void 0, function* () {
          yield this.authereum.login();
          const accountAddress = yield this.authereum.getAccountAddress();
          if (accountAddress) {
            return [accountAddress];
          }
          return [];
        });
      }
      disable() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.authereum.logout();
        });
      }
      tilDomReady() {
        return new Promise((resolve) => {
          if (document.readyState !== "loading") {
            resolve();
          } else {
            document.addEventListener("DOMContentLoaded", () => resolve());
          }
        });
      }
      sendTransaction(tx) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.sendTransactionBatch([tx]);
        });
      }
      sendTransactionBatch(txs) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.authereum.sendTransactionBatch(txs);
        });
      }
      estimateGasBatch(txs) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.authereum.estimateGasBatch(txs);
        });
      }
      sign(msgParams) {
        return this._signMessage(msgParams);
      }
      signMessageWithAdminKey(message) {
        return this.authereum.signMessageWithAdminKey(message);
      }
      signMessageWithSigningKey(...input) {
        return this.authereum.signMessageWithSigningKey(...input);
      }
      showWidget(enabled = true) {
        return this.authereum.showWidget(enabled);
      }
      widgetEnabled() {
        return this.authereum.widgetEnabled();
      }
      getTransactionReceipt(txHash) {
        return this.authereum.getTransactionReceipt(txHash);
      }
      waitForTransactionReceipt(txHash) {
        return this.authereum.waitForTransactionReceipt(txHash);
      }
      isContractDeployed(accountAddress) {
        return this.authereum.isContractDeployed(accountAddress);
      }
      getEncryptionPublicKey() {
        return this.authereum.getEncryptionPublicKey();
      }
      encryptMessage(message) {
        return this.authereum.encryptMessage(message);
      }
      decryptMessage(encryptedMessage) {
        return this.authereum.decryptMessage(encryptedMessage);
      }
    };
    exports.default = AuthereumProvider;
    function resemblesAddress(str) {
      const fixed = ethUtil.addHexPrefix(str);
      const isValid = ethUtil.isValidAddress(fixed);
      return isValid;
    }
    function resemblesData(str) {
      const fixed = ethUtil.addHexPrefix(str);
      const isValidAddress = ethUtil.isValidAddress(fixed);
      return !isValidAddress && isValidHex(str);
    }
    function isValidHex(data) {
      const isString = typeof data === "string";
      if (!isString)
        return false;
      const isHexPrefixed = data.slice(0, 2) === "0x";
      if (!isHexPrefixed)
        return false;
      const nonPrefixed = data.slice(2);
      const hexRegex = /^[0-9A-Fa-f]+$/g;
      const isValid = nonPrefixed.match(hexRegex);
      return isValid;
    }
  }
});

// node_modules/authereum/dist/StarkWareProvider.js
var require_StarkWareProvider = __commonJS({
  "node_modules/authereum/dist/StarkWareProvider.js"(exports) {
    init_define_process_env();
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var StarkWareProvider = class {
      constructor(authereum) {
        this.send = (method, params) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "providerRpc",
            params: {
              method,
              params
            }
          });
        });
        this.getStarkKey = () => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkAccount"
          });
        });
        this.getPublicKey = () => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkPublicKey"
          });
        });
        this.getEthAddress = () => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkEthAddress"
          });
        });
        this.signNonce = (nonce) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkSignNonce",
            params: {
              nonce
            }
          });
        });
        this.starkSignMessage = (message) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkSignMessage",
            params: {
              message
            }
          });
        });
        this.setContractAddress = (contractAddress) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkContractAddress",
            params: {
              contractAddress
            }
          });
        });
        this.getContractAddress = () => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkContractAddress"
          });
        });
        this.registerUser = (ethKey, operatorSignature) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkRegisterUser",
            params: {
              ethKey,
              operatorSignature
            }
          });
        });
        this.deposit = (input) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkDeposit",
            params: input
          });
        });
        this.depositEth = (vaultId, amount, quantum) => __awaiter(this, void 0, void 0, function* () {
          return this.deposit({
            vaultId,
            amount,
            assetStandard: "ETH",
            quantum
          });
        });
        this.depositErc20 = (vaultId, amount, quantum, token) => __awaiter(this, void 0, void 0, function* () {
          return this.deposit({
            vaultId,
            amount,
            assetStandard: "ERC20",
            quantum,
            assetContractAddress: token
          });
        });
        this.depositErc721 = (vaultId, tokenId, token) => __awaiter(this, void 0, void 0, function* () {
          return this.deposit({
            vaultId,
            amount: tokenId,
            assetStandard: "ERC721",
            assetContractAddress: token
          });
        });
        this.cancelDeposit = (vaultId, assetType) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkDepositCancel",
            params: {
              assetType,
              vaultId
            }
          });
        });
        this.cancelEthDeposit = (vaultId, quantum) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkDepositCancel",
            params: {
              vaultId,
              quantum,
              assetStandard: "ETH"
            }
          });
        });
        this.cancelErc20Deposit = (vaultId, quantum, token) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkDepositCancel",
            params: {
              vaultId,
              quantum,
              token,
              assetStandard: "ERC20"
            }
          });
        });
        this.cancelErc721Deposit = (vaultId, tokenId, token) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkDepositCancel",
            params: {
              vaultId,
              tokenId,
              token,
              assetStandard: "ERC721"
            }
          });
        });
        this.reclaimDeposit = (vaultId, assetType) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkDepositReclaim",
            params: {
              assetType,
              vaultId
            }
          });
        });
        this.reclaimEthDeposit = (vaultId, quantum) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkDepositReclaim",
            params: {
              vaultId,
              quantum,
              assetStandard: "ETH"
            }
          });
        });
        this.reclaimErc20Deposit = (vaultId, quantum, token) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkDepositReclaim",
            params: {
              vaultId,
              quantum,
              token,
              assetStandard: "ERC20"
            }
          });
        });
        this.reclaimErc721Deposit = (vaultId, tokenId, token) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkDepositReclaim",
            params: {
              vaultId,
              tokenId,
              token,
              assetStandard: "ERC721"
            }
          });
        });
        this.withdraw = (assetStandard, quantum = "1", assetContractAddress = null, recipient) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkWithdrawTo",
            params: {
              assetStandard,
              quantum,
              assetContractAddress,
              recipient
            }
          });
        });
        this.withdrawEth = (quantum, recipient) => __awaiter(this, void 0, void 0, function* () {
          return this.withdraw("ETH", quantum, null, recipient);
        });
        this.withdrawErc20 = (quantum, token, recipient) => __awaiter(this, void 0, void 0, function* () {
          return this.withdraw("ERC20", quantum, token, recipient);
        });
        this.withdrawErc721 = (tokenId, token, recipient) => __awaiter(this, void 0, void 0, function* () {
          return this.withdraw("ERC721", tokenId, token, recipient);
        });
        this.fullWithdrawalRequest = (vaultId) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkFullWithdrawalRequest",
            params: {
              vaultId
            }
          });
        });
        this.withdrawAndMint = (assetType, mintingBlob) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkWithdrawAndMint",
            params: {
              assetType,
              mintingBlob
            }
          });
        });
        this.freezeRequest = (vaultId) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkFreezeRequest",
            params: {
              vaultId
            }
          });
        });
        this.escape = (vaultId, assetType, quantizedAmount) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkEscape",
            params: {
              vaultId,
              assetType,
              quantizedAmount
            }
          });
        });
        this.transfer = (input) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkTransfer",
            params: input
          });
        });
        this.transferEth = (input) => __awaiter(this, void 0, void 0, function* () {
          input.assetStandard = "ETH";
          return this.authereum._postMessageToChild({
            method: "starkTransfer",
            params: input
          });
        });
        this.transferErc20 = (input) => __awaiter(this, void 0, void 0, function* () {
          input.assetStandard = "ERC20";
          return this.authereum._postMessageToChild({
            method: "starkTransfer",
            params: input
          });
        });
        this.transferErc721 = (input) => __awaiter(this, void 0, void 0, function* () {
          input.assetStandard = "ERC721";
          return this.authereum._postMessageToChild({
            method: "starkTransfer",
            params: input
          });
        });
        this.createOrder = (input) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkCreateOrder",
            params: input
          });
        });
        this.getAssetType = (input) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkAssetType",
            params: input
          });
        });
        this.getConditionHash = (...params) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "starkConditionHash",
            params
          });
        });
        this.signTransaction = (tx) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum.signTransaction(tx);
        });
        this.sendTransaction = (tx) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum.sendTransaction(tx);
        });
        this.signMessage = (msg, opts) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum.signMessage(msg, opts);
        });
        this.signPersonalMessage = (msg) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum.signPersonalMessage(msg);
        });
        this.getAccountAddress = () => __awaiter(this, void 0, void 0, function* () {
          return this.authereum.getAccountAddress();
        });
        this.estimateGas = (tx) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum.estimateGas(tx);
        });
        this.authereum = authereum;
      }
    };
    exports.default = StarkWareProvider;
  }
});

// node_modules/authereum/dist/ZkSyncProvider.js
var require_ZkSyncProvider = __commonJS({
  "node_modules/authereum/dist/ZkSyncProvider.js"(exports) {
    init_define_process_env();
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var ZkSyncProvider = class {
      constructor(authereum) {
        this.deposit = (params) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "zksyncDeposit",
            params
          });
        });
        this.withdraw = (params) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "zksyncWithdraw",
            params
          });
        });
        this.transfer = (params) => __awaiter(this, void 0, void 0, function* () {
          return this.authereum._postMessageToChild({
            method: "zksyncTransfer",
            params
          });
        });
        this.authereum = authereum;
      }
    };
    exports.default = ZkSyncProvider;
  }
});

// node_modules/authereum/dist/config.js
var require_config = __commonJS({
  "node_modules/authereum/dist/config.js"(exports) {
    init_define_process_env();
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tld = "authereum.com";
    exports.defaultConfig = {
      xsUri(network) {
        const s = network === "mainnet" ? "" : `${network}.`;
        return `https://${s}x.${tld}`;
      }
    };
  }
});

// node_modules/authereum/dist/AuthereumSDK.js
var require_AuthereumSDK = __commonJS({
  "node_modules/authereum/dist/AuthereumSDK.js"(exports) {
    init_define_process_env();
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var penpal_1 = __importDefault(require_lib());
    var eventemitter3_1 = __importDefault(require_eventemitter3());
    var is_buffer_1 = __importDefault(require_is_buffer());
    var version_1 = __importDefault(require_version());
    var AuthereumProvider_1 = __importDefault(require_AuthereumProvider());
    var StarkWareProvider_1 = __importDefault(require_StarkWareProvider());
    var ZkSyncProvider_1 = __importDefault(require_ZkSyncProvider());
    var config_1 = require_config();
    var utils_1 = require_utils3();
    var serializeMessageObj = (obj) => {
      const tx = {};
      for (let k in obj) {
        let v = obj[k];
        if (typeof v === "object" && v.toString === "function") {
          v = v.toString("hex");
        }
        tx[k] = v;
      }
      return tx;
    };
    var defaultIframeStyle = {
      width: 0,
      height: 0,
      top: 0,
      left: 0,
      zIndex: 1
    };
    var noop = () => {
    };
    var defaultNotifier = {
      notify: (type, message) => {
        console.debug(type, message);
        return {
          dismiss: noop
        };
      }
    };
    var constructIframe = (input) => {
      const { id, url, isPreload, disableGoogleAnalytics } = input;
      let parentUrl = window.location.href;
      try {
        parentUrl = parent.document.URL;
      } catch (err) {
      }
      const srcUrl = utils_1.updateQueryParams({
        url: parentUrl,
        isPreload,
        disableGoogleAnalytics
      }, url);
      const iframe = document.createElement("iframe");
      iframe.id = id;
      iframe.name = id.replace(/--.*/, "");
      iframe.title = id;
      iframe.src = srcUrl;
      if (["Safari", "Firefox"].includes(utils_1.browserInfo().browser)) {
        iframe.setAttribute("sandbox", "allow-storage-access-by-user-activation allow-scripts allow-same-origin");
      }
      iframe.style.position = "fixed";
      iframe.style.bottom = "0";
      iframe.style.right = "0";
      iframe.style.width = "0";
      iframe.style.height = "0";
      iframe.style.border = "0";
      iframe.style.background = "transparent";
      iframe.style.zIndex = `${defaultIframeStyle.zIndex}`;
      iframe.setAttribute("frameborder", "0");
      iframe.setAttribute("scrolling", "no");
      return iframe;
    };
    var onDomReady = () => {
      return new Promise((resolve) => {
        if (typeof window !== "undefined") {
          if (document.readyState !== "loading") {
            resolve();
          } else {
            document.addEventListener("DOMContentLoaded", () => resolve());
          }
        }
      });
    };
    var Authereum = class extends eventemitter3_1.default {
      constructor(config) {
        super();
        this._debug = !!utils_1.getQueryParamValue("debug");
        this._notifier = defaultNotifier;
        this._cacheReady = false;
        this._iframeReady = false;
        this._configReady = false;
        this._iframeConnecting = null;
        this._readyEmitted = false;
        this._widgetEnabled = false;
        this._iframeStyle = defaultIframeStyle;
        this._notificationIframeStyle = defaultIframeStyle;
        this._blockedPopupRedirect = true;
        this._forceRedirect = false;
        this._heartbeatStarted = false;
        this._backoffTimeout = 1;
        this._userConfig = null;
        this._asymmetricEncryptionKey = null;
        this._authereumQueryParams = {};
        this._injectedElements = [];
        this._notificationsMap = {};
        this._destroyed = false;
        this._starkProvider = null;
        this._zkSyncProvider = null;
        this._isPreload = false;
        this._disableGoogleAnalytics = false;
        this._eventListeners = [];
        this._init = (config2) => {
          this._initConfig(config2);
          this._iframeStyle = {
            width: 0,
            height: 0,
            top: 0,
            left: 0,
            zIndex: 0
          };
          this._provider = new AuthereumProvider_1.default(this);
          this._connectToChildIframe().catch(() => {
            this._startHeartbeat(true);
          }).catch((err) => {
            console.warn("ping error:", err.message);
          });
          this._setupCache().catch(noop);
          this._cacheAuthereumQueryParams();
          this._setupSigningKey().catch(noop);
          this._setupResizeListener();
          this._setupFocusListener();
          this._setupActionKeyListener();
          this._emitReadyEvent();
        };
        this._initConfig = (config2) => {
          if (typeof config2 === "string") {
            let network = config2;
            this._networkName = (network || "").trim().toLowerCase();
            if (["mainnet", "ropsten", "rinkeby", "kovan", "goerli"].includes(this._networkName)) {
              this._xsUri = config_1.defaultConfig.xsUri(this._networkName);
            } else if (config2 === "localhost") {
              this._xsUri = "http://localhost:3002";
              this._networkName = "kovan";
            } else {
              throw new Error("Unsupported network");
            }
          } else {
            config2 = config2 || {};
            this._networkName = config2.networkName || "mainnet";
            this._xsUri = config2.xsUri || config_1.defaultConfig.xsUri(this._networkName);
            this._apiKey = config2.apiKey;
          }
          if (config2.redirectUri) {
            this._redirectUri = config2.redirectUri;
          } else {
            this._redirectUri = window.location.href;
          }
          this._redirectUri = this._redirectUri || window.location.href;
        };
        this._setConfig = (config2) => {
          if (typeof this._userConfig === "string") {
            let network = this._userConfig;
            this._networkName = (network || "").trim().toLowerCase();
            this._userConfig = {
              networkName: this._networkName,
              xsUri: config_1.defaultConfig.xsUri(this._networkName)
            };
          }
          const { apiKey, apiUri, rpcUri, webUri, notifierUri, networkName, networkId, disableNotifications, blockedPopupRedirect, forceRedirect } = this._userConfig || {};
          if (apiKey) {
            this._apiKey = apiKey;
          }
          if (apiUri) {
            this._apiUri = apiUri;
          } else if (config2.apiUri) {
            this._apiUri = config2.apiUri;
          }
          if (rpcUri) {
            this._rpcUri = rpcUri;
          } else if (config2.rpcUri) {
            this._rpcUri = config2.rpcUri;
          }
          if (webUri) {
            this._webUri = webUri;
          } else if (config2.webUri) {
            this._webUri = config2.webUri;
          }
          if (notifierUri) {
            this._notifierUri = notifierUri;
          } else if (config2.notifierUri) {
            this._notifierUri = config2.notifierUri;
          }
          if (networkName) {
            this._networkName = networkName;
          } else if (config2.networkName) {
            this._networkName = config2.networkName;
          }
          if (networkId) {
            this._networkId = networkId;
          } else if (config2.networkId) {
            this._networkId = config2.networkId;
          }
          if (typeof disableNotifications === "boolean") {
            this._disableNotifications = disableNotifications;
          } else if (typeof config2.disableNotifications === "boolean") {
            this._disableNotifications = config2.disableNotifications;
          }
          if (typeof blockedPopupRedirect === "boolean") {
            this._blockedPopupRedirect = blockedPopupRedirect;
          } else if (typeof config2.blockedPopupRedirect === "boolean") {
            this._blockedPopupRedirect = config2.blockedPopupRedirect;
          }
          if (typeof forceRedirect === "boolean") {
            this._forceRedirect = forceRedirect;
          } else if (typeof config2.forceRedirect === "boolean") {
            this._forceRedirect = config2.forceRedirect;
          }
        };
        this._setupCache = () => __awaiter(this, void 0, void 0, function* () {
          yield Promise.all([
            this._cacheLoginKeyAddress(),
            this._cacheIsAuthenticated(),
            this._cacheAccountAddress()
          ]);
          this._cacheReady = true;
        });
        this._handleWindowFocus = () => {
          if (this._destroyed) {
            return;
          }
          if (!this._bodyContainsIframe()) {
            return;
          }
          return this._postMessageToChild({
            method: "onWindowFocus"
          });
        };
        this._resetCache = () => __awaiter(this, void 0, void 0, function* () {
          return this._setupCache();
        });
        this._injectScript = (sourceUrl, id = "") => __awaiter(this, void 0, void 0, function* () {
          yield this._tilDomReady();
          return new Promise((resolve, reject) => {
            if (!sourceUrl) {
              throw new Error("sourceUrl is required");
            }
            if (document.getElementById(id)) {
              resolve();
              return;
            }
            const script = document.createElement("script");
            script.id = id;
            script.type = "text/javascript";
            script.async = true;
            script.onload = () => {
              resolve();
            };
            script.onerror = (err) => {
              reject(err);
            };
            script.src = sourceUrl;
            this._injectedElements.push(script);
            document.getElementsByTagName("head")[0].appendChild(script);
          });
        });
        this._setupResizeListener = () => __awaiter(this, void 0, void 0, function* () {
          this.addEventListener("resize", this._handleResizeThrottled, false);
          this.addEventListener("resize", this._handleResizeDebounced, false);
        });
        this._handleActionKeyPress = (event) => {
          if (this._destroyed) {
            return;
          }
          if (!this._bodyContainsIframe()) {
            return;
          }
          let keyName = "";
          if (event.key === "Escape" || event.key === "Esc" || event.keyCode === 27) {
            keyName = "escape";
          } else if (event.key === "Enter" || event.keyCode === 13) {
            keyName = "enter";
          } else if (event.key === "ArrowLeft" || event.keyCode === 37) {
            keyName = "left";
          } else if (event.key === "ArrowUp" || event.keyCode === 38) {
            keyName = "up";
          } else if (event.key === "ArrowRight" || event.keyCode === 39) {
            keyName = "right";
          } else if (event.key === "ArrowDown" || event.keyCode === 40) {
            keyName = "down";
          }
          if (keyName) {
            return this._postMessageToChild({
              method: "actionKeyPress",
              params: keyName
            });
          }
        };
        this._handleResize = (event) => __awaiter(this, void 0, void 0, function* () {
          if (this._destroyed) {
            return;
          }
          if (!this._bodyContainsIframe()) {
            return;
          }
          const size = yield this._getWindowSize();
          return this._postMessageToChild({
            method: "onResize",
            params: size
          });
        });
        this._handleResizeThrottled = utils_1.throttle((event) => {
          return this._handleResize(event);
        }, 10);
        this._handleResizeDebounced = utils_1.debounce((event) => {
          return this._handleResize(event);
        }, 10);
        this._cacheLoginKeyAddress = () => __awaiter(this, void 0, void 0, function* () {
          const loginKey = yield this._postMessageToChild({
            method: "getOrCreateLoginKey"
          });
          this._cachedLoginKeyAddress = loginKey.publicAddress;
        });
        this._cacheAccountAddress = () => __awaiter(this, void 0, void 0, function* () {
          const accountAddress = yield this._postMessageToChild({
            method: "getAccountAddress"
          });
          this._cachedAccountAddress = accountAddress;
        });
        this._cacheIsAuthenticated = () => __awaiter(this, void 0, void 0, function* () {
          const isAuthenticated = yield this._postMessageToChild({
            method: "isAuthenticated"
          });
          this._cachedIsAuthenticated = isAuthenticated;
        });
        this.login = utils_1.throttle(() => __awaiter(this, void 0, void 0, function* () {
          const isIframeReady = this._iframeReady && this._cacheReady;
          const isConfigReady = this._configReady;
          if (!(isIframeReady && isConfigReady)) {
            yield this._tilConfigReady();
            yield this._tilReady();
          }
          if (!this._cachedIsAuthenticated) {
            yield this._signLoginKeyRequest(this._cachedLoginKeyAddress);
            return this.getAuthenticatedAccount();
          } else {
            if (!this._notificationsMap["loggedIn"]) {
              this._postMessageToChild({
                method: "notification",
                params: {
                  type: "success",
                  message: "You are logged into Authereum",
                  timeout: 5e3
                }
              }).catch(noop);
              this._notificationsMap["loggedIn"] = true;
              setTimeout(() => {
                this._notificationsMap["loggedIn"] = null;
              }, 5e3);
            }
          }
          const account = yield this.getAuthenticatedAccount();
          return account;
        }), 250);
        this.authenticate = () => __awaiter(this, void 0, void 0, function* () {
          console.warn("Deprecation notice: `authereum.authenticate()` is deprecated. Use `authereum.login()` instead.");
          return this.login();
        });
        this.isAuthenticated = () => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "isAuthenticated"
          }));
        });
        this.logout = () => __awaiter(this, void 0, void 0, function* () {
          const res = yield this._postMessageToChild({
            method: "logout"
          });
          yield this._resetCache();
          this.emit("logout", {});
          return res;
        });
        this.getAuthenticatedAccount = () => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "getAuthenticatedAccount"
          }));
        });
        this.getDappKey = () => {
          return this._handleError(this._postMessageToChild({
            method: "getLoginKey"
          }));
        };
        this.getLoginKey = () => {
          console.warn("Deprecation notice: `authereum.getLoginKey()` is deprecated. Use `authereum.getDappKey()` instead.");
          return this.getDappKey();
        };
        this.signMessage = utils_1.throttle((message, options = {}) => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "signMessage",
            params: [message, options]
          }));
        }), 250);
        this.signPersonalMessage = utils_1.throttle((message) => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "signMessage",
            params: [message, { personal: true }]
          }));
        }), 250);
        this.signWithDappKey = utils_1.throttle((message) => __awaiter(this, void 0, void 0, function* () {
          console.warn("Deprecation notice: `authereum.signWithDappKey()` is deprecated. Use `authereum.signMess()` instead.");
          return this.signMessage(message);
        }), 250);
        this.signWithLoginKey = utils_1.throttle((message) => __awaiter(this, void 0, void 0, function* () {
          console.warn("Deprecation notice: `authereum.signWithLoginKey()` is deprecated. Use `authereum.signWithDappKey()` instead.");
          return this.signWithDappKey(message);
        }), 250);
        this.signTypedMessage = utils_1.throttle((message, options = {}) => __awaiter(this, void 0, void 0, function* () {
          console.warn("Deprecation notice: `authereum.signTypedMessage()` is deprecated. Use `authereum.signMessage()` instead.");
          return this.signMessage(message, options);
        }), 250);
        this.signTypedMessageWithDappKey = utils_1.throttle((message) => __awaiter(this, void 0, void 0, function* () {
          console.warn("Deprecation notice: `authereum.signTypedMessageWithDappKey()` is deprecated. Use `authereum.signMessage()` instead.");
          return this.signTypedMessage(message);
        }), 250);
        this.signMessageWithAdminKey = utils_1.throttle((message) => __awaiter(this, void 0, void 0, function* () {
          console.warn("Deprecation notice: `authereum.signMessageWithAdminKey()` is deprecated. Use `authereum.signMessageWithSigningKey()` instead.");
          return null;
        }), 250);
        this.signMessageWithSigningKey = utils_1.throttle((message, options = {}) => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "signMessageWithSigningKey",
            params: [message, options]
          }));
        }), 250);
        this.getSigningKeyAddress = (message) => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "getSigningKeyAddress"
          }));
        });
        this.getLoginKeyAuthSignature = () => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "getLoginKeyAuthSignature"
          }));
        });
        this.getLoginKeyRestrictionsData = () => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "getLoginKeyRestrictionsData"
          }));
        });
        this.getSigningKeyAuthSignature = () => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "getSigningKeyAuthSignature"
          }));
        });
        this.getAccountAddress = () => __awaiter(this, void 0, void 0, function* () {
          yield this._tilReady();
          return this._handleError(this._postMessageToChild({
            method: "getAccountAddress"
          }));
        });
        this.getBalance = () => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "getBalance"
          }));
        });
        this.getRpcUri = () => __awaiter(this, void 0, void 0, function* () {
          yield this._tilConfigReady();
          return this._rpcUri;
        });
        this.getNetworkId = () => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "getNetworkId"
          }));
        });
        this.getNetworkName = () => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "getNetworkName"
          }));
        });
        this.getCachedNetworkName = () => {
          return this._networkName;
        };
        this.getProvider = () => {
          return this._provider;
        };
        this.getStarkProvider = () => {
          if (!this._starkProvider) {
            this._starkProvider = new StarkWareProvider_1.default(this);
          }
          return this._starkProvider;
        };
        this.getZkSyncProvider = () => {
          if (!this._zkSyncProvider) {
            this._zkSyncProvider = new ZkSyncProvider_1.default(this);
          }
          return this._zkSyncProvider;
        };
        this._handleError = (promise) => __awaiter(this, void 0, void 0, function* () {
          return promise.catch((err) => {
            this.emit("error", err);
            throw err;
          });
        });
        this.signTransaction = utils_1.throttle((tx) => __awaiter(this, void 0, void 0, function* () {
          yield this._tilReady();
          return this._handleError(this._postMessageToChild({
            method: "signTransaction",
            params: serializeMessageObj(tx)
          }));
        }), 250);
        this.signTransactionWithLoginKey = utils_1.throttle((tx) => __awaiter(this, void 0, void 0, function* () {
          console.warn("Deprecation notice: `authereum.signTransactionWithLoginKey()` is deprecated. Use `authereum.signTransaction()` instead.");
          return this.signTransaction(tx);
        }), 250);
        this.sendTransaction = utils_1.throttle((userTransaction) => __awaiter(this, void 0, void 0, function* () {
          yield this._tilReady();
          return this._handleError(this._postMessageToChild({
            method: "sendTransaction",
            params: serializeMessageObj(userTransaction)
          }));
        }), 250);
        this.sendTransactionBatch = utils_1.throttle((userTransactions) => __awaiter(this, void 0, void 0, function* () {
          yield this._tilReady();
          return this._handleError(this._postMessageToChild({
            method: "sendTransactionBatch",
            params: userTransactions.map(serializeMessageObj)
          }));
        }), 250);
        this.estimateGas = (userTransaction) => __awaiter(this, void 0, void 0, function* () {
          yield this._tilReady();
          return this._handleError(this._postMessageToChild({
            method: "estimateGasBatch",
            params: serializeMessageObj(userTransaction)
          }));
        });
        this.estimateGasBatch = (userTransactions) => __awaiter(this, void 0, void 0, function* () {
          yield this._tilReady();
          return this._handleError(this._postMessageToChild({
            method: "estimateGasBatch",
            params: userTransactions.map(serializeMessageObj)
          }));
        });
        this.isReady = () => {
          return this._iframeReady && this._cacheReady;
        };
        this.updateConfig = (config2) => {
          this._userConfig = config2;
          this._setConfig(config2);
        };
        this.getConfig = () => {
          return {
            apiUri: this._apiUri,
            rpcUri: this._rpcUri,
            webUri: this._webUri,
            xsUri: this._xsUri,
            networkName: this._networkName,
            networkId: this._networkId,
            disableNotifications: this._disableNotifications
          };
        };
        this.showWidget = (enabled = true) => __awaiter(this, void 0, void 0, function* () {
          if (!enabled) {
            this._widgetEnabled = false;
            return this._postMessageToChild({
              method: "hideWidget"
            });
          }
          this._widgetEnabled = true;
          return this._postMessageToChild({
            method: "showWidget"
          });
        });
        this.hideWidget = () => __awaiter(this, void 0, void 0, function* () {
          this._widgetEnabled = false;
          return this._postMessageToChild({
            method: "hideWidget"
          });
        });
        this.widgetEnabled = () => {
          return this._widgetEnabled;
        };
        this.addFunds = (opts) => {
          return this._postMessageToChild({
            method: "addFunds",
            params: opts
          });
        };
        this._openUrl = (opts = {}) => {
          const { url, newWindow } = opts;
          if (newWindow) {
            window.open(url, "_blank");
          } else {
            window.location.href = url;
          }
        };
        this._tilIframeReady = () => __awaiter(this, void 0, void 0, function* () {
          if (!this._iframeReady) {
            yield utils_1.wait(100);
            return this._tilIframeReady();
          }
          yield utils_1.wait(100);
          return true;
        });
        this._tilConfigReady = () => __awaiter(this, void 0, void 0, function* () {
          if (!this._configReady) {
            yield utils_1.wait(100);
            return this._tilConfigReady();
          }
          yield utils_1.wait(100);
          return true;
        });
        this._tilReady = () => __awaiter(this, void 0, void 0, function* () {
          if (!this.isReady()) {
            yield utils_1.wait(100);
            return this._tilReady();
          }
          yield utils_1.wait(100);
          return true;
        });
        this._emitReadyEvent = () => __awaiter(this, void 0, void 0, function* () {
          yield this._tilReady();
          if (this._readyEmitted)
            return;
          this._readyEmitted = true;
          this.emit("ready", {});
        });
        this._connectToChildIframe = () => __awaiter(this, void 0, void 0, function* () {
          if (this._iframeConnecting) {
            return this._iframeConnecting;
          }
          this._iframeReady = false;
          this._iframeConnecting = true;
          const iframe = yield this._getOrCreateMainIframe();
          this._iframeConnection = penpal_1.default.connectToChild({
            iframe,
            timeout: 6e4,
            methods: {
              postMessage: (data) => {
                return this._handlePostMessage(data);
              }
            }
          });
          this._iframeConnecting = new Promise((resolve, reject) => {
            let timedout = false;
            const timer = setTimeout(() => {
              if (!this._iframeReady) {
                timedout = true;
                this._iframeConnecting = null;
                reject(new Error("timedout"));
              }
            }, 6e3);
            this._iframeConnection.promise.then((child) => {
              clearTimeout(timer);
              if (timedout) {
                return;
              }
              this._iframeReady = true;
              this._childIframeConnection = child;
              this._startHeartbeat();
              this._iframeConnecting = null;
              resolve();
            }).catch((err) => {
              clearTimeout(timer);
              if (timedout) {
                return;
              }
              reject(err);
            });
          });
          return this._iframeConnecting;
        });
        this._startHeartbeat = (reconnect = false) => {
          if (!this._heartbeatStarted) {
            this._heartbeat(reconnect);
            this._heartbeatStarted = true;
          }
        };
        this._heartbeat = (reconnect = false) => __awaiter(this, void 0, void 0, function* () {
          if (this._destroyed) {
            return;
          }
          yield utils_1.wait(2e3);
          try {
            if (reconnect) {
              yield this._connectToChildIframe();
              this._backoffTimeout = 1;
              return this._heartbeat();
            }
            yield this._ping();
          } catch (err) {
            if (/destroy|timedout/gi.test(err.message)) {
              yield utils_1.wait(this._backoffTimeout * 1e3);
              this._backoffTimeout = this._backoffTimeout << 1;
              return this._heartbeat(true);
            }
          }
          return this._heartbeat();
        });
        this._ping = () => __awaiter(this, void 0, void 0, function* () {
          if (this._destroyed) {
            console.warn("Authereum instance destroyed. Message not posted to child.");
            return;
          }
          return new Promise((resolve, reject) => {
            let timedout = false;
            const timer = setTimeout(() => {
              timedout = true;
            }, 5e3);
            this._postMessageToChild({
              method: "ping"
            }).then((pong) => {
              clearTimeout(timer);
              if (timedout) {
                reject(new Error("timedout"));
                return;
              }
              if (pong !== "pong") {
                reject(new Error("Invalid response"));
                return;
              }
              resolve(pong);
            }).catch((err) => {
              reject(err);
            });
          });
        });
        this._constructIframe = (input) => {
          const iframe = constructIframe(Object.assign(Object.assign({}, input), { isPreload: this._isPreload, disableGoogleAnalytics: this._disableGoogleAnalytics }));
          if (this._debug) {
            iframe.style.outline = "1px solid red";
          }
          this._injectedElements.push(iframe);
          return iframe;
        };
        this._getConfigFromChild = () => __awaiter(this, void 0, void 0, function* () {
          return this._postMessageToChild({
            method: "getConfig"
          });
        });
        this._postVersionToChild = () => __awaiter(this, void 0, void 0, function* () {
          return this._postMessageToChild({
            method: "version",
            params: this.version()
          });
        });
        this._postConfigToChild = () => __awaiter(this, void 0, void 0, function* () {
          return this._postMessageToChild({
            method: "config",
            params: {
              apiKey: this._apiKey,
              disableNotifications: this._disableNotifications
            }
          });
        });
        this._loadAsymmetricEncryptionKeyFromChild = () => __awaiter(this, void 0, void 0, function* () {
          this._asymmetricEncryptionKey = yield this._postMessageToChild({
            method: "getAsymmetricEncryptionKey"
          });
        });
        this._postMessageToChild = (payload) => __awaiter(this, void 0, void 0, function* () {
          yield this._tilIframeReady();
          if (this._destroyed) {
            throw new Error("Authereum instance destroyed.");
          }
          if (!this._bodyContainsIframe()) {
            this._destroyed = true;
            this._teardownEventListeners();
            if (payload.method === "destroy") {
              return;
            }
            throw new Error("Authereum instance or iframe destroyed.");
          }
          return this._handleError(this._childIframeConnection.postMessage(payload));
        });
        this._handleChildLogoutEvent = () => __awaiter(this, void 0, void 0, function* () {
          yield this._resetCache();
          this.emit("logout", {});
        });
        this._handleChildDappKeyExpired = (loginKeyAddress) => __awaiter(this, void 0, void 0, function* () {
          if (loginKeyAddress === this._cachedLoginKeyAddress) {
            yield this._resetCache();
            this.emit("dappKeyExpired", loginKeyAddress);
            this.emit("logout");
          }
        });
        this._handlePostMessage = (data) => {
          try {
            const { method, params } = data;
            switch (method) {
              case "onError":
                const err = params;
                this.emit("error", err);
                this._notifier.notify({
                  type: "error",
                  message: err.message
                });
                return;
              case "onLogout":
                return this._handleChildLogoutEvent();
              case "onDappKeyExpired":
                return this._handleChildDappKeyExpired(params);
              case "login":
                return this.login();
              case "setWidgetPosition":
                return;
              case "setWidgetSize": {
                const size = params;
                const { width, height } = size;
                this._iframeStyle.width = width;
                this._iframeStyle.height = height;
                return this._refreshWidget();
              }
              case "setWidgetStyle": {
                const style = params;
                for (let key in style) {
                  this._iframeStyle[key] = style[key];
                }
                return this._refreshWidget();
              }
              case "setNotificationWidgetSize": {
                const size = params;
                const { width, height } = size;
                this._notificationIframeStyle.width = width;
                this._notificationIframeStyle.height = height;
                return this._refreshNotificationWidget();
              }
              case "setNotificationWidgetStyle": {
                const style = params;
                for (let key in style) {
                  this._notificationIframeStyle[key] = style[key];
                }
                return this._refreshNotificationWidget();
              }
              case "getWindowSize":
                return this._getWindowSize();
              case "hideWidget":
                return this.hideWidget();
              case "log":
                return this._handlePostMessageLog(params);
              case "openUrl":
                return this._openUrl(params);
              default:
                break;
            }
          } catch (err) {
          }
        };
        this._handlePostMessageLog = (data) => {
          if (this._isPreload) {
            return;
          }
          let { type, message } = data;
          if (!type) {
            type = "log";
          }
          console[type](message);
        };
        this._getWindowSize = () => {
          return {
            width: this._getWindowWidth(),
            height: this._getWindowHeight()
          };
        };
        this._getWindowWidth = () => {
          return window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
        };
        this._getWindowHeight = () => {
          return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
        };
        this._setIframePositionLeft = (x) => {
          if (!this._iframe)
            return;
          this._iframe.style.left = `${x}px`;
        };
        this._setIframeWidth = (width) => {
          if (!this._iframe)
            return;
          this._iframe.style.width = `${width}px`;
        };
        this._setIframeHeight = (height) => {
          if (!this._iframe)
            return;
          this._iframe.style.height = `${height}px`;
        };
        this._refreshWidget = () => {
          const { top, left, width, height, zIndex } = this._iframeStyle;
          if (this._isPreload)
            return;
          if (!this._iframe)
            return;
          this._setIframeWidth(width);
          this._setIframeHeight(height);
          this._iframe.style.zIndex = `${zIndex || 0}`;
        };
        this._refreshNotificationWidget = () => {
          const { top, left, width, height, zIndex } = this._notificationIframeStyle;
          if (this._isPreload)
            return;
          this._notificationIframe.style.width = `${width}px`;
          this._notificationIframe.style.height = `${height}px`;
          this._notificationIframe.style.zIndex = `${zIndex || 0}`;
        };
        this._loginKeyExists = () => __awaiter(this, void 0, void 0, function* () {
          return !!(yield this.getLoginKey());
        });
        this._accountAddressExists = () => __awaiter(this, void 0, void 0, function* () {
          return !!(yield this.getAccountAddress());
        });
        this._getAccountAdminKeyNonce = () => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "getAccountAuthKeyNonce"
          }));
        });
        this._getAccountAuthKeyNonce = () => __awaiter(this, void 0, void 0, function* () {
          console.warn("Deprecation notice: `authereum._getAccountAuthKeyNonce()` is deprecated. Use `authereum._getAccountAdminKeyNonce()` instead.");
          return this._getAccountAdminKeyNonce();
        });
        this._executeLoginKeyMetaTx = (tx) => __awaiter(this, void 0, void 0, function* () {
          return this._handleError(this._postMessageToChild({
            method: "executeLoginKeyMetaTx",
            params: serializeMessageObj(tx)
          }));
        });
        this._loadLoginKey = (loginKey) => __awaiter(this, void 0, void 0, function* () {
          yield this._tilReady();
          return this._handleError(this._postMessageToChild({
            method: "loadLoginKey",
            params: loginKey
          }));
        });
        this._getAuthenticateUri = (loginKeyAddress) => {
          const encryptionKey = this._asymmetricEncryptionKey;
          const date = new Date();
          date.setDate(date.getDate() + 30);
          const expiresAt = date.getTime() / 1e3 | 0;
          return this._webUri + "/?slk=" + encodeURIComponent(JSON.stringify({
            loginKey: {
              publicAddress: loginKeyAddress,
              expiresAt
            },
            encryptionKey
          })) + "&redirect_uri=" + this._redirectUri;
        };
        this._getSignWithAdminKeyUri = (message) => {
          if (is_buffer_1.default(message)) {
            message = `0x${message.toString("hex")}`;
          }
          return this._webUri + "/?sm=" + encodeURIComponent(JSON.stringify({
            message
          })) + "&redirect_uri=" + this._redirectUri;
        };
        this._openPopupOrRedirect = (url) => __awaiter(this, void 0, void 0, function* () {
          this.emit("openPopup", {});
          if (this._forceRedirect) {
            window.location.href = url;
            return;
          }
          let child = this._getAuthereumPopupWindow(url);
          let isBlocked = this._isAuthereumPopupBlocked(child);
          if (isBlocked && !this._blockedPopupRedirect) {
            const err = new Error("Disable popup blocker and try again");
            this._notifier.notify({
              type: "error",
              message: err.message,
              timeout: 5e3
            });
            throw err;
          } else if (isBlocked) {
            this.emit("popupBlocked");
            const shouldShowPopupOrRedirect = yield this._showConfirmPopupOrRedirectModal();
            if (!shouldShowPopupOrRedirect) {
              const errMessage = "Popup or redirect rejected";
              this.emit("error", errMessage);
              throw new Error(errMessage);
            }
            child = this._getAuthereumPopupWindow(url);
            isBlocked = this._isAuthereumPopupBlocked(child);
            if (isBlocked) {
              window.location.href = url;
              return;
            }
          }
          child.focus();
          return new Promise((resolve, reject) => {
            const interval = setInterval(() => __awaiter(this, void 0, void 0, function* () {
              if (child.closed) {
                cleanUp();
                const err = new Error("Window closed");
                this.emit("error", err);
                this.emit("closePopup", {});
                reject(err);
              }
            }), 250);
            const timeout = setTimeout(() => {
              cleanUp();
              child.close();
              doneWithError(new Error("Timedout"));
            }, 10 * 60 * 1e3);
            const cleanUp = () => {
              clearInterval(interval);
              clearTimeout(timeout);
              this.emit("closePopup", {});
            };
            const doneWithError = (err) => {
              cleanUp();
              this.emit("error", err);
              reject(err);
            };
            const done = (result = {}) => {
              cleanUp();
              resolve(result);
            };
            const handleParentMessageEvent = (event) => __awaiter(this, void 0, void 0, function* () {
              if (event.origin.includes(this._webUri)) {
                if (event.data.close) {
                  child.close();
                  done();
                }
                if (event.data.login) {
                  done({ success: true });
                  this.emit("login", {});
                  this._cachedIsAuthenticated = true;
                  if (event.data.encryptedSigningKey) {
                    yield this._loadSigningKey(event.data.encryptedSigningKey);
                  }
                  this._logAnalyticsEvent({
                    eventType: "logged_in_dapp",
                    properties: {
                      dapp_url: window.location.href
                    }
                  });
                  if (this._redirectUri !== window.location.href) {
                    window.location.href = this._redirectUri;
                  }
                }
                if (event.data.result) {
                  done(event.data.result);
                  if (this._redirectUri !== window.location.href) {
                    window.location.href = this._redirectUri;
                  }
                }
                if (event.data.error) {
                  doneWithError(new Error(event.data.error));
                  if (this._redirectUri !== window.location.href) {
                    window.location.href = this._redirectUri;
                  }
                }
              }
            });
            this.addEventListener("message", handleParentMessageEvent, false);
          });
        });
        this.addEventListener = (type, listener, useCapture = false) => {
          window.addEventListener(type, listener, useCapture);
          this._eventListeners.push({ type, listener, useCapture });
        };
        this._showConfirmPopupOrRedirectModal = () => {
          return this._handleError(this._postMessageToChild({
            method: "showConfirmPopupOrRedirectModal"
          }));
        };
        this._signLoginKeyRequest = (publicAddress) => __awaiter(this, void 0, void 0, function* () {
          const url = this._getAuthenticateUri(publicAddress);
          return this._openPopupOrRedirect(url);
        });
        this._tilDomReady = () => __awaiter(this, void 0, void 0, function* () {
          return onDomReady();
        });
        this.version = () => {
          return version_1.default;
        };
        this.isAuthenticatedSync = () => {
          return this._cachedIsAuthenticated;
        };
        this.getTransactionReceipt = (txHash) => {
          return this._handleError(this._postMessageToChild({
            method: "getTransactionReceipt",
            params: txHash
          }));
        };
        this.waitForTransactionReceipt = (txHash) => {
          return this._handleError(this._postMessageToChild({
            method: "waitForTransactionReceipt",
            params: txHash
          }));
        };
        this.hasRecoveryEnabled = () => {
          return this._handleError(this._postMessageToChild({
            method: "hasRecoveryEnabled"
          }));
        };
        this.getEncryptionPublicKey = () => {
          return this._handleError(this._postMessageToChild({
            method: "getEncryptionPublicKey"
          }));
        };
        this.encryptMessage = (message) => {
          return this._handleError(this._postMessageToChild({
            method: "encryptMessage",
            params: message
          }));
        };
        this.decryptMessage = (encryptedMessage) => {
          return this._handleError(this._postMessageToChild({
            method: "decryptMessage",
            params: encryptedMessage
          }));
        };
        this.isContractDeployed = (accountAddress) => {
          return this._handleError(this._postMessageToChild({
            method: "isContractDeployed",
            params: accountAddress
          }));
        };
        this._loadSigningKey = (signingKey) => __awaiter(this, void 0, void 0, function* () {
          if (this._destroyed) {
            console.warn("Authereum instance destroyed. Message not posted to child.");
            return;
          }
          return this._postMessageToChild({
            method: "loadSigningKey",
            params: signingKey
          });
        });
        this._logAnalyticsEvent = (input) => __awaiter(this, void 0, void 0, function* () {
          if (this._destroyed) {
            console.warn("Authereum instance destroyed. Message not posted to child.");
            return;
          }
          return this._postMessageToChild({
            method: "logAnalyticsEvent",
            params: input
          });
        });
        this._setupSigningKey = () => __awaiter(this, void 0, void 0, function* () {
          yield this._tilReady();
          const encryptedSigningKey = this._authereumQueryParams["encryptedSigningKey"];
          if (encryptedSigningKey) {
            const success = yield this._loadSigningKey(encryptedSigningKey);
            if (success) {
              try {
                localStorage.removeItem("_authereum");
              } catch (err) {
              }
            }
          }
        });
        this._cacheAuthereumQueryParams = () => __awaiter(this, void 0, void 0, function* () {
          try {
            const param = utils_1.getQueryParamValue("_authereum");
            if (param) {
              this._authereumQueryParams = JSON.parse(param);
              try {
                localStorage.setItem("_authereum", btoa(JSON.stringify(this._authereumQueryParams)));
              } catch (err) {
              }
              const newUrl = utils_1.removeQueryParam("_authereum");
              utils_1.replaceWindowUrl(newUrl);
            } else {
              try {
                let cached = localStorage.getItem("_authereum");
                if (cached) {
                  this._authereumQueryParams = JSON.parse(atob(cached));
                }
              } catch (err) {
              }
            }
          } catch (err) {
          }
        });
        this.destroy = () => __awaiter(this, void 0, void 0, function* () {
          if (this._destroyed) {
            console.warn("Authereum instance already destroyed.");
            return true;
          }
          try {
            if (this._iframeReady && this._bodyContainsIframe()) {
              yield this._postMessageToChild({
                method: "destroy"
              });
            }
          } catch (err) {
            console.warn(err);
          }
          for (let i = 0; i < this._injectedElements.length; i++) {
            const element = this._injectedElements[i];
            try {
              element.remove();
            } catch (err) {
              console.error(err);
            }
          }
          this._iframeReady = false;
          this._destroyed = true;
          console.warn("Authereum instance destroyed.");
          this._teardownEventListeners();
          this.emit("destroy", {});
          return true;
        });
        this.isDestroyed = () => {
          return this._destroyed;
        };
        this.getAddressQrCodeDataUri = (address) => __awaiter(this, void 0, void 0, function* () {
          return this._postMessageToChild({
            method: "getAddressQrCodeDataUri",
            params: {
              address
            }
          });
        });
        this._loadNotificationsIframe = (url) => __awaiter(this, void 0, void 0, function* () {
          const id = "authereum__x-notification-iframe";
          let el = document.getElementById(id);
          if (el && el.src === url) {
            this._notificationIframe = el;
          } else {
            if (el) {
              el.remove();
            }
            this._notificationIframe = this._constructIframe({ id, url });
            this._notificationIframe.style.top = "0";
            this._notificationIframe.style.right = "0";
            yield this._tilDomReady();
            el = document.getElementById(id);
            if (el) {
              el.remove();
            }
            document.body.appendChild(this._notificationIframe);
          }
        });
        this._setDebug = (enabled) => __awaiter(this, void 0, void 0, function* () {
          this._debug = enabled;
          if (this._debug) {
            this._iframe.style.outline = "1px solid red";
            this._notificationIframe.style.outline = "1px solid red";
          } else {
            this._iframe.style.outline = "0";
            this._notificationIframe.style.outline = "0";
          }
        });
        this._userConfig = config;
        if (config instanceof Object) {
          this._isPreload = !!config.isPreload;
          this._disableGoogleAnalytics = !!config.disableGoogleAnalytics;
        }
        const merged = this._checkCachedInstance(config);
        if (merged) {
          return merged;
        }
        this._init(config);
        if (window._authereumInstances) {
          window._authereumInstances.push(this);
        }
      }
      _checkCachedInstance(config) {
        let cachedInstance = null;
        if (Array.isArray(window._authereumInstances)) {
          if (window._authereumInstances.length) {
            cachedInstance = window._authereumInstances.pop();
          }
        }
        if (cachedInstance) {
          if (cachedInstance.isReady()) {
            if (typeof config === "string") {
              if (cachedInstance.getCachedNetworkName() === config) {
                return this._merge(cachedInstance);
              } else {
                cachedInstance.destroy();
                cachedInstance = null;
              }
            } else if (config instanceof Object) {
              if (cachedInstance.getCachedNetworkName() === config.networkName && !config.xsUri) {
                return this._merge(cachedInstance);
              } else {
                cachedInstance.destroy();
                cachedInstance = null;
              }
            }
          } else {
            cachedInstance.destroy();
            cachedInstance = null;
          }
        }
      }
      _merge(instance) {
        this._debug = instance._debug;
        this._apiKey = instance._apiKey;
        this._apiUri = instance._apiUri;
        this._rpcUri = instance._rpcUri;
        this._webUri = instance._webUri;
        this._xsUri = instance._xsUri;
        this._notifierUri = instance._notifierUri;
        this._networkName = instance._networkName;
        this._networkId = instance._networkId;
        this._redirectUri = instance._redirectUri;
        this._iframeConnection = instance._iframeConnection;
        this._childIframeConnection = instance._childIframeConnection;
        this._iframe = instance._iframe;
        this._notificationIframe = instance._notificationIframe;
        this._cacheReady = instance._cacheReady;
        this._cachedLoginKeyAddress = instance._cachedLoginKeyAddress;
        this._cachedAccountAddress = instance._cachedAccountAddress;
        this._cachedIsAuthenticated = instance._cachedIsAuthenticated;
        this._iframeReady = instance._iframeReady;
        this._configReady = instance._configReady;
        this._iframeStyle = instance._iframeStyle;
        this._notificationIframeStyle = instance._notificationIframeStyle;
        this._heartbeatStarted = instance._heartbeatStarted;
        this._backoffTimeout = instance._backoffTimeout;
        this._asymmetricEncryptionKey = instance._asymmetricEncryptionKey;
        this._authereumQueryParams = instance._authereumQueryParams;
        this._injectedElements = instance._injectedElements;
        this._notificationsMap = instance._notificationsMap;
        instance._handlePostMessage = this._handlePostMessage.bind(instance);
        this._initConfig(this._userConfig);
        this._cacheLoginKeyAddress();
        this._getConfigFromChild().then((config) => {
          this._setConfig(config);
          this._postConfigToChild().catch(noop);
          this.emit("iframeReady", {});
        }).catch(noop);
        this._emitReadyEvent();
        this._provider = new AuthereumProvider_1.default(this);
        this._refreshWidget();
        return this;
      }
      _setupFocusListener() {
        this.addEventListener("focus", this._handleWindowFocus, false);
      }
      _setupActionKeyListener() {
        this.addEventListener("keydown", this._handleActionKeyPress, false);
      }
      _teardownEventListeners() {
        for (let i = 0; i < this._eventListeners.length; i++) {
          const { type, listener, useCapture } = this._eventListeners[i];
          window.removeEventListener(type, listener, useCapture);
        }
      }
      _getOrCreateMainIframe() {
        return __awaiter(this, void 0, void 0, function* () {
          if (this._iframe) {
            if (this._iframeConnection) {
              this._iframeConnection.destroy();
            }
            this._iframe.remove();
          }
          return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            const id = "authereum__x-iframe";
            let el = document.getElementById(id);
            if (el && el.src === this._xsUri) {
              this._iframe = el;
            } else {
              this._iframe = this._constructIframe({ id, url: this._xsUri });
              let notificationIframeUrl = `${this._xsUri.replace(/\/$/, "")}/notifications`;
              this._loadNotificationsIframe(notificationIframeUrl).catch(noop);
              resolve(this._iframe);
              yield this._tilDomReady();
              el = document.getElementById(id);
              if (el) {
                el.remove();
              }
              document.body.appendChild(this._iframe);
              this._iframe.onload = () => {
                this._postVersionToChild().catch(noop);
                this._loadAsymmetricEncryptionKeyFromChild().catch(noop);
                this._getConfigFromChild().then((config) => {
                  if (notificationIframeUrl !== config.notifierIframeUri) {
                    this._loadNotificationsIframe(config.notifierIframeUri);
                  }
                  this._setConfig(config);
                  this._postConfigToChild().catch(noop);
                  this._configReady = true;
                  this.emit("iframeReady", {});
                }).catch(noop);
              };
            }
          }));
        });
      }
      _bodyContainsIframe() {
        return document.body.contains(this._iframe);
      }
      _getAuthereumPopupWindow(url) {
        return window.open(url, "Authereum", `toolbar=no,
      location=no,
      status=no,
      menubar=no,
      scrollbars=no,
      resizable=no,
      width=470,
      height=640`);
      }
      _isAuthereumPopupBlocked(child) {
        return child === null || child === void 0;
      }
      isPreload() {
        return this._isPreload;
      }
    };
    exports.default = Authereum;
    Authereum.version = () => {
      return version_1.default;
    };
    if (typeof window !== "undefined") {
      window.Authereum = Authereum;
      window._authereumInstances = [];
      if (utils_1.getQueryParamValue("authereum_debug")) {
        let cachedNetwork = "mainnet";
        const networks = ["kovan", "goerli", "rinkeby", "ropsten"];
        for (let i = 0; i < networks.length; i++) {
          if (window.location.href.includes(networks[i])) {
            cachedNetwork = networks[i];
            break;
          }
        }
        const cachedInstance = new Authereum({
          networkName: cachedNetwork,
          isPreload: true
        });
        window._authereumInstances.push(cachedInstance);
      }
    }
  }
});

// node_modules/authereum/dist/AuthereumSigner.js
var require_AuthereumSigner = __commonJS({
  "node_modules/authereum/dist/AuthereumSigner.js"(exports) {
    init_define_process_env();
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AuthereumSDK_1 = __importDefault(require_AuthereumSDK());
    var ethers = require_ethers_min();
    var AuthereumSigner = class extends ethers["Signer"] {
      constructor(config) {
        super();
        this.config = config || {};
        this.authereum = new AuthereumSDK_1.default(this.config);
        this.provider = this.authereum.getProvider();
      }
      getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
          return this.authereum.getAccountAddress();
        });
      }
      signMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.provider.sign(message);
        });
      }
      sign(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.provider.sign(transaction);
        });
      }
      sendTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.provider.sendTransaction(transaction);
        });
      }
      sendTransactionBatch(transactions) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.provider.sendTransactionBatch(transactions);
        });
      }
      estimateGasBatch(transactions) {
        return __awaiter(this, void 0, void 0, function* () {
          return this.provider.estimateGasBatch(transactions);
        });
      }
    };
    exports.default = AuthereumSigner;
  }
});

// node_modules/authereum/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/authereum/dist/index.js"(exports) {
    init_define_process_env();
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var AuthereumSDK_1 = __importDefault(require_AuthereumSDK());
    exports.Authereum = AuthereumSDK_1.default;
    var AuthereumProvider_1 = __importDefault(require_AuthereumProvider());
    exports.AuthereumProvider = AuthereumProvider_1.default;
    var AuthereumSigner_1 = __importDefault(require_AuthereumSigner());
    exports.AuthereumSigner = AuthereumSigner_1.default;
    var version_1 = __importDefault(require_version());
    exports.version = version_1.default;
    exports.default = AuthereumSDK_1.default;
  }
});

// dep:authereum
init_define_process_env();
var authereum_default = require_dist3();
export {
  authereum_default as default
};
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/*! https://mths.be/utf8js v3.0.0 by @mathias */
//# sourceMappingURL=authereum.js.map
