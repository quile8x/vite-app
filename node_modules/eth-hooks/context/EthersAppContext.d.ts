import { AbstractConnector } from '@web3-react/abstract-connector';
import { Web3ReactContextInterface } from '@web3-react/core/dist/types';
import { Signer } from 'ethers';
import { FC } from 'react';
import { TEthersModalConnector } from "./connectors/EthersModalConnector";
import { TEthersProvider } from "../models";
/**
 * #### Summary
 * A callback type that returns a EthersModalConnector
 *
 * #### Notes
 * - can be used by components that need to give a connector to {@link IEthersContext.openModal}
 *
 * @category EthersContext
 */
export declare type CreateEthersModalConnector = () => TEthersModalConnector | undefined;
/**
 * #### Summary
 * The return type of {@link EthersModalConnector}
 * - ethers compatable provider {@link TEthersProvider}
 * - a callback to change the current signer
 * - the current account, chainId and signer
 * - callbacks to open the web3Modal, logout or change theme
 *
 * @category EthersContext
 */
export interface IEthersContext extends Web3ReactContextInterface<TEthersProvider> {
    connector: TEthersModalConnector | undefined;
    ethersProvider: TEthersProvider | undefined;
    active: boolean;
    signer: Signer | undefined;
    account: string | undefined;
    chainId: number | undefined;
    changeSigner: ((signer: Signer) => Promise<void>) | undefined;
    openModal: (ethersModalConnector: TEthersModalConnector) => void;
    disconnectModal: () => void;
    setModalTheme: ((theme: 'light' | 'dark') => void) | undefined;
}
/**
 * A wrapper around useWeb3React that provides functionality for web3modal
 * and eth-hooks compatability
 * @param providerKey (string) :: (optional) :: used if you want a secondary provider context, for example to mainnet
 * @returns (IEthersWeb3Context)
 */
/**
 * #### Summary
 * This Hook provides you with access to the current Ethers Provider Context.
 * This provider would be the one selected by using {@link EthersModalConnect} and Web3Modal
 *
 * #### Features
 * Gives you access to consistent interface to get the current provider information {@link EthersModalConnector}
 * - ethers compatable provider {@link TEthersProvider}
 * - a callback to change the current account (signer)
 * - the current account, chainId and signer
 * - callbacks to open the web3Modal, logout or change theme
 *
 * #### Notes
 * - currently providerKey isnt being used
 *
 * @category EthersContext
 *
 * @param providerKey
 * @returns
 */
export declare const useEthersContext: (providerKey?: string | undefined) => IEthersContext;
/**
 * Convert the provider obtained from web3Modal into a ethers.web3provider
 *
 * @internal
 *
 * @param provider
 * @param _connector
 * @returns
 */
export declare const getEthersAppProviderLibrary: (provider: any, connector: AbstractConnector | undefined) => TEthersProvider;
/**
 * #### Summary
 * Ethers App Context for your react app to be used with {@link useEthersContext}.
 * This is a wrapper around Web3ReactProvider that provides additional functionality such as a {@link BlockNumberContext} and access to {@link IEthersContext}
 *
 * @category EthersContext
 *
 * @param props
 * @returns
 */
export declare const EthersAppContext: FC;
//# sourceMappingURL=EthersAppContext.d.ts.map