import{isEthersProvider}from"./chunk-7TNBWNRY.js";import{React,__objRest,__spreadProps,__spreadValues}from"./chunk-EHDKCTCW.js";import{createContext,useContext,useEffect,useReducer}from"react";import{useIsMounted}from"usehooks-ts";var BlockNumberReactContext=createContext(void 0),reducer=(state={},payload)=>{let current=state[payload.chainId];return!current||payload.blockNumber>current?__spreadProps(__spreadValues({},state),{[payload.chainId]:payload.blockNumber}):state},useBlockNumberContext=()=>{let blockNumber=useContext(BlockNumberReactContext);return blockNumber==null&&console.log("blockNumber context is null"),blockNumber!=null?blockNumber:0},BlockNumberContext=props=>{let{ethersProvider,chainId}=useEthersContext(props.providerKey),isMounted=useIsMounted(),[state,dispatch]=useReducer(reducer,{}),blockNumber=chainId&&(state==null?void 0:state[chainId])?state==null?void 0:state[chainId]:0;return useEffect(()=>{var _a;if(chainId&&ethersProvider){let update=blockNumber2=>{isMounted()&&dispatch({chainId,blockNumber:blockNumber2})};return(_a=ethersProvider==null?void 0:ethersProvider.addListener)==null||_a.call(ethersProvider,"block",update),(state==null?void 0:state[chainId])==null&&(ethersProvider==null||ethersProvider.getBlockNumber().then(val=>{isMounted()&&dispatch({chainId,blockNumber:val})})),()=>{var _a2;(_a2=ethersProvider==null?void 0:ethersProvider.removeListener)==null||_a2.call(ethersProvider,"block",update)}}},[chainId,ethersProvider,isMounted]),React.createElement(BlockNumberReactContext.Provider,{value:blockNumber},props.children," ")};import{Web3Provider as Web3Provider2}from"@ethersproject/providers";import{AbstractConnector as AbstractConnector2}from"@web3-react/abstract-connector";import{useWeb3React,Web3ReactProvider}from"@web3-react/core";import{useCallback}from"react";import{Web3Provider}from"@ethersproject/providers";import{AbstractConnector}from"@web3-react/abstract-connector";import{BigNumber,utils}from"ethers";import Core from"web3modal";var UserClosedModalError=class extends Error{constructor(){super();this.name=this.constructor.name,this.message="EthersModalConnector: The user closed the modal with selecting a provider."}},CouldNotActivateError=class extends Error{constructor(error){super();this.name=this.constructor.name,this.message=`EthersModalConnector: Could not activate provider.  ${error!=null?error:""}`}},NoEthereumProviderFoundError=class extends Error{constructor(){super();this.name=this.constructor.name,this.message="EthersModalConnector: No ethereum provider Found."}};var const_web3DialogClosedByUser="Modal closed by user";var EthersModalConnector=class extends AbstractConnector{constructor(web3modalOptions,config={reloadOnNetworkChange:!1,immutableProvider:!1},id,debug=!1){super();this._debug=!1;var _a;this._options=web3modalOptions,this._id=id,this._debug=debug,this._config=config,this._theme=(_a=web3modalOptions.theme)!=null?_a:"light",this.handleChainChanged=this.handleChainChanged.bind(this),this.handleAccountsChanged=this.handleAccountsChanged.bind(this),this.handleDisconnect=this.handleDisconnect.bind(this),this.handleClose=this.handleClose.bind(this)}get config(){return this._config}log(...args){this._debug&&console.log("\u{1F50C} ",args)}maybeReload(){window&&this._config.reloadOnNetworkChange&&window.location.reload()}setEthersProvider(){this.isEthersProvider()?this._ethersProvider=this._providerBase:this._ethersProvider=new Web3Provider(this._providerBase,this._config.immutableProvider?"any":void 0)}handleChainChanged(chainId){var _a;this.log(`Handling chain changed to ${chainId}! updating providers`),(_a=this.emitUpdate)==null||_a.call(this,{chainId,provider:this._providerBase}),this.setEthersProvider(),this.maybeReload()}handleAccountsChanged(accounts){var _a,_b;this.log("Handling accounts changed",accounts),accounts.length===0?(_a=this.emitDeactivate)==null||_a.call(this):(_b=this.emitUpdate)==null||_b.call(this,{account:accounts[0]})}handleDisconnect(code,reason){this.log("Handling disconnected event",code,reason),this.deactivate()}handleClose(code,reason){this.log("Handling 'close' event",code,reason),this.deactivate()}load(){this._web3Modal||(this._web3Modal=new Core(__spreadProps(__spreadValues({},this._options),{theme:this._theme})))}async activate(){var _a,_b,_c,_d,_e,_f;try{this.load(),this._web3Modal&&(this._options.cacheProvider===!1&&this.resetModal(),console.log("Open provider modal"),await this._web3Modal.updateTheme(this._theme),this._id?this._providerBase=await this._web3Modal.connectTo(this._id):this._providerBase=await this._web3Modal.connect(),this._providerBase.on("chainChanged",this.handleChainChanged),this._providerBase.on("accountsChanged",this.handleAccountsChanged),this._providerBase.on("disconnect",this.handleDisconnect),this._providerBase.on("close",this.handleClose),this.setEthersProvider());let account=(_b=(_a=this._providerBase)==null?void 0:_a.selectedAddress)!=null?_b:await this.getAccount(),chainId=(_f=(_c=this._providerBase)==null?void 0:_c.networkVersion)!=null?_f:BigNumber.from((_e=(_d=this._providerBase)==null?void 0:_d.chainId)!=null?_e:0).toNumber();return chainId===0&&(chainId=await this.getChainId()),this.setSignerFromAccount(account),{provider:this._providerBase,account,chainId}}catch(error){throw this.resetModal(),(error==null?void 0:error.includes(const_web3DialogClosedByUser))?(console.log(error),this.deactivate(),new UserClosedModalError):(console.error("EthersModalConnector: Could not activate provider",error,this._providerBase),new CouldNotActivateError(error))}}isEthersProvider(){return isEthersProvider(this._providerBase)}deactivate(){var _a,_b,_c,_d,_e,_f,_g;(_a=this.emitDeactivate)==null||_a.call(this),(_b=this._providerBase)==null||_b.removeListener("disconnect",this.handleDisconnect),(_c=this._providerBase)==null||_c.removeListener("chainChanged",this.handleChainChanged),(_d=this._providerBase)==null||_d.removeListener("accountsChanged",this.handleAccountsChanged),(_e=this._providerBase)==null||_e.removeListener("close",this.handleClose);let provider=this._providerBase;(_f=provider==null?void 0:provider.disconnect)==null||_f.call(provider),(_g=provider==null?void 0:provider.close)==null||_g.call(provider),this.maybeReload()}getProvider(){return Promise.resolve(this._ethersProvider)}async getChainId(){var _a,_b,_c;return Promise.resolve((_c=(_b=(_a=this._ethersProvider)==null?void 0:_a.network)==null?void 0:_b.chainId)!=null?_c:0)}async setSignerFromAccount(account){var _a,_b;account&&utils.isAddress(account)&&await((_a=this._signer)==null?void 0:_a.getAddress())!==account&&(this._signer=(_b=this._ethersProvider)==null?void 0:_b.getSigner(account))}async getAccount(){var _a,_b,_c;if(this._signer){let account2=await this._signer.getAddress();if(utils.isAddress(account2))return account2}let accounts=await((_a=this._ethersProvider)==null?void 0:_a.listAccounts()),account=(_b=accounts==null?void 0:accounts[0])!=null?_b:null;return await this.setSignerFromAccount(account),Promise.resolve((_c=accounts==null?void 0:accounts[0])!=null?_c:null)}getSigner(){return this._signer}async changeSigner(signer){var _a,_b,_c;let account=await signer.getAddress();utils.isAddress(account)&&this.validState()&&(this._signer=signer,this.handleAccountsChanged([account]),console.log(`changeSigner: provider chainId ${await this.getChainId()}`),console.log(`new signer chainId ${(_c=(_b=await((_a=signer.provider)==null?void 0:_a.getNetwork()))==null?void 0:_b.chainId)!=null?_c:""}`))}validState(){return this._providerBase!=null&&this._ethersProvider!=null&&this._web3Modal!=null}resetModal(){var _a;this._web3Modal&&(this._web3Modal.clearCachedProvider(),this._providerBase=void 0,this._ethersProvider=void 0,this._signer=void 0,(_a=this.emitUpdate)==null||_a.call(this,{account:void 0,provider:void 0,chainId:void 0}))}setModalTheme(theme){this._theme=theme}};var useEthersContext=providerKey=>{let _a=useWeb3React(providerKey),{connector,activate,library,account,deactivate,chainId}=_a,context=__objRest(_a,["connector","activate","library","account","deactivate","chainId"]);if(!(connector instanceof EthersModalConnector||connector instanceof AbstractConnector2)&&connector!=null)throw"Connector is not a EthersModalConnector";let ethersConnector=connector,openWeb3Modal=useCallback(ethersModalConnector=>{if(context.active&&deactivate(),ethersModalConnector==null&&console.error("A valid ethersModalConnector was not provided"),ethersModalConnector!=null){let onError=error=>{var _a2;try{(_a2=connector==null?void 0:connector.deactivate)==null||_a2.call(connector),console.warn(error)}catch{}};activate(ethersModalConnector,onError).catch(onError)}},[context.active,deactivate,activate,connector]),disconnectModal=useCallback(()=>{ethersConnector.resetModal(),deactivate()},[deactivate,ethersConnector]);return __spreadValues({connector:ethersConnector,ethersProvider:library,activate,deactivate,library,account:account!=null?account:void 0,signer:ethersConnector==null?void 0:ethersConnector.getSigner(),chainId,changeSigner:ethersConnector==null?void 0:ethersConnector.changeSigner.bind(ethersConnector),openModal:openWeb3Modal,disconnectModal,setModalTheme:ethersConnector==null?void 0:ethersConnector.setModalTheme.bind(ethersConnector)},context)},getEthersAppProviderLibrary=(provider,connector)=>{if(provider==null)throw new NoEthereumProviderFoundError;let anyNetwork;return connector instanceof EthersModalConnector&&(anyNetwork=connector.config.immutableProvider?"any":void 0),isEthersProvider(provider)?provider:new Web3Provider2(provider,anyNetwork)},EthersAppContext=props=>React.createElement(Web3ReactProvider,{getLibrary:getEthersAppProviderLibrary},React.createElement(BlockNumberContext,null,props.children));import{StaticJsonRpcProvider}from"@ethersproject/providers";var ConnectToStaticJsonRpcProvider=async(_package,opts)=>{let url=opts.rpc[opts.currentChainId];try{let provider=new StaticJsonRpcProvider(url,opts.currentChainId);return await provider.getNetwork(),await provider.getBlockNumber(),(provider==null?void 0:provider.anyNetwork)||console.warn(`ConnectToStaticJsonRpcProvider: could not connect to chain: ${opts.currentChainId} url: ${url}`),provider}catch{throw new Error("No StaticJsonRpcProvider found")}};export{useBlockNumberContext,BlockNumberContext,UserClosedModalError,CouldNotActivateError,NoEthereumProviderFoundError,const_web3DialogClosedByUser,EthersModalConnector,useEthersContext,getEthersAppProviderLibrary,EthersAppContext,ConnectToStaticJsonRpcProvider};
//# sourceMappingURL=chunk-SZO3HXET.js.map
