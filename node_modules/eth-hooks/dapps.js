import{useOnRepetition}from"./chunk-PNTNPJDE.js";import{useBlockNumberContext}from"./chunk-SZO3HXET.js";import"./chunk-ABR2QVOF.js";import"./chunk-7TNBWNRY.js";import"./chunk-MTWSNRX5.js";import"./chunk-EHDKCTCW.js";import{Token,WETH,Fetcher,Route}from"@uniswap/sdk";import{useCallback,useState}from"react";var useDexEthPrice=(mainnetProvider,targetNetworkInfo,pollTime=0)=>{let[price,setPrice]=useState(0),callFunc=useCallback(()=>{(async()=>{if(targetNetworkInfo==null?void 0:targetNetworkInfo.price)setPrice(targetNetworkInfo.price);else if(mainnetProvider){let network=await mainnetProvider.getNetwork(),DAI=new Token(network?network.chainId:1,"0x6B175474E89094C44Da98b954EedeAC495271d0F",18),pair=await Fetcher.fetchPairData(DAI,WETH[DAI.chainId],mainnetProvider),route=new Route([pair],WETH[DAI.chainId]);setPrice(parseFloat(route.midPrice.toSignificant(6)))}else setPrice(-1),console.warn("useDexEthPrice: mainnetProvider or targetNetwork not given")})()},[targetNetworkInfo==null?void 0:targetNetworkInfo.price,mainnetProvider]);return useOnRepetition(callFunc,{pollTime,provider:mainnetProvider}),price};import axios from"axios";import{useState as useState2,useCallback as useCallback2,useEffect}from"react";var useDexTokenList=(tokenListUri="https://gateway.ipfs.io/ipns/tokens.uniswap.org",chainId)=>{let[tokenList,setTokenList]=useState2([]),blockNumber=useBlockNumberContext(),callFunc=useCallback2(async()=>{try{let tokenListResp=(await axios(tokenListUri)).data;if(tokenListResp!=null){let tokenInfo=[];chainId?tokenInfo=tokenListResp.tokens.filter(t=>t.chainId===chainId):tokenInfo=tokenListResp.tokens,setTokenList(tokenInfo)}}catch(e){console.log(e)}},[chainId,tokenListUri]);return useEffect(()=>{callFunc()},[blockNumber,callFunc]),tokenList};import{utils}from"ethers";import{useState as useState3,useEffect as useEffect2}from"react";var lookupAddress=async(provider,address)=>{if(utils.isAddress(address))try{let reportedName=await provider.lookupAddress(address),resolvedAddress=await provider.resolveName(reportedName);return address&&utils.getAddress(address)===utils.getAddress(resolvedAddress)?reportedName:utils.getAddress(address)}catch{return utils.getAddress(address)}return""},useResolveEnsName=(mainnetProvider,address)=>{let[ensName,setEnsName]=useState3(address);return useEffect2(()=>{let storedData=window.localStorage.getItem("ensCache_"+address),cache=JSON.parse(storedData!=null?storedData:"{}");cache&&(cache==null?void 0:cache.name)&&(cache==null?void 0:cache.timestamp)>Date.now()?setEnsName(cache==null?void 0:cache.name):mainnetProvider&&lookupAddress(mainnetProvider,address).then(name=>{name&&(setEnsName(name),window.localStorage.setItem("ensCache_"+address,JSON.stringify({timestamp:Date.now()+36e4,name})))})},[address,mainnetProvider]),ensName};import{constants}from"ethers";import{useState as useState4,useEffect as useEffect3}from"react";var useResolveEnsAddress=(mainnetProvider,ensName)=>{let[address,setAddress]=useState4(constants.AddressZero);return useEffect3(()=>{mainnetProvider&&mainnetProvider.resolveName(ensName).then(resolvedAddress=>setAddress(resolvedAddress))},[mainnetProvider,ensName]),address};export{useDexEthPrice,useDexTokenList,useResolveEnsAddress,useResolveEnsName};
//# sourceMappingURL=dapps.js.map
