{
  "version": 3,
  "sources": ["../src/context/BlockNumberContext.tsx", "../src/context/EthersAppContext.tsx", "../src/context/connectors/EthersModalConnector.ts", "../src/context/connectors/connectorErrors.ts", "../src/models/constants/common.ts", "../src/context/connectors/StaticJsonRpcProviderConnector.ts"],
  "sourcesContent": ["import { createContext, FC, useContext, useEffect, useReducer } from 'react';\r\nimport { useIsMounted } from 'usehooks-ts';\r\n\r\nimport { useEthersContext } from '~~/context';\r\n\r\nconst BlockNumberReactContext = createContext<number | undefined>(undefined);\r\n\r\n/** *\r\n * @internal\r\n */\r\ninterface State {\r\n  [chainId: number]: number | undefined;\r\n}\r\n\r\n/**\r\n *\r\n * @internal\r\n *\r\n */\r\ninterface Payload {\r\n  chainId: number;\r\n  blockNumber: number;\r\n}\r\n\r\n/**\r\n *\r\n * @internal\r\n *\r\n * @param state\r\n * @param payload\r\n * @returns\r\n */\r\nconst reducer = (state: State = {}, payload: Payload): State => {\r\n  const current = state[payload.chainId];\r\n  if (!current || payload.blockNumber > current) {\r\n    return {\r\n      ...state,\r\n      [payload.chainId]: payload.blockNumber,\r\n    };\r\n  }\r\n  return state;\r\n};\r\n\r\n/**\r\n * #### Summary\r\n * A hook that gets you the current blocknumber via react context\r\n * - can be shared by your whole app.\r\n *\r\n * #### Use\r\n * Make sure to wrap your main app with the {@link EthersAppContext}.\r\n * - See [scaffold-eth-typescript example](https://github.com/scaffold-eth/scaffold-eth-typescript/blob/0225179a2a8bb7b3a255d6eff4802b47d72809dd/packages/vite-app-ts/src/components/routes/App.tsx#L38)\r\n *\r\n *\r\n * #### Notes\r\n * - this extensively used by eth-hooks to trigger hooks when a new block arrives\r\n * - uses the current provider {@link ethersProvider} from {@link useEthersContext}\r\n *\r\n * @category EthersContext\r\n *\r\n * @returns current block number\r\n */\r\nexport const useBlockNumberContext = (): number => {\r\n  const blockNumber = useContext(BlockNumberReactContext);\r\n  if (blockNumber == null) {\r\n    console.log('blockNumber context is null');\r\n  }\r\n  // invariant(blockNumber != null, 'useBlockNumberContext needs to be used under BlockNumberContext');\r\n  return blockNumber ?? 0;\r\n};\r\n\r\ninterface IProps {\r\n  providerKey?: string;\r\n}\r\n\r\n/**\r\n * #### Summary\r\n * A context that works with {@link useBlockNumberContext} to give access to the current provider's block number in any place in your app\r\n *\r\n * @category EthersContext\r\n *\r\n * @param props\r\n * @returns\r\n */\r\nexport const BlockNumberContext: FC<IProps> = (props) => {\r\n  const { ethersProvider, chainId } = useEthersContext(props.providerKey);\r\n\r\n  const isMounted = useIsMounted();\r\n  const [state, dispatch] = useReducer(reducer, {});\r\n  undefined;\r\n  const blockNumber: number | undefined = chainId && state?.[chainId] ? state?.[chainId] : 0;\r\n\r\n  useEffect(() => {\r\n    if (chainId && ethersProvider) {\r\n      const update = (blockNumber: number): void => {\r\n        if (isMounted()) dispatch({ chainId, blockNumber });\r\n      };\r\n      ethersProvider?.addListener?.('block', update);\r\n\r\n      // if the current value is undefined, do an initial fetch\r\n      if (state?.[chainId] == null) {\r\n        ethersProvider?.getBlockNumber().then((val) => {\r\n          if (isMounted()) dispatch({ chainId, blockNumber: val });\r\n        });\r\n      }\r\n\r\n      return (): void => {\r\n        ethersProvider?.removeListener?.('block', update);\r\n      };\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [chainId, ethersProvider, isMounted]);\r\n\r\n  return <BlockNumberReactContext.Provider value={blockNumber}>{props.children} </BlockNumberReactContext.Provider>;\r\n};\r\n", "import { Web3Provider } from '@ethersproject/providers';\r\nimport { AbstractConnector } from '@web3-react/abstract-connector';\r\nimport { useWeb3React, Web3ReactProvider } from '@web3-react/core';\r\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types';\r\nimport { Signer } from 'ethers';\r\nimport { FC, useCallback } from 'react';\r\n\r\nimport { NoEthereumProviderFoundError } from '~~/context';\r\nimport { BlockNumberContext } from '~~/context/BlockNumberContext';\r\nimport { EthersModalConnector, TEthersModalConnector } from '~~/context/connectors/EthersModalConnector';\r\nimport { isEthersProvider } from '~~/functions/ethersHelpers';\r\nimport { TEthersProvider } from '~~/models';\r\n\r\n/**\r\n * #### Summary\r\n * A callback type that returns a EthersModalConnector\r\n *\r\n * #### Notes\r\n * - can be used by components that need to give a connector to {@link IEthersContext.openModal}\r\n *\r\n * @category EthersContext\r\n */\r\nexport type CreateEthersModalConnector = () => TEthersModalConnector | undefined;\r\n\r\n/**\r\n * #### Summary\r\n * The return type of {@link EthersModalConnector}\r\n * - ethers compatable provider {@link TEthersProvider}\r\n * - a callback to change the current signer\r\n * - the current account, chainId and signer\r\n * - callbacks to open the web3Modal, logout or change theme\r\n *\r\n * @category EthersContext\r\n */\r\nexport interface IEthersContext extends Web3ReactContextInterface<TEthersProvider> {\r\n  connector: TEthersModalConnector | undefined;\r\n  ethersProvider: TEthersProvider | undefined;\r\n  active: boolean;\r\n  signer: Signer | undefined;\r\n  account: string | undefined;\r\n  chainId: number | undefined;\r\n  changeSigner: ((signer: Signer) => Promise<void>) | undefined;\r\n  openModal: (ethersModalConnector: TEthersModalConnector) => void;\r\n  disconnectModal: () => void;\r\n  setModalTheme: ((theme: 'light' | 'dark') => void) | undefined;\r\n}\r\n\r\n/**\r\n * A wrapper around useWeb3React that provides functionality for web3modal\r\n * and eth-hooks compatability\r\n * @param providerKey (string) :: (optional) :: used if you want a secondary provider context, for example to mainnet\r\n * @returns (IEthersWeb3Context)\r\n */\r\n\r\n/**\r\n * #### Summary\r\n * This Hook provides you with access to the current Ethers Provider Context.\r\n * This provider would be the one selected by using {@link EthersModalConnect} and Web3Modal\r\n *\r\n * #### Features\r\n * Gives you access to consistent interface to get the current provider information {@link EthersModalConnector}\r\n * - ethers compatable provider {@link TEthersProvider}\r\n * - a callback to change the current account (signer)\r\n * - the current account, chainId and signer\r\n * - callbacks to open the web3Modal, logout or change theme\r\n *\r\n * #### Notes\r\n * - currently providerKey isnt being used\r\n *\r\n * @category EthersContext\r\n *\r\n * @param providerKey\r\n * @returns\r\n */\r\nexport const useEthersContext = (providerKey?: string): IEthersContext => {\r\n  const { connector, activate, library, account, deactivate, chainId, ...context } =\r\n    useWeb3React<TEthersProvider>(providerKey);\r\n  if (!(connector instanceof EthersModalConnector || connector instanceof AbstractConnector) && connector != null) {\r\n    throw 'Connector is not a EthersModalConnector';\r\n  }\r\n  const ethersConnector = connector as EthersModalConnector;\r\n\r\n  const openWeb3Modal = useCallback(\r\n    (ethersModalConnector: TEthersModalConnector | undefined) => {\r\n      if (context.active) {\r\n        deactivate();\r\n      }\r\n\r\n      if (ethersModalConnector == null) {\r\n        console.error('A valid ethersModalConnector was not provided');\r\n      }\r\n      if (ethersModalConnector != null) {\r\n        const onError = (error: Error): void => {\r\n          try {\r\n            connector?.deactivate?.();\r\n            console.warn(error);\r\n          } catch {}\r\n        };\r\n        void activate(ethersModalConnector, onError).catch(onError);\r\n      }\r\n    },\r\n    [context.active, deactivate, activate, connector]\r\n  );\r\n\r\n  const disconnectModal = useCallback(() => {\r\n    ethersConnector.resetModal();\r\n    deactivate();\r\n  }, [deactivate, ethersConnector]);\r\n\r\n  const result: IEthersContext = {\r\n    connector: ethersConnector,\r\n    ethersProvider: library,\r\n    activate,\r\n    deactivate,\r\n    library,\r\n    account: account ?? undefined,\r\n    signer: ethersConnector?.getSigner(),\r\n    chainId,\r\n    changeSigner: ethersConnector?.changeSigner.bind(ethersConnector),\r\n    openModal: openWeb3Modal,\r\n    disconnectModal: disconnectModal,\r\n    setModalTheme: ethersConnector?.setModalTheme.bind(ethersConnector),\r\n    ...context,\r\n  };\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Convert the provider obtained from web3Modal into a ethers.web3provider\r\n *\r\n * @internal\r\n *\r\n * @param provider\r\n * @param _connector\r\n * @returns\r\n */\r\nexport const getEthersAppProviderLibrary = (\r\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\n  provider: any,\r\n  connector: AbstractConnector | undefined\r\n): TEthersProvider => {\r\n  if (provider == null) {\r\n    throw new NoEthereumProviderFoundError();\r\n  }\r\n\r\n  let anyNetwork: string | undefined = undefined;\r\n  if (connector instanceof EthersModalConnector) {\r\n    anyNetwork = connector.config.immutableProvider ? 'any' : undefined;\r\n  }\r\n\r\n  if (isEthersProvider(provider)) {\r\n    return provider as TEthersProvider;\r\n  } else {\r\n    return new Web3Provider(provider, anyNetwork);\r\n  }\r\n};\r\n/**\r\n * #### Summary\r\n * Ethers App Context for your react app to be used with {@link useEthersContext}.\r\n * This is a wrapper around Web3ReactProvider that provides additional functionality such as a {@link BlockNumberContext} and access to {@link IEthersContext}\r\n *\r\n * @category EthersContext\r\n *\r\n * @param props\r\n * @returns\r\n */\r\nexport const EthersAppContext: FC = (props) => {\r\n  return (\r\n    <Web3ReactProvider getLibrary={getEthersAppProviderLibrary}>\r\n      <BlockNumberContext>{props.children}</BlockNumberContext>\r\n    </Web3ReactProvider>\r\n  );\r\n};\r\n", "import { Web3Provider } from '@ethersproject/providers';\r\nimport { AbstractConnector } from '@web3-react/abstract-connector';\r\nimport { ConnectorUpdate } from '@web3-react/types';\r\nimport { BigNumber, Signer, utils } from 'ethers';\r\nimport Core, { ICoreOptions, ThemeColors } from 'web3modal';\r\n\r\nimport { isEthersProvider } from '../../functions/ethersHelpers';\r\n\r\nimport { UserClosedModalError, CouldNotActivateError } from './connectorErrors';\r\n\r\nimport { TEthersProvider } from '~~/models';\r\nimport { const_web3DialogClosedByUser } from '~~/models/constants/common';\r\n\r\ntype TEthersModalConfig = {\r\n  /**\r\n   * when network (chain) or provider changes reload the page\r\n   */\r\n  reloadOnNetworkChange: boolean;\r\n  /**\r\n   * ### Summary\r\n   * ethers.io recomments an immutable provider, and by default doesn't allow\r\n   * network changes (i.e.) metamask changing chains.\r\n   * - if immutableProvider is true, it will follow the default behaviour\r\n   * - if immutableProvider is false, it will allow network changes\r\n   *\r\n   * ### Notes\r\n   * see https://github.com/ethers-io/ethers.js/discussions/1480\r\n   */\r\n  immutableProvider: boolean;\r\n};\r\n\r\ntype TWeb3ModalTheme = 'light' | 'dark';\r\n\r\n/**\r\n * #### Summary\r\n * An interface implemented by {@link EthersModalConnector} in addition to AbstractConnector\r\n */\r\nexport interface ICommonModalConnector {\r\n  getSigner(): Signer | undefined;\r\n  setModalTheme(theme: TWeb3ModalTheme | ThemeColors): void;\r\n  resetModal(): void;\r\n  changeSigner(signer: Signer): Promise<void>;\r\n}\r\n\r\nexport type TEthersModalConnector = ICommonModalConnector & AbstractConnector;\r\n\r\n/**\r\n * #### Summary\r\n * This is a connector for (web3-react)[https://github.com/NoahZinsmeister/web3-react] that allows it to interface with [web3Modal](https://github.com/Web3Modal/web3modal).\r\n * The provider selected by user via web3modal is interfaced to the web3-react context.\r\n *\r\n * #### Features\r\n * - This connector used with {@link useEthersContext} allows the app and all the hooks to effortlessly access the current network, provider, signer, address information {@link IEthersContext}\r\n * - The connector centralizes and takes care of management of the web3 interaction and provides a consistent exprience for your app.\r\n *\r\n * #### Notes\r\n * - inherits from web3-react class AbstractConnector\r\n *\r\n * @category EthersContext\r\n */\r\nexport class EthersModalConnector extends AbstractConnector implements ICommonModalConnector {\r\n  protected _options: Partial<ICoreOptions>;\r\n  protected _providerBase?: any;\r\n  protected _ethersProvider?: TEthersProvider;\r\n  protected _web3Modal?: Core;\r\n  protected _id: string | undefined;\r\n  protected _debug: boolean = false;\r\n  protected _config: TEthersModalConfig;\r\n  protected _signer: Signer | undefined;\r\n  protected _theme: TWeb3ModalTheme | ThemeColors;\r\n\r\n  get config(): TEthersModalConfig {\r\n    return this._config;\r\n  }\r\n\r\n  /**\r\n   * @param web3modalOptions see [web3modal docs](https://github.com/Web3Modal/web3modal#provider-options) for details.  You can also check the [scaffold-eth-typescript web3config](https://github.com/scaffold-eth/scaffold-eth-typescript/blob/main/packages/vite-app-ts/src/config/web3ModalConfig.ts) for an example.\r\n   * @param config Configuration for EthersModalConnector\r\n   * @param id allows you to connect directly to a specific provider.  [See docs](https://github.com/Web3Modal/web3modal#connect-to-specific-provider)\r\n   * @param debug turn on debug logging\r\n   */\r\n  constructor(\r\n    web3modalOptions: Partial<ICoreOptions>,\r\n    config: TEthersModalConfig = { reloadOnNetworkChange: false, immutableProvider: false },\r\n    id?: string,\r\n    debug: boolean = false\r\n  ) {\r\n    super();\r\n\r\n    this._options = web3modalOptions;\r\n    this._id = id;\r\n    this._debug = debug;\r\n    this._config = config;\r\n    this._theme = (web3modalOptions.theme as TWeb3ModalTheme | ThemeColors) ?? 'light';\r\n\r\n    this.handleChainChanged = this.handleChainChanged.bind(this);\r\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this);\r\n    this.handleDisconnect = this.handleDisconnect.bind(this);\r\n    this.handleClose = this.handleClose.bind(this);\r\n  }\r\n\r\n  protected log(...args: any[]): void {\r\n    if (this._debug) {\r\n      console.log('\uD83D\uDD0C ', args);\r\n    }\r\n  }\r\n\r\n  private maybeReload(): void {\r\n    if (window && this._config.reloadOnNetworkChange) {\r\n      window.location.reload();\r\n    }\r\n  }\r\n\r\n  private setEthersProvider(): void {\r\n    if (this.isEthersProvider()) {\r\n      this._ethersProvider = this._providerBase as TEthersProvider;\r\n    } else {\r\n      this._ethersProvider = new Web3Provider(this._providerBase, this._config.immutableProvider ? 'any' : undefined);\r\n    }\r\n  }\r\n\r\n  private handleChainChanged(chainId: number | string): void {\r\n    this.log(`Handling chain changed to ${chainId}! updating providers`);\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n    this.emitUpdate?.({ chainId, provider: this._providerBase });\r\n    this.setEthersProvider();\r\n    this.maybeReload();\r\n  }\r\n\r\n  private handleAccountsChanged(accounts: string[]): void {\r\n    this.log(`Handling accounts changed`, accounts);\r\n    if (accounts.length === 0) {\r\n      this.emitDeactivate?.();\r\n    } else {\r\n      this.emitUpdate?.({ account: accounts[0] });\r\n    }\r\n  }\r\n\r\n  private handleDisconnect(code: any, reason: any): void {\r\n    this.log(`Handling disconnected event`, code, reason);\r\n    this.deactivate();\r\n  }\r\n\r\n  private handleClose(code: number, reason: string): void {\r\n    this.log(\"Handling 'close' event\", code, reason);\r\n    this.deactivate();\r\n  }\r\n\r\n  private load(): void {\r\n    if (!this._web3Modal) {\r\n      this._web3Modal = new Core({ ...this._options, theme: this._theme });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * #### Summary\r\n   * Inherits from AbstractConnector.  This activates web3Modal and opens the modal.\r\n   *\r\n   * #### Notes\r\n   * Once the user selects a provider\r\n   * - this will activate the provider and attach the appropriate event listeners.\r\n   * - get the account and signer\r\n   * - gets the ethers compatable provider\r\n   *\r\n   * #### Errors\r\n   * - {@link UserClosedModalError}\r\n   * - {@link CouldNotActivateError}\r\n   * @returns\r\n   */\r\n  public async activate(): Promise<ConnectorUpdate> {\r\n    try {\r\n      this.load();\r\n\r\n      if (this._web3Modal) {\r\n        if (this._options.cacheProvider === false) this.resetModal();\r\n        console.log('Open provider modal');\r\n        await this._web3Modal.updateTheme(this._theme);\r\n        /* eslint-disable @typescript-eslint/no-unsafe-assignment*/\r\n        if (this._id) {\r\n          this._providerBase = await this._web3Modal.connectTo(this._id);\r\n        } else {\r\n          this._providerBase = await this._web3Modal.connect();\r\n        }\r\n        /* eslint-enable */\r\n\r\n        /* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call*/\r\n        this._providerBase.on('chainChanged', this.handleChainChanged);\r\n        this._providerBase.on('accountsChanged', this.handleAccountsChanged);\r\n        this._providerBase.on('disconnect', this.handleDisconnect as any);\r\n        this._providerBase.on('close', this.handleClose as any);\r\n        /* eslint-enable */\r\n\r\n        this.setEthersProvider();\r\n      }\r\n\r\n      /* eslint-disable */\r\n      const account: string = this._providerBase?.selectedAddress ?? (await this.getAccount());\r\n      let chainId: number =\r\n        this._providerBase?.networkVersion ?? BigNumber.from(this._providerBase?.chainId ?? 0).toNumber();\r\n      if (chainId === 0) {\r\n        chainId = (await this.getChainId()) as number;\r\n      }\r\n      this.setSignerFromAccount(account);\r\n\r\n      return { provider: this._providerBase, account, chainId };\r\n      /* eslint-enable */\r\n    } catch (error) {\r\n      this.resetModal();\r\n      if ((error as string)?.includes(const_web3DialogClosedByUser)) {\r\n        console.log(error);\r\n        this.deactivate();\r\n        throw new UserClosedModalError();\r\n      } else {\r\n        console.error('EthersModalConnector: Could not activate provider', error, this._providerBase);\r\n        throw new CouldNotActivateError(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  private isEthersProvider(): boolean {\r\n    return isEthersProvider(this._providerBase);\r\n  }\r\n\r\n  /**\r\n   * #### Summary\r\n   * Safely deactivates the current provider and removes all event listeners\r\n   */\r\n  public deactivate(): void {\r\n    /* eslint-disable @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call  */\r\n    this.emitDeactivate?.();\r\n\r\n    this._providerBase?.removeListener('disconnect', this.handleDisconnect);\r\n    this._providerBase?.removeListener('chainChanged', this.handleChainChanged);\r\n    this._providerBase?.removeListener('accountsChanged', this.handleAccountsChanged);\r\n    this._providerBase?.removeListener('close', this.handleClose);\r\n\r\n    const provider = this._providerBase;\r\n\r\n    // use disconnect function if exists\r\n    provider?.disconnect?.();\r\n    // use close function if exists\r\n    provider?.close?.();\r\n\r\n    this.maybeReload();\r\n    /* eslint-enable  */\r\n  }\r\n\r\n  public getProvider(): Promise<TEthersProvider | undefined> {\r\n    return Promise.resolve(this._ethersProvider) as Promise<TEthersProvider | undefined>;\r\n  }\r\n\r\n  public async getChainId(): Promise<number | string> {\r\n    return Promise.resolve(this._ethersProvider?.network?.chainId ?? 0) as Promise<number | string>;\r\n  }\r\n\r\n  private async setSignerFromAccount(account: string | null): Promise<void> {\r\n    if (account && utils.isAddress(account) && (await this._signer?.getAddress()) !== account) {\r\n      this._signer = this._ethersProvider?.getSigner(account);\r\n    }\r\n  }\r\n\r\n  public async getAccount(): Promise<null | string> {\r\n    if (this._signer) {\r\n      const account = await this._signer.getAddress();\r\n      if (utils.isAddress(account)) return account;\r\n    }\r\n\r\n    const accounts = await this._ethersProvider?.listAccounts();\r\n    const account = accounts?.[0] ?? null;\r\n    await this.setSignerFromAccount(account);\r\n    return Promise.resolve(accounts?.[0] ?? null);\r\n  }\r\n\r\n  public getSigner(): Signer | undefined {\r\n    return this._signer;\r\n  }\r\n\r\n  /**\r\n   * #### Summary\r\n   * Change the current signer and account used by the connector\r\n   * @param signer\r\n   */\r\n  public async changeSigner(signer: Signer): Promise<void> {\r\n    const account = await signer.getAddress();\r\n    if (utils.isAddress(account) && this.validState()) {\r\n      this._signer = signer;\r\n      this.handleAccountsChanged([account]);\r\n\r\n      console.log(`changeSigner: provider chainId ${await this.getChainId()}`);\r\n      console.log(`new signer chainId ${(await signer.provider?.getNetwork())?.chainId ?? ''}`);\r\n    }\r\n  }\r\n\r\n  protected validState(): boolean {\r\n    return this._providerBase != null && this._ethersProvider != null && this._web3Modal != null;\r\n  }\r\n\r\n  /**\r\n   * #### Summary\r\n   * Resets the web3Modal and clears the cache\r\n   */\r\n  public resetModal(): void {\r\n    if (this._web3Modal) {\r\n      this._web3Modal.clearCachedProvider();\r\n      this._providerBase = undefined;\r\n      this._ethersProvider = undefined;\r\n      this._signer = undefined;\r\n      this.emitUpdate?.({ account: undefined, provider: undefined, chainId: undefined });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * #### Summary\r\n   * Sets the web3modal theme: light | dark | ThemeColors\r\n   * @param theme\r\n   */\r\n  public setModalTheme(theme: TWeb3ModalTheme | ThemeColors): void {\r\n    this._theme = theme;\r\n  }\r\n}\r\n", "/**\r\n * @category EthersContext\r\n */\r\nexport class UserClosedModalError extends Error {\r\n  public constructor() {\r\n    super();\r\n    this.name = this.constructor.name;\r\n    this.message = 'EthersModalConnector: The user closed the modal with selecting a provider.';\r\n  }\r\n}\r\n\r\n/**\r\n * @category EthersContext\r\n */\r\nexport class CouldNotActivateError extends Error {\r\n  public constructor(error: unknown) {\r\n    super();\r\n    this.name = this.constructor.name;\r\n    this.message = `EthersModalConnector: Could not activate provider.  ${(error as string) ?? ''}`;\r\n  }\r\n}\r\n\r\n/**\r\n * @category EthersContext\r\n */\r\nexport class NoEthereumProviderFoundError extends Error {\r\n  public constructor() {\r\n    super();\r\n    this.name = this.constructor.name;\r\n    this.message = `EthersModalConnector: No ethereum provider Found.`;\r\n  }\r\n}\r\n", "export const const_web3DialogClosedByUser = 'Modal closed by user';\r\n", "import { StaticJsonRpcProvider } from '@ethersproject/providers';\r\nimport { IAbstractConnectorOptions } from 'web3modal';\r\n\r\n/**\r\n * #### Summary\r\n * A web3modal CustomProvider Options\r\n * - Options for web3modal that allows you to connect to a StaticJsonRpcProvider such as localhost\r\n *\r\n * @category EthersContext\r\n */\r\nexport interface IStaticJsonRpcProviderConnectorOptions extends IAbstractConnectorOptions {\r\n  rpc: { [chainId: number]: string };\r\n  currentChainId: number;\r\n}\r\n\r\n/**\r\n * #### Summary\r\n * A connector that can be used by apps to connect let web3Modal connect to a StaticJsonRpcProvider\r\n * - For example you can use this to connect to a localhost provider\r\n *\r\n * #### Notes\r\n * See scaffold-eth-typescript for an example that uses it to connect to a localhost burner wallet.\r\n * - [scaffold-eth-typescript example](https://github.com/scaffold-eth/scaffold-eth-typescript/blob/0225179a2a8bb7b3a255d6eff4802b47d72809dd/packages/vite-app-ts/src/config/web3ModalConfig.ts#L86)\r\n *\r\n * @category EthersContext\r\n *\r\n * @param _package not used\r\n * @param opts\r\n * @returns\r\n */\r\nexport const ConnectToStaticJsonRpcProvider = async (\r\n  _package: unknown,\r\n  opts: IStaticJsonRpcProviderConnectorOptions\r\n): Promise<StaticJsonRpcProvider | undefined> => {\r\n  const url = opts.rpc[opts.currentChainId];\r\n  try {\r\n    const provider = new StaticJsonRpcProvider(url, opts.currentChainId);\r\n    await provider.getNetwork();\r\n    await provider.getBlockNumber();\r\n    if (!provider?.anyNetwork) {\r\n      console.warn(`ConnectToStaticJsonRpcProvider: could not connect to chain: ${opts.currentChainId} url: ${url}`);\r\n    }\r\n    return provider;\r\n  } catch (e) {\r\n    throw new Error('No StaticJsonRpcProvider found');\r\n  }\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
