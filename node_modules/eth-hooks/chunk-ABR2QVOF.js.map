{
  "version": 3,
  "sources": ["../src/functions/asyncSome.ts", "../src/functions/parseProviderOrSigner.ts"],
  "sourcesContent": ["/**\r\n * #### Summary\r\n * js .some function that can be used with async predicates\r\n *\r\n * @category Helpers\r\n *\r\n * @param arr\r\n * @param predicate\r\n * @returns\r\n */\r\nexport const asyncSome = async <T>(arr: Array<T>, predicate: (item: T) => Promise<boolean>): Promise<T | undefined> => {\r\n  for (const e of arr) {\r\n    if (await predicate(e)) return e;\r\n  }\r\n  return undefined;\r\n};\r\n", "import { JsonRpcProvider, StaticJsonRpcProvider, Web3Provider } from '@ethersproject/providers';\r\nimport { ethers, Signer } from 'ethers';\r\n\r\nimport { TEthersUser, TEthersProviderOrSigner } from '~~/models';\r\n\r\n/**\r\n * #### Summary\r\n * Parse {@link TEthersProviderOrSigner} to {@link TEthersUser}\r\n * Get the TEthersUser from a provider or signer\r\n *\r\n * @category Helpers\r\n *\r\n * @param providerOrSigner TEthersProviderOrSigner\r\n * @returns TProviderAndSigner\r\n */\r\nexport const parseProviderOrSigner = async (\r\n  providerOrSigner: TEthersProviderOrSigner | undefined\r\n): Promise<TEthersUser> => {\r\n  let signer: Signer | undefined;\r\n  let provider: ethers.providers.Provider | undefined;\r\n  let providerNetwork: ethers.providers.Network | undefined;\r\n\r\n  if (\r\n    providerOrSigner &&\r\n    (providerOrSigner instanceof JsonRpcProvider ||\r\n      providerOrSigner instanceof Web3Provider ||\r\n      providerOrSigner instanceof StaticJsonRpcProvider)\r\n  ) {\r\n    const accounts = await providerOrSigner.listAccounts();\r\n    if (accounts && accounts.length > 0) {\r\n      signer = providerOrSigner.getSigner();\r\n    }\r\n    provider = providerOrSigner;\r\n    providerNetwork = await providerOrSigner.getNetwork();\r\n  }\r\n\r\n  if (!signer && providerOrSigner instanceof Signer) {\r\n    signer = providerOrSigner;\r\n    provider = signer.provider;\r\n    providerNetwork = provider && (await provider.getNetwork());\r\n  }\r\n\r\n  return { signer, provider, providerNetwork } as TEthersUser;\r\n};\r\n"],
  "mappings": "AAUO,GAAM,WAAY,MAAU,IAAe,YAAqE,CACrH,OAAW,KAAK,KACd,GAAI,KAAM,WAAU,GAAI,MAAO,ICZnC,yFACA,2BAcO,GAAM,uBAAwB,KACnC,mBACyB,CACzB,GAAI,QACA,SACA,gBAEJ,GACE,kBACC,4BAA4B,kBAC3B,2BAA4B,eAC5B,2BAA4B,wBAC9B,CACA,GAAM,UAAW,KAAM,kBAAiB,eACxC,AAAI,UAAY,SAAS,OAAS,GAChC,QAAS,iBAAiB,aAE5B,SAAW,iBACX,gBAAkB,KAAM,kBAAiB,aAG3C,MAAI,CAAC,QAAU,2BAA4B,SACzC,QAAS,iBACT,SAAW,OAAO,SAClB,gBAAkB,UAAa,KAAM,UAAS,cAGzC,CAAE,OAAQ,SAAU",
  "names": []
}
