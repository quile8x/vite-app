import { TEthersProvider } from "../models";
/**
 * Options for useOnRepetition
 */
interface IUseOnRepetitionOptions {
    /**
     * (number) :: if >0 use polling, else use instead of onBlock event.  the minimum polling time is 10s.
     */
    pollTime?: number;
    /**
     * (TEthersProvider)
     */
    provider?: TEthersProvider | undefined;
    /**
     * (boolean) :: invoke the callback after initialization
     */
    leadingTrigger?: boolean;
}
/**
 * #### Summary
 * A hook that will periodically invoke a callback.
 * It can use one of the two options to do so
 * - onBlock: the block event is used to invoke callback
 * - Polling: invoke the callback periodically via polling. The minimum time is 10s.
 *
 * #### Notes
 * The callback can be invoked once on leading edge when leadTrigger conditions are satisfied
 * - For example you may want to wait for the provider to initalize before first invocation.
 * - 👩🏽‍🏫 A provider is needed for onBlock.
 *
 * @category Hooks
 *
 * @param callback
 * @param options
 * @param args variable arguments for callback
 */
export declare const useOnRepetition: (callback: (..._args: any[]) => void | Promise<void>, options: IUseOnRepetitionOptions, ...args: any[]) => void;
export {};
//# sourceMappingURL=useOnRepetition.d.ts.map