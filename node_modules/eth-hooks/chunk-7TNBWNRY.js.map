{
  "version": 3,
  "sources": ["../src/functions/ethersHelpers.ts"],
  "sourcesContent": ["import {\r\n  Web3Provider,\r\n  StaticJsonRpcProvider,\r\n  JsonRpcProvider,\r\n  JsonRpcBatchProvider,\r\n  UrlJsonRpcProvider,\r\n  WebSocketProvider,\r\n} from '@ethersproject/providers';\r\nimport { Signer } from 'ethers';\r\n\r\nimport { TEthersProvider } from '~~/models';\r\n\r\n/**\r\n * #### Summary\r\n * Is it a ethers compatable provider\r\n *\r\n * @category Helpers\r\n *\r\n * @param providerBase\r\n * @returns\r\n */\r\nexport const isEthersProvider = (providerBase: unknown): boolean => {\r\n  if (providerBase == null) return false;\r\n  return (\r\n    providerBase instanceof Web3Provider ||\r\n    providerBase instanceof StaticJsonRpcProvider ||\r\n    providerBase instanceof JsonRpcProvider ||\r\n    providerBase instanceof UrlJsonRpcProvider ||\r\n    providerBase instanceof JsonRpcBatchProvider ||\r\n    providerBase instanceof WebSocketProvider\r\n  );\r\n};\r\n\r\nexport const signerHasNetwork = (signer: Signer | undefined): boolean => {\r\n  const provider = signer?.provider as TEthersProvider;\r\n  // eslint-disable-next-line no-underscore-dangle\r\n  if (provider?.network?.chainId > 0 && signer?._isSigner) return true;\r\n\r\n  return false;\r\n};\r\n"],
  "mappings": "AAAA,mJAqBO,GAAM,kBAAmB,AAAC,cAC3B,cAAgB,KAAa,GAE/B,uBAAwB,eACxB,uBAAwB,wBACxB,uBAAwB,kBACxB,uBAAwB,qBACxB,uBAAwB,uBACxB,uBAAwB,mBAIf,iBAAmB,AAAC,QAAwC,CAjCzE,OAkCE,GAAM,UAAW,2BAAQ,SAEzB,MAAI,uCAAU,UAAV,eAAmB,SAAU,GAAK,4BAAQ",
  "names": []
}
