import { TransactionRequest, TransactionResponse } from '@ethersproject/providers';
import { TEthersSigner } from 'eth-hooks/models';
import { Deferrable } from 'ethers/lib/utils';
import { IEthComponentsSettings as IEthComponentsSettings } from '~~/models/EthComponentsSettings';
export declare type TTransactor = (tx: Deferrable<TransactionRequest> | Promise<TransactionResponse>, callback?: ((_param: any) => void) | undefined) => Promise<Record<string, any> | TransactionResponse | undefined>;
/**
 * this should probably just be renamed to "notifier"
 * it is basically just a wrapper around BlockNative's wonderful Notify.js
 * https://docs.blocknative.com/notify
 * @param settings (IEthComponentsContext)
 * @param provider
 * @param gasPrice
 * @param etherscan
 * @returns (transactor) a function to transact which calls a callback method parameter on completion
 */
export declare const transactor: (settings: IEthComponentsSettings, signer: TEthersSigner | undefined, gasPrice?: number | undefined, etherscan?: string | undefined, throwOnError?: boolean) => TTransactor | undefined;
//# sourceMappingURL=transactor.d.ts.map