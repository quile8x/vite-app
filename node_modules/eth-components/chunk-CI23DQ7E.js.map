{
  "version": 3,
  "sources": ["../src/ant/generic-contract/displayUtils.tsx", "../src/ant/Address.tsx", "../src/ant/Account.tsx", "../src/ant/AddressInput.tsx", "../src/ant/Balance.tsx", "../src/ant/Blockie.tsx", "../src/ant/EtherInput.tsx", "../src/ant/Faucet.tsx", "../src/ant/GasGauge.tsx", "../src/ant/PunkBlockie.tsx", "../src/ant/Wallet.tsx", "../src/ant/generic-contract/DisplayVariable.tsx", "../src/ant/generic-contract/FunctionFrom.tsx", "../src/ant/generic-contract/GenericContract.tsx", "../src/ant/generic-contract/NoContractDisplay.tsx"],
  "sourcesContent": ["import { TransactionResponse } from '@ethersproject/providers';\r\nimport { formatUnits } from '@ethersproject/units';\r\nimport { BigNumber } from 'ethers';\r\nimport React, { ReactElement } from 'react';\r\n\r\nimport { Address } from '~~/ant/Address';\r\n\r\nexport const tryToDisplay = (\r\n  thing: string | BigNumber | Record<string, any> | TransactionResponse | undefined\r\n): string | ReactElement | number => {\r\n  if (thing == null) return '';\r\n  if (thing && thing instanceof BigNumber) {\r\n    try {\r\n      return thing.toNumber();\r\n    } catch (e) {\r\n      return '\u039E' + formatUnits(thing, 'ether');\r\n    }\r\n  }\r\n  if (thing && typeof thing === 'string' && thing.indexOf('0x') === 0 && thing.length === 42) {\r\n    return <Address address={thing} fontSize={22} />;\r\n  }\r\n  return JSON.stringify(thing);\r\n};\r\n", "import { StaticJsonRpcProvider } from '@ethersproject/providers';\nimport { Skeleton, Typography } from 'antd';\nimport { useResolveEnsName } from 'eth-hooks/dapps';\nimport React, { FC } from 'react';\nimport Blockies from 'react-blockies';\nimport { useThemeSwitcher } from 'react-css-theme-switcher';\n\nimport { PunkBlockie } from '.';\n\n// changed value={address} to address={address}\n\nconst { Text, Link } = Typography;\n\nconst blockExplorerLink = (address: string, blockExplorer?: string): string =>\n  `${blockExplorer || 'https://etherscan.io/'}${'address/'}${address}`;\n\ninterface IAddressProps {\n  punkBlockie?: boolean;\n  ensProvider?: StaticJsonRpcProvider | undefined;\n  blockExplorer?: string;\n  address: string;\n  fontSize?: number;\n  minimized?: boolean;\n  size?: 'short' | 'long';\n  noLink?: boolean;\n  hideCopy?: boolean;\n  onChange?: () => void;\n}\n\n/**\n * Displays an address with a blockie image and option to copy address\n\n  ~ Features ~\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n * @param props\n * @returns (FC)\n */\nexport const Address: FC<IAddressProps> = ({ minimized = false, punkBlockie = false, size = 'short', ...rest }) => {\n  const props = { ...rest, size, minimized, punkBlockie };\n  const address = props.address;\n  let ensName: string = '';\n  const { currentTheme } = useThemeSwitcher();\n\n  ensName = useResolveEnsName(props.ensProvider, address);\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  const ensSplit = ensName && ensName.split('.');\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === 'eth';\n\n  if (validEnsCheck) {\n    displayAddress = ensName;\n  } else if (props.size === 'short') {\n    displayAddress += '...' + address.substr(-4);\n  } else if (props.size === 'long') {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    if (props.noLink) {\n      return (\n        <span style={{ verticalAlign: 'middle' }}>\n          <span style={{ verticalAlign: 'middle', position: 'relative' }}>\n            <div style={{ position: 'absolute', left: -213, top: -62 }}>\n              <PunkBlockie withQr={false} address={address.toLowerCase()} scale={0.35} />\n            </div>\n          </span>\n        </span>\n      );\n    }\n    return (\n      <span style={{ verticalAlign: 'middle' }}>\n        <a\n          style={{ color: currentTheme === 'light' ? '#222222' : '#ddd' }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\">\n          <span style={{ verticalAlign: 'middle', position: 'relative' }}>\n            <div style={{ position: 'absolute', left: -213, top: -62 }}>\n              <PunkBlockie withQr={false} address={address.toLowerCase()} scale={0.35} />\n            </div>\n          </span>\n        </a>\n      </span>\n    );\n  }\n\n  const copyable = props.hideCopy ? undefined : { text: address };\n\n  const text = (\n    <>\n      <Link\n        style={{ color: currentTheme === 'light' ? '#222222' : '#ddd' }}\n        editable={props.onChange ? { onChange: props.onChange } : false}\n        copyable={copyable}\n        href={etherscanLink}\n        target=\"_blank\">\n        {displayAddress}\n      </Link>\n    </>\n  );\n\n  return (\n    <span style={{ position: 'relative' }}>\n      {props.punkBlockie ? (\n        <span style={{ verticalAlign: 'middle' }}>\n          <div style={{ position: 'absolute', left: -213, top: -62 }}>\n            <PunkBlockie withQr={false} address={address.toLowerCase()} scale={0.4} />\n          </div>\n        </span>\n      ) : (\n        <span style={{ verticalAlign: 'middle' }}>\n          <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n        </span>\n      )}\n      <span style={{ verticalAlign: 'middle', paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n};\n", "import { StaticJsonRpcProvider } from '@ethersproject/providers';\nimport { Button } from 'antd';\nimport { useUserAddress, useBalance } from 'eth-hooks';\nimport { CreateEthersModalConnector, useEthersContext, useBlockNumberContext } from 'eth-hooks/context';\nimport { BigNumber, ethers, Signer } from 'ethers';\nimport React, { FC, useState } from 'react';\nimport { useThemeSwitcher } from 'react-css-theme-switcher';\nimport { useDebounce } from 'use-debounce';\nimport { useIsMounted } from 'usehooks-ts';\n\nimport { Address, Balance, Wallet } from '.';\n\nexport interface IAccountProps {\n  ensProvider: StaticJsonRpcProvider | undefined;\n  localProvider?: StaticJsonRpcProvider | undefined;\n  createLoginConnector?: CreateEthersModalConnector;\n  /**\n   * if hasContextConnect is true, it will not use this variable\n   */\n  signer?: Signer;\n  /**\n   * if hasContextConnect = false, do not use context or context connect/login/logout.  only used passed in address.  defaults={false}\n   */\n  hasContextConnect: boolean;\n  fontSize?: number;\n  blockExplorer: string;\n  price: number;\n}\n\n/**\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n    ~ Features ~\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n * @param props\n * @returns (FC)\n */\nexport const Account: FC<IAccountProps> = (props: IAccountProps) => {\n  const blockNumber = useBlockNumberContext();\n  const ethersContext = useEthersContext();\n  const showLoadModal = !ethersContext.active;\n  const [connecting, setConnecting] = useState(false);\n\n  const isMounted = useIsMounted();\n  const [loadingButton, loadingButtonDebounce] = useDebounce(connecting, 1000, {\n    maxWait: 1500,\n  });\n\n  if (loadingButton && connecting) {\n    setConnecting(false);\n  }\n\n  const address = useUserAddress(props.signer);\n  // if hasContextConnect = false, do not use context or context connect/login/logout.  only used passed in address\n  const [resolvedAddress] = useDebounce<string | undefined>(\n    props.hasContextConnect ? ethersContext.account : address,\n    200,\n    {\n      trailing: true,\n    }\n  );\n\n  const [resolvedSigner] = useDebounce<Signer | undefined>(\n    props.hasContextConnect ? ethersContext.signer : props.signer,\n    200,\n    {\n      trailing: true,\n    }\n  );\n\n\n  const handleLoginClick = (): void => {\n    if (props.createLoginConnector != null) {\n      const connector = props.createLoginConnector?.();\n      if (!isMounted()) {\n        console.log('openModal: no longer mounted');\n      } else if (connector) {\n        setConnecting(true);\n        ethersContext.openModal(connector);\n      } else {\n        console.warn('openModal: A valid EthersModalConnector was not provided');\n      }\n    }\n  };\n\n  const loadModalButton = (\n    <>\n      {showLoadModal && props.createLoginConnector && (\n        <Button\n          loading={loadingButtonDebounce.isPending()}\n          key=\"loginbutton\"\n          style={{ verticalAlign: 'top', marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={handleLoginClick}>\n          connect\n        </Button>\n      )}\n    </>\n  );\n\n  const logoutButton = (\n    <>\n      {!showLoadModal && props.createLoginConnector && (\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: 'top', marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={ethersContext.disconnectModal}>\n          logout\n        </Button>\n      )}\n    </>\n  );\n\n  const { currentTheme } = useThemeSwitcher();\n\n  const display = (\n    <span>\n      {resolvedAddress != null && (\n        <>\n          <Address\n            punkBlockie\n            address={resolvedAddress}\n            fontSize={props.fontSize}\n            ensProvider={props.ensProvider}\n            blockExplorer={props.blockExplorer}\n            minimized={false}\n          />\n          <Balance address={resolvedAddress} price={props.price} />\n          {resolvedSigner && (\n            <Wallet\n              signer={resolvedSigner}\n              ensProvider={props.ensProvider}\n              localProvider={props.localProvider}\n              price={props.price}\n              color={currentTheme === 'light' ? '#1890ff' : '#2caad9'}\n            />\n          )}\n        </>\n      )}\n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {props.hasContextConnect && (\n        <>\n          {loadModalButton}\n          {logoutButton}\n        </>\n      )}\n    </div>\n  );\n};\n", "import { CameraOutlined, QrcodeOutlined } from '@ant-design/icons';\r\nimport { StaticJsonRpcProvider } from '@ethersproject/providers';\r\nimport { Badge, Input } from 'antd';\r\nimport { useResolveEnsName } from 'eth-hooks/dapps';\r\nimport React, { Dispatch, FC, SetStateAction, useCallback, useState } from 'react';\r\nimport QrReader from 'react-qr-reader';\r\n\r\nimport { Blockie } from '.';\r\n\r\ninterface IAddressInputProps {\r\n  autoFocus?: boolean;\r\n  ensProvider: StaticJsonRpcProvider | undefined;\r\n  placeholder?: string;\r\n  address: string | undefined;\r\n  onChange?: Dispatch<SetStateAction<string>>;\r\n  hideScanner?: boolean;\r\n}\r\n\r\n/**\r\n * Displays an address input with QR scan option\r\n  ~ Features ~\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide placeholder=\"Enter address\" value for the input\r\n  - Value of the address input is stored in value={toAddress}\r\n  - Control input change by onChange={setToAddress}\r\n                          or onChange={address => { setToAddress(address);}}\r\n * @param props \r\n * @returns  (FC)\r\n */\r\nexport const AddressInput: FC<IAddressInputProps> = (props) => {\r\n  const [scan, setScan] = useState(false);\r\n\r\n  const ensName = useResolveEnsName(props.ensProvider, props.address ?? '');\r\n\r\n  const scannerButton = (\r\n    <div\r\n      style={{ marginTop: 4, cursor: 'pointer' }}\r\n      onClick={(): void => {\r\n        setScan(!scan);\r\n      }}>\r\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\r\n        <QrcodeOutlined style={{ fontSize: 18 }} />\r\n      </Badge>{' '}\r\n      Scan\r\n    </div>\r\n  );\r\n\r\n  const updateAddress = useCallback(\r\n    async (newValue: string) => {\r\n      if (newValue != null) {\r\n        let address = newValue;\r\n        if (address.indexOf('.eth') > 0 || address.indexOf('.xyz') > 0) {\r\n          try {\r\n            const possibleAddress = await props.ensProvider?.resolveName?.(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        if (props.onChange) {\r\n          props.onChange(address);\r\n        }\r\n      }\r\n    },\r\n    [props.ensProvider, props.onChange]\r\n  );\r\n\r\n  const scanner = scan ? (\r\n    <div\r\n      style={{\r\n        zIndex: 256,\r\n        position: 'absolute',\r\n        left: 0,\r\n        top: 0,\r\n        width: '100%',\r\n      }}\r\n      onClick={(): void => {\r\n        setScan(false);\r\n      }}>\r\n      <QrReader\r\n        delay={250}\r\n        resolution={1200}\r\n        onError={(e: Error): void => {\r\n          console.log('SCAN ERROR', e);\r\n          setScan(false);\r\n        }}\r\n        onScan={(newValue: string | null): void => {\r\n          if (newValue) {\r\n            console.log('SCAN VALUE', newValue);\r\n            let possibleNewValue = newValue;\r\n            if (possibleNewValue.indexOf('/') >= 0) {\r\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf('0x'));\r\n              console.log('CLEANED VALUE', possibleNewValue);\r\n            }\r\n            setScan(false);\r\n            void updateAddress(possibleNewValue);\r\n          }\r\n        }}\r\n        style={{ width: '100%' }}\r\n      />\r\n    </div>\r\n  ) : (\r\n    ''\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {scanner}\r\n      <Input\r\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\r\n        autoComplete=\"off\"\r\n        autoFocus={props.autoFocus}\r\n        placeholder={props.placeholder ? props.placeholder : 'address'}\r\n        prefix={<Blockie address={props.address ?? ''} scale={3} />}\r\n        value={ensName || props.address}\r\n        addonAfter={scannerButton}\r\n        onChange={(e): void => {\r\n          void updateAddress(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n", "import { formatEther } from '@ethersproject/units';\nimport { useBalance } from 'eth-hooks';\nimport { BigNumber } from 'ethers';\nimport React, { FC, useState } from 'react';\n\ninterface IBalanceProps {\n  address: string | undefined;\n  price?: number;\n  balance?: BigNumber;\n  dollarMultiplier?: number;\n  size?: 'short' | 'long';\n}\n\n/**\n * Displays a balance of given address in ether & dollar\n *\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n * @param props\n * @returns (FC)\n */\nexport const Balance: FC<IBalanceProps> = (props) => {\n  const [dollarMode, setDollarMode] = useState(true);\n  const balance = useBalance(props.address);\n\n  let resolvedBalance = BigNumber.from(balance);\n  if (props.balance != null) {\n    resolvedBalance = BigNumber.from(props.balance);\n  }\n\n  let floatBalance = parseFloat('0.00');\n  if (resolvedBalance) {\n    const etherBalance = formatEther(resolvedBalance);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let display = floatBalance.toFixed(4);\n  const price = props.price ?? props.dollarMultiplier;\n  if (price && dollarMode) {\n    display = '$' + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: 'middle',\n        fontSize: props.size ?? 24,\n        padding: 8,\n        cursor: 'pointer',\n      }}\n      onClick={(): void => {\n        setDollarMode(!dollarMode);\n      }}>\n      {display}\n    </span>\n  );\n};\n", "import React, { FC } from 'react';\r\nimport Blockies from 'react-blockies';\r\n\r\n// provides a blockie image for the address using \"react-blockies\" library\r\n\r\ninterface IBlockieProps {\r\n  address: string;\r\n  scale: number;\r\n}\r\n\r\n/**\r\n * Show a blockie (bar code profile icon) component for an public address\r\n * @param props\r\n * @returns (FC)\r\n */\r\nexport const Blockie: FC<IBlockieProps> = (props) => {\r\n  if (!props.address || typeof props.address.toLowerCase !== 'function') {\r\n    return <span />;\r\n  }\r\n  // eslint-disable-next-line react/jsx-props-no-spreading\r\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\r\n};\r\n", "import { Input } from 'antd';\r\nimport React, { FC, ReactNode, useEffect, useState } from 'react';\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n*/\r\n\r\ninterface IEtherInputProps {\r\n  autoFocus?: boolean;\r\n  price: number | undefined;\r\n  value: string;\r\n  placeholder?: string;\r\n  onChange: (value: string) => void;\r\n}\r\n\r\n/**\r\n * Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n * @param props\r\n * @returns (FC)\r\n */\r\nexport const EtherInput: FC<IEtherInputProps> = (props) => {\r\n  const [mode, setMode] = useState(props.price ? 'USD' : 'ETH');\r\n  const [display, setDisplay] = useState<string>();\r\n  const [value, setValue] = useState<string>();\r\n\r\n  const currentValue: string | undefined = props.value ? props.value : value;\r\n\r\n  const option = (title: string): ReactNode => {\r\n    if (props?.price != null) {\r\n      return <></>;\r\n    }\r\n    return (\r\n      <div\r\n        style={{ cursor: 'pointer' }}\r\n        onClick={(): void => {\r\n          if (mode === 'USD') {\r\n            setMode('ETH');\r\n            setDisplay(currentValue);\r\n          } else {\r\n            setMode('USD');\r\n            if (currentValue) {\r\n              const usdValue = '' + (parseFloat(currentValue) * props.price!).toFixed(2);\r\n              setDisplay(usdValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}>\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let prefix;\r\n  let addonAfter;\r\n  if (mode === 'USD') {\r\n    prefix = '$';\r\n    addonAfter = option('USD \uD83D\uDD00');\r\n  } else {\r\n    prefix = '\u039E';\r\n    addonAfter = option('ETH \uD83D\uDD00');\r\n  }\r\n\r\n  useEffect((): void => {\r\n    if (!currentValue) {\r\n      setDisplay('');\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : 'amount in ' + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={prefix}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={(e): void => {\r\n        const newValue = e.target.value;\r\n        if (mode === 'USD') {\r\n          const possibleNewValue = parseFloat(newValue);\r\n          if (possibleNewValue) {\r\n            const ethValue = possibleNewValue / (props.price ?? 1);\r\n            setValue(ethValue.toString());\r\n            if (typeof props.onChange === 'function') {\r\n              props.onChange(ethValue.toString());\r\n            }\r\n            setDisplay(newValue);\r\n          } else {\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === 'function') {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n", "import { SendOutlined } from '@ant-design/icons';\r\nimport { StaticJsonRpcProvider } from '@ethersproject/providers';\r\nimport { parseEther } from '@ethersproject/units';\r\nimport { Button, Input, Tooltip } from 'antd';\r\nimport { useResolveEnsAddress } from 'eth-hooks/dapps';\r\nimport { ethers } from 'ethers';\r\nimport React, { FC, useCallback, useContext, useState } from 'react';\r\nimport Blockies from 'react-blockies';\r\n\r\nimport { Wallet } from '.';\r\n\r\nimport { transactor } from '~~/functions';\r\nimport { EthComponentsSettingsContext } from '~~/models';\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\ninterface IFaucetProps {\r\n  faucetAddress?: string;\r\n  price: number;\r\n  mainnetProvider: StaticJsonRpcProvider;\r\n  placeholder?: string;\r\n  localProvider: StaticJsonRpcProvider;\r\n}\r\n\r\n/**\r\n * Displays a local faucet to send ETH to given address, also wallet is provided\r\n * \r\n * ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n * @param props \r\n * @returns (FC)\r\n */\r\nexport const Faucet: FC<IFaucetProps> = (props) => {\r\n  const [recipient, setRecipient] = useState<string>('');\r\n  const context = useContext(EthComponentsSettingsContext);\r\n\r\n  let blockie;\r\n  if (props.faucetAddress && typeof props.faucetAddress.toLowerCase === 'function') {\r\n    blockie = <Blockies seed={props.faucetAddress.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  const updateAddress = useCallback((newValue: string) => {\r\n    if (newValue != null) {\r\n      // const result = '';\r\n      // try {\r\n      //   if (newValue.indexOf('.eth') > 0 || newValue.indexOf('.xyz') > 0) {\r\n      //     const possibleName = await props.mainnetProvider.resolveName(newValue);\r\n      //     if (!!possibleName) {\r\n      //       result = possibleName;\r\n      //     }\r\n      //   } else {\r\n      //     result = newValue;\r\n      //   }\r\n      // } catch (e) {\r\n      //   result = newValue;\r\n      // }\r\n\r\n      setRecipient(newValue);\r\n    }\r\n  }, []);\r\n\r\n  const resolvedAddress = useResolveEnsAddress(props.mainnetProvider, recipient ?? '');\r\n  const toAddress = ethers.utils.isAddress(recipient) ? recipient : resolvedAddress;\r\n  const localSigner = props.localProvider.getSigner();\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        size=\"large\"\r\n        placeholder={props.placeholder ? props.placeholder : 'local faucet'}\r\n        prefix={blockie}\r\n        // value={address}\r\n        value={recipient}\r\n        onChange={(e): void => {\r\n          // setAddress(e.target.value);\r\n          void updateAddress(e.target.value);\r\n        }}\r\n        suffix={\r\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\r\n            <Button\r\n              onClick={(): void => {\r\n                if (localSigner && context && ethers.utils.isAddress(toAddress)) {\r\n                  const tx = transactor(context, localSigner);\r\n\r\n                  if (tx && !!recipient) {\r\n                    void tx({\r\n                      to: toAddress,\r\n                      value: parseEther('0.01'),\r\n                    }).then(() => {\r\n                      setRecipient('');\r\n                    });\r\n                  }\r\n                } else {\r\n                  console.warn('Faucet: invalid address');\r\n                }\r\n              }}\r\n              shape=\"circle\"\r\n              icon={<SendOutlined />}\r\n            />\r\n            <Wallet\r\n              color=\"#888888\"\r\n              signer={localSigner}\r\n              localProvider={props.localProvider}\r\n              ensProvider={props.mainnetProvider}\r\n              price={props.price}\r\n            />\r\n          </Tooltip>\r\n        }\r\n      />\r\n    </span>\r\n  );\r\n};\r\n", "import { Button } from 'antd';\r\nimport { TGasStationSpeed, useGasPrice } from 'eth-hooks';\r\nimport { TEthersProvider, TNetworkInfo } from 'eth-hooks/models';\r\nimport React, { FC } from 'react';\r\n\r\ninterface IGasGaugeProps {\r\n  chainId: number | undefined;\r\n  speed: TGasStationSpeed;\r\n  provider: TEthersProvider | undefined;\r\n  currentNetwork?: TNetworkInfo;\r\n}\r\n\r\n/**\r\n * Displays gas gauge.  Defaults to mainnet and uses gastation get get data.  You can also provide the data\r\n * @param props\r\n * @returns\r\n */\r\nexport const GasGauge: FC<IGasGaugeProps> = (props) => {\r\n  const gasPrice = useGasPrice(props.chainId, props.speed, props.currentNetwork);\r\n\r\n  return (\r\n    <Button\r\n      onClick={(): void => {\r\n        window.open('https://ethgasstation.info/');\r\n      }}\r\n      size=\"large\"\r\n      shape=\"round\">\r\n      <span style={{ marginRight: 8 }}>\r\n        <span role=\"img\" aria-label=\"fuelpump\">\r\n          \u26FD\uFE0F\r\n        </span>\r\n      </span>\r\n      {gasPrice ?? '\u2753'}\r\n    </Button>\r\n  );\r\n};\r\n", "import { message, Typography } from 'antd';\r\nimport QR from 'qrcode.react';\r\nimport React, { useState, useEffect, FC } from 'react';\r\n\r\nimport { Blockie } from '.';\r\n\r\nconst { Text } = Typography;\r\n\r\ninterface IWindowSize {\r\n  width: number | undefined;\r\n  height: number | undefined;\r\n}\r\n\r\nconst useWindowSize = (): IWindowSize => {\r\n  const isClient = typeof window === 'object';\r\n\r\n  function getSize(): IWindowSize {\r\n    return {\r\n      width: isClient ? window.innerWidth : undefined,\r\n      height: isClient ? window.innerHeight : undefined,\r\n    };\r\n  }\r\n\r\n  const [windowSize, setWindowSize] = useState(getSize);\r\n\r\n  useEffect((): (() => void) => {\r\n    const handleResize = (): void => {\r\n      setWindowSize(getSize());\r\n    };\r\n\r\n    if (isClient) {\r\n      window.addEventListener('resize', handleResize);\r\n    }\r\n    return (): void => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return windowSize;\r\n};\r\n\r\ninterface IPunkBlockie {\r\n  address: string;\r\n  withQr: boolean;\r\n  scale?: number;\r\n}\r\n\r\n/**\r\n * Show a punk blockie (crypto punk profile icon) component for an public address\r\n * @param props\r\n * @returns  (FC)\r\n */\r\nexport const PunkBlockie: FC<IPunkBlockie> = (props) => {\r\n  const size = useWindowSize();\r\n  if (!size.width) size.width = 100;\r\n  if (!size.height) size.height = 100;\r\n  const minSize = 360;\r\n  let qrWidth;\r\n  if (size.width && size.width / 3 < minSize) {\r\n    qrWidth = minSize;\r\n  } else {\r\n    qrWidth = size.width ?? minSize / 3;\r\n  }\r\n\r\n  const scale = props.scale ?? Math.min(size.height - 130, size.width, 1024) / (qrWidth * 1);\r\n\r\n  const offset = 0.42;\r\n\r\n  const url = window.location.href + '';\r\n\r\n  const hardcodedSizeForNow = 380;\r\n\r\n  const punkSize = 112;\r\n\r\n  const part1 = props.address && props.address.substr(2, 20);\r\n  const part2 = props.address && props.address.substr(22);\r\n  const x = parseInt(part1, 16) % 100;\r\n  const y = parseInt(part2, 16) % 100;\r\n\r\n  // console.log(\"window.location\",window.location)\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        transform: `scale(${props.scale ? props.scale : '1'})`,\r\n        transformOrigin: '50% 50%',\r\n        margin: 'auto',\r\n        position: 'relative',\r\n        width: hardcodedSizeForNow,\r\n      }}\r\n      onClick={(): void => {\r\n        const el = document.createElement('textarea');\r\n        el.value = props.address;\r\n        document.body.appendChild(el);\r\n        el.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(el);\r\n        const iconPunkSize = 40;\r\n        void message.success(\r\n          <span style={{ position: 'relative' }}>\r\n            Copied Address\r\n            <div style={{ position: 'absolute', left: -60, top: -14 }}>\r\n              <div style={{ position: 'relative', width: iconPunkSize, height: iconPunkSize - 1, overflow: 'hidden' }}>\r\n                <img\r\n                  src=\"/punks.png\"\r\n                  style={{\r\n                    position: 'absolute',\r\n                    left: -iconPunkSize * x,\r\n                    top: -iconPunkSize * y,\r\n                    width: iconPunkSize * 100,\r\n                    height: iconPunkSize * 100,\r\n                    imageRendering: 'pixelated',\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </span>\r\n        );\r\n      }}>\r\n      <div\r\n        style={{\r\n          position: 'absolute',\r\n          opacity: 0.5,\r\n          left: hardcodedSizeForNow / 2 - 46,\r\n          top: hardcodedSizeForNow / 2 - 46,\r\n        }}>\r\n        <Blockie address={props.address} scale={11.5} />\r\n      </div>\r\n\r\n      <div style={{ position: 'absolute', left: hardcodedSizeForNow / 2 - 53, top: hardcodedSizeForNow / 2 - 65 }}>\r\n        <div style={{ position: 'relative', width: punkSize, height: punkSize - 1, overflow: 'hidden' }}>\r\n          <img\r\n            src=\"/punks.png\"\r\n            style={{\r\n              position: 'absolute',\r\n              left: -punkSize * x,\r\n              top: -punkSize * y - 1,\r\n              width: punkSize * 100,\r\n              height: punkSize * 100,\r\n              imageRendering: 'pixelated',\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {props.withQr ? (\r\n        <QR\r\n          level=\"H\"\r\n          includeMargin={false}\r\n          // ethereum:0x34aA3F359A9D614239015126635CE7732c18fDF3\r\n          value={props.address ? 'ethereum:' + props.address : ''}\r\n          size={hardcodedSizeForNow}\r\n          imageSettings={{ width: 105, height: 105, excavate: true, src: 'qr' }}\r\n        />\r\n      ) : (\r\n        ''\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n", "/* eslint-disable @typescript-eslint/restrict-plus-operands */\r\nimport { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from '@ant-design/icons';\r\nimport { StaticJsonRpcProvider } from '@ethersproject/providers';\r\nimport { parseEther } from '@ethersproject/units';\r\nimport { Button, Modal, Spin, Tooltip, Typography } from 'antd';\r\nimport { useBurnerSigner, useUserAddress } from 'eth-hooks';\r\nimport { TEthersSigner } from 'eth-hooks/models';\r\nimport { BytesLike } from 'ethers';\r\nimport QR from 'qrcode.react';\r\nimport React, { FC, useContext, useState } from 'react';\r\n\r\nimport { Address, AddressInput, Balance, EtherInput } from '.';\r\n\r\nimport { transactor } from '~~/functions';\r\nimport { EthComponentsSettingsContext } from '~~/models';\r\n\r\nconst { Text, Paragraph } = Typography;\r\n\r\ninterface IWalletProps {\r\n  signer: TEthersSigner | undefined;\r\n  ensProvider: StaticJsonRpcProvider | undefined;\r\n  localProvider: StaticJsonRpcProvider | undefined;\r\n  price: number;\r\n  color: string;\r\n}\r\n\r\n/**\r\n *   Displays a wallet where you can specify address and send USD/ETH, with options to\r\n  scan address, to convert between USD and ETH, to see and generate private keys,\r\n  to send, receive and extract the burner wallet\r\n  ~ Features ~\r\n\r\n  - Provide provider={userProvider} to display a wallet\r\n  - Provide address={address} if you want to specify address, otherwise\r\n                                                    your default address will be used\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide color to specify the color of wallet icon\r\n * @param props \r\n * @returns (FC)\r\n */\r\nexport const Wallet: FC<IWalletProps> = (props: IWalletProps) => {\r\n  const burner = useBurnerSigner(props.localProvider);\r\n\r\n  const account = useUserAddress(props.signer);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [qr, setQr] = useState<string>();\r\n  const [amount, setAmount] = useState<string>('');\r\n  const [toAddress, setToAddress] = useState<string>('');\r\n  const [publicKey, setPublicKey] = useState<BytesLike>();\r\n\r\n  const context = useContext(EthComponentsSettingsContext);\r\n\r\n  const providerSend = props.signer ? (\r\n    <Tooltip title=\"Wallet\">\r\n      <WalletOutlined\r\n        onClick={(): void => {\r\n          setOpen(!open);\r\n        }}\r\n        rotate={-90}\r\n        style={{\r\n          padding: 7,\r\n          color: props.color ? props.color : '',\r\n          cursor: 'pointer',\r\n          fontSize: 28,\r\n          verticalAlign: 'middle',\r\n        }}\r\n      />\r\n    </Tooltip>\r\n  ) : (\r\n    <></>\r\n  );\r\n\r\n  let display;\r\n  let receiveButton;\r\n  let privateKeyButton;\r\n  if (qr) {\r\n    display = (\r\n      <div>\r\n        <div>\r\n          <Text copyable>{account}</Text>\r\n        </div>\r\n        <QR\r\n          value={account ?? ''}\r\n          size={450}\r\n          level=\"H\"\r\n          includeMargin\r\n          renderAs=\"svg\"\r\n          imageSettings={{ excavate: false, src: 'copy' }}\r\n        />\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={(): void => {\r\n          setQr('');\r\n        }}>\r\n        <QrcodeOutlined /> Hide\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={(): void => {\r\n          setPublicKey(account);\r\n          setQr('');\r\n        }}>\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  } else if (publicKey) {\r\n    if (props.signer == null || account == null) {\r\n      display = (\r\n        <div>\r\n          <b>*initalizing*</b>\r\n        </div>\r\n      );\r\n    }\r\n    if (burner.account == null) {\r\n      display = (\r\n        <div>\r\n          <b>*unknown*, burner signer not initalized</b>\r\n        </div>\r\n      );\r\n    } else if (burner.account !== account) {\r\n      display = (\r\n        <div>\r\n          <b>*injected account*, burner private key unknown</b>\r\n        </div>\r\n      );\r\n    } else {\r\n      const burnerPrivateKey: BytesLike = burner.getBurnerPrivateKey() ?? '';\r\n\r\n      display = (\r\n        <div>\r\n          <b>Private Key:</b>\r\n\r\n          <div>\r\n            <Text copyable>{burnerPrivateKey}</Text>\r\n          </div>\r\n\r\n          <hr />\r\n\r\n          <i>\r\n            Point your camera phone at qr code to open in\r\n            <a target=\"_blank\" href={'https://xdai.io/' + burnerPrivateKey} rel=\"noopener noreferrer\">\r\n              burner wallet\r\n            </a>\r\n            :\r\n          </i>\r\n          <QR\r\n            value={'https://xdai.io/' + burnerPrivateKey}\r\n            size={450}\r\n            level=\"H\"\r\n            includeMargin\r\n            renderAs=\"svg\"\r\n            imageSettings={{ excavate: false, src: 'dai' }}\r\n          />\r\n\r\n          <Paragraph style={{ fontSize: '16' }} copyable>\r\n            {'https://xdai.io/' + burnerPrivateKey}\r\n          </Paragraph>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={(): void => {\r\n          setQr(account);\r\n          setPublicKey('');\r\n        }}>\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={(): void => {\r\n          setPublicKey('');\r\n          setQr('');\r\n        }}>\r\n        <KeyOutlined /> Hide\r\n      </Button>\r\n    );\r\n  } else {\r\n    const inputStyle = {\r\n      padding: 10,\r\n    };\r\n\r\n    display = (\r\n      <div>\r\n        <div style={inputStyle}>\r\n          <AddressInput\r\n            autoFocus\r\n            ensProvider={props.ensProvider}\r\n            placeholder=\"to address\"\r\n            address={toAddress}\r\n            onChange={setToAddress}\r\n          />\r\n        </div>\r\n        <div style={inputStyle}>\r\n          <EtherInput\r\n            price={props.price}\r\n            value={amount}\r\n            onChange={(value: string): void => {\r\n              setAmount(value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n    receiveButton = (\r\n      <Button\r\n        key=\"receive\"\r\n        onClick={(): void => {\r\n          setQr(account);\r\n          setPublicKey('');\r\n        }}>\r\n        <QrcodeOutlined /> Receive\r\n      </Button>\r\n    );\r\n    privateKeyButton = (\r\n      <Button\r\n        key=\"hide\"\r\n        onClick={(): void => {\r\n          setPublicKey(account);\r\n          setQr('');\r\n        }}>\r\n        <KeyOutlined /> Private Key\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  const disableSend = amount == null || toAddress == null || (qr != null && qr !== '');\r\n\r\n  return (\r\n    <span>\r\n      {providerSend}\r\n      <Modal\r\n        visible={open}\r\n        title={\r\n          <div>\r\n            {account ? <Address address={account} ensProvider={props.ensProvider} /> : <Spin />}\r\n            <div style={{ float: 'right', paddingRight: 25 }}>\r\n              <Balance address={account} dollarMultiplier={props.price} />\r\n            </div>\r\n          </div>\r\n        }\r\n        onOk={(): void => {\r\n          setQr('');\r\n          setPublicKey('');\r\n          setOpen(!open);\r\n        }}\r\n        onCancel={(): void => {\r\n          setQr('');\r\n          setPublicKey('');\r\n          setOpen(!open);\r\n        }}\r\n        footer={[\r\n          privateKeyButton,\r\n          receiveButton,\r\n          <Button\r\n            key=\"submit\"\r\n            type=\"primary\"\r\n            disabled={disableSend}\r\n            loading={false}\r\n            onClick={(): void => {\r\n              const tx = transactor(context, props.signer);\r\n\r\n              let value;\r\n              try {\r\n                value = parseEther('' + amount);\r\n              } catch (e) {\r\n                // failed to parseEther, try something else\r\n                value = parseEther('' + parseFloat(amount).toFixed(8));\r\n              }\r\n\r\n              void tx?.({\r\n                to: toAddress,\r\n                value,\r\n              });\r\n\r\n              setOpen(!open);\r\n              setQr('');\r\n            }}>\r\n            <SendOutlined /> Send\r\n          </Button>,\r\n        ]}>\r\n        {display}\r\n      </Modal>\r\n    </span>\r\n  );\r\n};\r\n", "import { Col, Divider, Row } from 'antd';\r\nimport { ContractFunction } from 'ethers';\r\nimport { FunctionFragment } from 'ethers/lib/utils';\r\nimport React, { FC, SetStateAction, useCallback, useEffect, useState, Dispatch } from 'react';\r\nimport { useIsMounted } from 'usehooks-ts';\r\n\r\nimport { tryToDisplay } from './displayUtils';\r\n\r\ninterface IDisplayVariableProps {\r\n  contractFunction: ContractFunction | undefined;\r\n  functionInfo: FunctionFragment;\r\n  refreshRequired: boolean;\r\n  setTriggerRefresh: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nexport const DisplayVariable: FC<IDisplayVariableProps> = (props) => {\r\n  const [variable, setVariable] = useState('');\r\n  const isMounted = useIsMounted();\r\n\r\n  const refresh = useCallback(async () => {\r\n    try {\r\n      if (props.contractFunction) {\r\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n        const result = await props.contractFunction();\r\n\r\n        if (isMounted()) {\r\n          setVariable(result);\r\n          props.setTriggerRefresh(false);\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, [props, isMounted]);\r\n\r\n  useEffect((): void => {\r\n    void refresh();\r\n  }, [refresh, props.refreshRequired, props.contractFunction]);\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: 'right',\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}>\r\n          {props.functionInfo.name}\r\n        </Col>\r\n        <Col span={14}>\r\n          <h2>{tryToDisplay(variable)}</h2>\r\n        </Col>\r\n        <Col span={2}>\r\n          <h2>\r\n            <a href=\"#\" onClick={refresh}>\r\n              \uD83D\uDD04\r\n            </a>\r\n          </h2>\r\n        </Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayVariable;\r\n", "import { BigNumber } from '@ethersproject/bignumber';\r\nimport { Button, Col, Divider, Input, Row, Tooltip } from 'antd';\r\nimport { useEthersContext } from 'eth-hooks/context';\r\nimport { ContractFunction, utils } from 'ethers';\r\nimport { FunctionFragment } from 'ethers/lib/utils';\r\nimport React, { Dispatch, ReactElement, SetStateAction, useState, FC, useContext } from 'react';\r\nimport Blockies from 'react-blockies';\r\n\r\nimport { tryToDisplay } from './displayUtils';\r\n\r\nimport { transactor } from '~~/functions';\r\nimport { EthComponentsSettingsContext } from '~~/models';\r\n\r\nconst getFunctionInputKey = (functionInfo: FunctionFragment, input: utils.ParamType, inputIndex: number): string => {\r\n  const name = input?.name ? input.name : `input_${inputIndex}_`;\r\n  return functionInfo.name + '_' + name + '_' + input.type;\r\n};\r\n\r\ninterface IFunctionForm {\r\n  contractFunction: ContractFunction;\r\n  functionFragment: FunctionFragment;\r\n  gasPrice: number;\r\n  setTriggerRefresh: Dispatch<SetStateAction<boolean>>;\r\n}\r\n\r\nexport const FunctionForm: FC<IFunctionForm> = (props) => {\r\n  const [form, setForm] = useState<Record<string, any>>({});\r\n  const [txValue, setTxValue] = useState<string>('');\r\n  const [returnValue, setReturnValue] = useState<string | ReactElement | number | undefined>();\r\n\r\n  const ethersContext = useEthersContext();\r\n  const ethComponentsSettings = useContext(EthComponentsSettingsContext);\r\n\r\n  const inputs = props.functionFragment.inputs.map((input, inputIndex) => {\r\n    const key = getFunctionInputKey(props.functionFragment, input, inputIndex);\r\n    let buttons: ReactElement = <></>;\r\n    if (input.type === 'bytes32') {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to bytes32\">\r\n          <div\r\n            // type=\"dashed\"\r\n            style={{ cursor: 'pointer' }}\r\n            onClick={(): void => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.parseBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.formatBytes32String(form[key]);\r\n                setForm(formUpdate);\r\n              }\r\n            }}>\r\n            #\uFE0F\u20E3\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === 'bytes') {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"to hex\">\r\n          <div\r\n            // type=\"dashed\"\r\n            style={{ cursor: 'pointer' }}\r\n            onClick={(): void => {\r\n              if (utils.isHexString(form[key])) {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.toUtf8String(form[key]);\r\n                setForm(formUpdate);\r\n              } else {\r\n                const formUpdate = { ...form };\r\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\r\n                setForm(formUpdate);\r\n              }\r\n            }}>\r\n            #\uFE0F\u20E3\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === 'uint256') {\r\n      buttons = (\r\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\r\n          <div\r\n            // type=\"dashed\"\r\n            style={{ cursor: 'pointer' }}\r\n            onClick={(): void => {\r\n              const formUpdate = { ...form };\r\n              formUpdate[key] = utils.parseEther(form[key]);\r\n              setForm(formUpdate);\r\n            }}>\r\n            \u2734\uFE0F\r\n          </div>\r\n        </Tooltip>\r\n      );\r\n    } else if (input.type === 'address') {\r\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\r\n      if (possibleAddress && possibleAddress.length === 42) {\r\n        buttons = (\r\n          <Tooltip placement=\"right\" title=\"blockie\">\r\n            <Blockies seed={possibleAddress} scale={3} />\r\n          </Tooltip>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div style={{ margin: 2 }} key={key}>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder={input.name ? input.type + ' ' + input.name : input.type}\r\n          autoComplete=\"off\"\r\n          value={form[key]}\r\n          name={key}\r\n          onChange={(event): void => {\r\n            const formUpdate = { ...form };\r\n            formUpdate[event.target.name] = event.target.value;\r\n            setForm(formUpdate);\r\n          }}\r\n          suffix={buttons}\r\n        />\r\n      </div>\r\n    );\r\n  });\r\n\r\n  const txValueInput = (\r\n    <div style={{ margin: 2 }} key=\"txValueInput\">\r\n      <Input\r\n        placeholder=\"transaction value\"\r\n        onChange={(e): void => setTxValue(e.target.value)}\r\n        value={txValue}\r\n        addonAfter={\r\n          <div>\r\n            <Row>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\r\n                  <div\r\n                    // type=\"dashed\"\r\n                    style={{ cursor: 'pointer' }}\r\n                    onClick={(): void => {\r\n                      const floatValue = parseFloat(txValue);\r\n                      if (floatValue) setTxValue(`${floatValue * 10 ** 18}`);\r\n                    }}>\r\n                    \u2733\uFE0F\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n              <Col span={16}>\r\n                <Tooltip placement=\"right\" title=\"number to hex\">\r\n                  <div\r\n                    // type=\"dashed\"\r\n                    style={{ cursor: 'pointer' }}\r\n                    onClick={(): void => {\r\n                      setTxValue(BigNumber.from(txValue).toHexString());\r\n                    }}>\r\n                    #\uFE0F\u20E3\r\n                  </div>\r\n                </Tooltip>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  if (props.functionFragment.payable) {\r\n    inputs.push(txValueInput);\r\n  }\r\n\r\n  const buttonIcon =\r\n    props.functionFragment.type === 'call' ? (\r\n      <Button style={{ marginLeft: -32 }}>Read\uD83D\uDCE1</Button>\r\n    ) : (\r\n      <Button style={{ marginLeft: -32 }}>Send\uD83D\uDCB8</Button>\r\n    );\r\n\r\n  inputs.push(\r\n    <div style={{ cursor: 'pointer', margin: 2 }} key=\"goButton\">\r\n      <Input\r\n        onChange={(e): void => setReturnValue(e.target.value)}\r\n        defaultValue=\"\"\r\n        bordered={false}\r\n        disabled\r\n        value={returnValue as any}\r\n        suffix={\r\n          <div\r\n            style={{ width: 50, height: 30, margin: 0 }}\r\n            // type=\"default\"\r\n            onClick={async (): Promise<any> => {\r\n              const args = props.functionFragment.inputs.map((input, inputIndex) => {\r\n                const key = getFunctionInputKey(props.functionFragment, input, inputIndex);\r\n                let value = form[key];\r\n                if (input.baseType === 'array') {\r\n                  value = JSON.parse(value);\r\n                } else if (input.type === 'bool') {\r\n                  if (value === 'true' || value === '1' || value === '0x1' || value === '0x01' || value === '0x0001') {\r\n                    value = 1;\r\n                  } else {\r\n                    value = 0;\r\n                  }\r\n                }\r\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n                return value;\r\n              });\r\n\r\n              let result: string | ReactElement | number | undefined = undefined;\r\n              if (\r\n                props.functionFragment.stateMutability === 'view' ||\r\n                props.functionFragment.stateMutability === 'pure'\r\n              ) {\r\n                try {\r\n                  const returned = await props.contractFunction(...args);\r\n                  result = tryToDisplay(returned);\r\n                } catch (err) {\r\n                  console.error(err);\r\n                }\r\n              } else {\r\n                const overrides: Record<string, any> = {};\r\n                if (txValue) {\r\n                  overrides.value = txValue; // ethers.utils.parseEther()\r\n                }\r\n                if (props.gasPrice) {\r\n                  overrides.gasPrice = props.gasPrice;\r\n                }\r\n                // Uncomment this if you want to skip the gas estimation for each transaction\r\n                // overrides.gasLimit = hexlify(1200000);\r\n\r\n                // console.log(\"Running with extras\",extras)\r\n                const tx = transactor(ethComponentsSettings, ethersContext.signer, props.gasPrice);\r\n                if (tx && ethersContext?.chainId != null) {\r\n                  const returned = await tx(props.contractFunction(...args, overrides));\r\n                  result = tryToDisplay(returned);\r\n                }\r\n              }\r\n\r\n              console.log('SETTING RESULT:', result);\r\n              setReturnValue(result);\r\n              props.setTriggerRefresh(true);\r\n            }}>\r\n            {buttonIcon}\r\n          </div>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Row>\r\n        <Col\r\n          span={8}\r\n          style={{\r\n            textAlign: 'right',\r\n            opacity: 0.333,\r\n            paddingRight: 6,\r\n            fontSize: 24,\r\n          }}>\r\n          {props.functionFragment.name}\r\n        </Col>\r\n        <Col span={16}>{inputs}</Col>\r\n      </Row>\r\n      <Divider />\r\n    </div>\r\n  );\r\n};\r\n", "import { Card, Typography } from 'antd';\r\nimport { useContractExistsAtAddress } from 'eth-hooks';\r\nimport { useBlockNumberContext, useEthersContext } from 'eth-hooks/context';\r\nimport { TContractLoaderConfig, TEthersProvider } from 'eth-hooks/models';\r\nimport { Contract, ContractFunction } from 'ethers';\r\nimport { FunctionFragment } from 'ethers/lib/utils';\r\nimport React, { FC, ReactElement, useState } from 'react';\r\n\r\nimport { DisplayVariable } from './DisplayVariable';\r\nimport { FunctionForm } from './FunctionFrom';\r\nimport { NoContractDisplay } from './NoContractDisplay';\r\n\r\nconst { Text } = Typography;\r\n\r\nimport { Account } from '~~/ant';\r\nconst isQueryable = (fn: FunctionFragment): boolean =>\r\n  (fn.stateMutability === 'view' || fn.stateMutability === 'pure') && fn.inputs.length === 0;\r\n\r\ninterface IGenericContract {\r\n  mainnetProvider: TEthersProvider | undefined;\r\n  contract: Contract;\r\n  contractName: string;\r\n  addressElement?: ReactElement;\r\n  gasPrice?: number;\r\n  show?: string[];\r\n  tokenPrice?: number;\r\n  blockExplorer: string;\r\n  contractConfig: TContractLoaderConfig;\r\n}\r\n\r\nexport const GenericContract: FC<IGenericContract> = (props) => {\r\n  const ethersContext = useEthersContext();\r\n  const contractIsDeployed = useContractExistsAtAddress(props.contract);\r\n  const [refreshRequired, setTriggerRefresh] = useState(false);\r\n\r\n  const displayedContractFunctions = props.contract\r\n    ? Object.values(props.contract.interface.functions).filter(\r\n        (fn) => fn.type === 'function' && !(props.show && props.show.indexOf(fn.name) < 0)\r\n      )\r\n    : [];\r\n\r\n  const contractDisplay = displayedContractFunctions.map((fn) => {\r\n    if (!ethersContext.signer) return <></>;\r\n\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\r\n    const contractFunc: ContractFunction<any> =\r\n      fn.stateMutability === 'view' || fn.stateMutability === 'pure'\r\n        ? props.contract?.[fn.name]\r\n        : props.contract?.connect(ethersContext.signer)?.[fn.name];\r\n\r\n    if (typeof contractFunc === 'function') {\r\n      if (isQueryable(fn)) {\r\n        // If there are no inputs, just display return value\r\n        return (\r\n          <DisplayVariable\r\n            key={fn.name}\r\n            contractFunction={props.contract?.[fn.name]}\r\n            functionInfo={fn}\r\n            refreshRequired={refreshRequired}\r\n            setTriggerRefresh={setTriggerRefresh}\r\n          />\r\n        );\r\n      }\r\n      // If there are inputs, display a form to allow users to provide these\r\n      return (\r\n        <FunctionForm\r\n          key={'FF' + fn.name}\r\n          contractFunction={contractFunc}\r\n          functionFragment={fn}\r\n          gasPrice={props.gasPrice ?? 0}\r\n          setTriggerRefresh={setTriggerRefresh}\r\n        />\r\n      );\r\n    }\r\n    return null;\r\n  });\r\n\r\n  const fontSize = 24;\r\n\r\n  return (\r\n    <div style={{ margin: 'auto', width: '70vw' }}>\r\n      <Card\r\n        title={\r\n          <div>\r\n            <Text style={{ fontSize: fontSize, verticalAlign: 'middle' }}>{props.contractName}</Text>\r\n            <div style={{ float: 'right' }}>\r\n              <Account\r\n                signer={props.contract?.signer}\r\n                ensProvider={props.mainnetProvider}\r\n                price={props.tokenPrice ?? 0}\r\n                blockExplorer={props.blockExplorer}\r\n                fontSize={fontSize}\r\n                hasContextConnect={false}\r\n              />\r\n              {props.addressElement}\r\n            </div>\r\n          </div>\r\n        }\r\n        size=\"default\"\r\n        style={{ marginTop: 25, width: '100%' }}\r\n        loading={ethersContext.ethersProvider == null || ethersContext.signer == null}>\r\n        {contractIsDeployed ? (\r\n          contractDisplay\r\n        ) : (\r\n          <NoContractDisplay showLoading={ethersContext.signer == null || props.contract?.provider == null} />\r\n        )}\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n", "import React, { FC } from 'react';\r\n\r\nconst CodeView: FC = (props) => (\r\n  <span\r\n    className=\"highlight\"\r\n    style={{\r\n      marginLeft: 4,\r\n\r\n      /* backgroundColor: \"#f1f1f1\", */\r\n      padding: 4,\r\n      borderRadius: 4,\r\n      fontWeight: 'bolder',\r\n    }}>\r\n    {props.children}\r\n  </span>\r\n);\r\n\r\nexport const NoContractDisplay: FC<{ showLoading: boolean }> = (props) => {\r\n  return (\r\n    <div style={{ padding: 16 }}>\r\n      {props.showLoading && 'Loading...'}\r\n      <div style={{ padding: 16 }}>\uD83E\uDD1A\uD83C\uDFFD Make sure you have deployed your contract and selected the right network!</div>\r\n      <div style={{ padding: 16 }}>\r\n        You need to run\r\n        <CodeView>yarn run chain</CodeView>\r\n        and\r\n        <CodeView>to see your contract here.</CodeView>\r\n      </div>\r\n      <div style={{ padding: 16 }}>\r\n        <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\r\n          \u2622\uFE0F\r\n        </span>\r\n        Warning: You might need to run\r\n        <CodeView>yarn run deploy</CodeView>\r\n        <i>again</i> after the frontend comes up!\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
