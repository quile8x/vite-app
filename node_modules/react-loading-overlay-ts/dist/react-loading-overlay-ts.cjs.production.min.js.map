{"version":3,"file":"react-loading-overlay-ts.cjs.production.min.js","sources":["../src/components/Spinner.tsx","../src/styles.tsx","../src/index.tsx"],"sourcesContent":["import { FC } from 'react';\nimport { css } from '@emotion/css';\n\nexport type SpinnerProps = {\n  getStyles: (key: string) => TemplateStringsArray;\n  cx: (name: string, arg2: any) => string;\n};\n\nconst Spinner: FC<SpinnerProps> = (props) => (\n  <div className={props.cx('spinner', css(props.getStyles('spinner')))}>\n    <svg viewBox=\"25 25 50 50\">\n      <circle\n        cx=\"50\"\n        cy=\"50\"\n        r=\"20\"\n        fill=\"none\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n      />\n    </svg>\n  </div>\n);\n\nexport default Spinner;\n","import { CSSInterpolation, keyframes } from '@emotion/css';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport { LoadingOverLayProps, OverflowCSS } from './LoadingOverlayTypes';\n\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst spinnerDash = keyframes`\n  0% {\n    stroke-dasharray: 1,200;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -35px;\n  }\n  100% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -124px;\n  }\n`;\n\nexport type StyleKeys = 'wrapper' | 'overlay' | 'content' | 'spinner';\n\nexport type Styles<StateType = any> = {\n  [key in StyleKeys]?: (\n    state: StateType,\n    props?: LoadingOverLayProps\n  ) => CSSInterpolation | TemplateStringsArray;\n};\n\nconst styles: Styles = {\n  wrapper: (state: OverflowCSS) => ({\n    position: 'relative',\n    ...state,\n  }),\n  overlay(state: TransitionStatus, props?: LoadingOverLayProps) {\n    return {\n      position: 'absolute',\n      height: '100%',\n      width: '100%',\n      top: '0px',\n      left: '0px',\n      display: 'flex',\n      textAlign: 'center',\n      fontSize: '1.2em',\n      color: '#FFF',\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      zIndex: 800,\n      transition: `opacity ${props?.fadeSpeed ?? 500}ms ease-in`,\n      opacity: state === 'entering' || state === 'entered' ? 1 : 0,\n    };\n  },\n  content: () => ({\n    margin: 'auto',\n  }),\n  spinner: () => ({\n    position: 'relative',\n    margin: '0px auto 10px auto',\n    width: '50px',\n    maxHeight: '100%',\n    '&:before': {\n      content: '\"\"',\n      display: 'block',\n      paddingTop: '100%',\n    },\n    '& svg': {\n      animation: `${rotate360} 2s linear infinite`,\n      height: '100%',\n      transformOrigin: 'center center',\n      width: '100%',\n      position: 'absolute',\n      top: '0',\n      bottom: '0',\n      left: '0',\n      right: '0',\n      margin: 'auto',\n      '& circle': {\n        animation: `${spinnerDash} 1.5s ease-in-out infinite`,\n        strokeDasharray: '1,200',\n        strokeDashoffset: 0,\n        strokeLinecap: 'round',\n        stroke: '#FFF',\n      },\n    },\n  }),\n};\n\nexport default styles;\n","import { createRef, forwardRef, PureComponent } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { css, CSSInterpolation, cx } from '@emotion/css';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport Spinner, { SpinnerProps } from './components/Spinner';\n\nimport STYLES, { Styles } from './styles';\nimport {\n  LoadingOverLayProps,\n  LoadingOverlayState,\n  OverflowCSS,\n} from './LoadingOverlayTypes';\n\nexport { LoadingOverLayProps } from './LoadingOverlayTypes';\n\nclass LoadingOverlayWrapperBase extends PureComponent<\n  LoadingOverLayProps,\n  LoadingOverlayState\n> {\n  static displayName = 'LoadingOverlay';\n\n  wrapperEl: HTMLElement | null = null;\n\n  overlayRef = createRef<HTMLDivElement>();\n\n  state = { overflowCSS: undefined };\n\n  componentDidMount() {\n    this.wrapperEl = this.overlayRef.current?.parentElement ?? null;\n    if (this.wrapperEl !== null) {\n      const wrapperStyle = window.getComputedStyle(this.wrapperEl);\n      const overflowCSS = (\n        ['overflow', 'overflowX', 'overflowY'] as Array<keyof OverflowCSS>\n      ).reduce<OverflowCSS>((m, i) => {\n        if (wrapperStyle[i] !== 'visible') m[i] = 'hidden';\n        return m;\n      }, {} as OverflowCSS);\n      this.setState({ overflowCSS });\n    }\n  }\n\n  componentDidUpdate(prevProps: LoadingOverLayProps) {\n    const { active } = this.props;\n    if (active !== prevProps.active && this.wrapperEl) {\n      this.wrapperEl.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Return an emotion css object for a given element key\n   * If a custom style was provided via props, run it with\n   * the base css obj.\n   */\n  getStyles = (\n    key: keyof Styles,\n    providedState?: OverflowCSS | TransitionStatus\n  ) => {\n    const { styles = {} } = this.props;\n    const base = STYLES?.[key]?.(providedState, this.props);\n    const custom: Styles[keyof Styles] | boolean =\n      (styles as Styles)?.[key] ?? false;\n    if (!custom) return base;\n    return (\n      typeof custom === 'function' ? custom(base, this.props) : custom\n    ) as CSSInterpolation | TemplateStringsArray;\n  };\n\n  /**\n   * Convenience cx wrapper to add prefix classes to each of the child\n   * elements for styling purposes.\n   */\n  cx = (names: string | Array<string | false | undefined>, ...args: any) => {\n    const { classNamePrefix = '_loading_overlay_' } = this.props;\n    const arr = Array.isArray(names) ? names : [names];\n    return cx(\n      ...arr.map((name) => (name ? `${classNamePrefix}${name}` : '')),\n      ...args\n    );\n  };\n\n  render() {\n    const { overflowCSS } = this.state;\n    const {\n      children,\n      className,\n      onClick,\n      active,\n      fadeSpeed = 500,\n      spinner = true,\n      text,\n      innerRef,\n    } = this.props;\n\n    return (\n      <div\n        data-testid=\"wrapper\"\n        ref={innerRef}\n        className={this.cx(\n          ['wrapper', active && 'wrapper--active'],\n          css(\n            this.getStyles(\n              'wrapper',\n              active ? overflowCSS : undefined\n            ) as CSSInterpolation\n          ),\n          className\n        )}\n      >\n        <CSSTransition\n          in={active}\n          classNames=\"_loading-overlay-transition\"\n          timeout={fadeSpeed!}\n          unmountOnExit\n          nodeRef={this.overlayRef}\n        >\n          {(state) => (\n            <div\n              ref={this.overlayRef}\n              data-testid=\"overlay\"\n              className={this.cx(\n                'overlay',\n                css(this.getStyles('overlay', state) as CSSInterpolation)\n              )}\n              onClick={onClick}\n            >\n              <div\n                className={this.cx(\n                  'content',\n                  css(this.getStyles('content') as CSSInterpolation)\n                )}\n              >\n                {spinner &&\n                  (typeof spinner === 'boolean' ? (\n                    <Spinner\n                      cx={this.cx}\n                      getStyles={this.getStyles as SpinnerProps['getStyles']}\n                    />\n                  ) : (\n                    spinner\n                  ))}\n                {text}\n              </div>\n            </div>\n          )}\n        </CSSTransition>\n        {children}\n      </div>\n    );\n  }\n}\n\nconst LoadingOverlayWrapper = forwardRef<HTMLDivElement, LoadingOverLayProps>(\n  (props, ref) => <LoadingOverlayWrapperBase innerRef={ref} {...props} />\n);\n\nexport default LoadingOverlayWrapper;\n"],"names":["Spinner","props","_jsx","className","cx","css","getStyles","children","jsx","viewBox","cy","r","fill","strokeWidth","strokeMiterlimit","rotate360","keyframes","name","styles","spinnerDash","wrapper","state","_extends","position","overlay","_props$fadeSpeed","height","width","top","left","display","textAlign","fontSize","color","backgroundColor","zIndex","transition","fadeSpeed","opacity","content","margin","spinner","maxHeight","paddingTop","animation","transformOrigin","bottom","right","strokeDasharray","strokeDashoffset","strokeLinecap","stroke","LoadingOverlayWrapperBase","_PureComponent","_this","_len","arguments","length","_args","Array","_key","call","apply","this","concat","wrapperEl","overlayRef","createRef","overflowCSS","undefined","key","providedState","_STYLES$key","_styles$key","_this$props$styles","base","STYLES","custom","names","_this$props$className","classNamePrefix","arr","isArray","_len2","args","_key2","map","_proto","prototype","componentDidMount","_this$overlayRef$curr","_this$overlayRef$curr2","current","parentElement","wrapperStyle","window","getComputedStyle","reduce","m","i","setState","componentDidUpdate","prevProps","active","scrollTop","render","_this2","_this$props","onClick","_this$props$fadeSpeed","_this$props$spinner","text","_jsxs","ref","innerRef","CSSTransition","in","classNames","timeout","unmountOnExit","nodeRef","jsxs","PureComponent","displayName","forwardRef"],"mappings":"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"}