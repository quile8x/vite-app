{"version":3,"file":"react-loading-overlay-ts.esm.js","sources":["../src/components/Spinner.tsx","../src/styles.tsx","../src/index.tsx"],"sourcesContent":["import { FC } from 'react';\nimport { css } from '@emotion/css';\n\nexport type SpinnerProps = {\n  getStyles: (key: string) => TemplateStringsArray;\n  cx: (name: string, arg2: any) => string;\n};\n\nconst Spinner: FC<SpinnerProps> = (props) => (\n  <div className={props.cx('spinner', css(props.getStyles('spinner')))}>\n    <svg viewBox=\"25 25 50 50\">\n      <circle\n        cx=\"50\"\n        cy=\"50\"\n        r=\"20\"\n        fill=\"none\"\n        strokeWidth=\"2\"\n        strokeMiterlimit=\"10\"\n      />\n    </svg>\n  </div>\n);\n\nexport default Spinner;\n","import { CSSInterpolation, keyframes } from '@emotion/css';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport { LoadingOverLayProps, OverflowCSS } from './LoadingOverlayTypes';\n\nconst rotate360 = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst spinnerDash = keyframes`\n  0% {\n    stroke-dasharray: 1,200;\n    stroke-dashoffset: 0;\n  }\n  50% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -35px;\n  }\n  100% {\n    stroke-dasharray: 89,200;\n    stroke-dashoffset: -124px;\n  }\n`;\n\nexport type StyleKeys = 'wrapper' | 'overlay' | 'content' | 'spinner';\n\nexport type Styles<StateType = any> = {\n  [key in StyleKeys]?: (\n    state: StateType,\n    props?: LoadingOverLayProps\n  ) => CSSInterpolation | TemplateStringsArray;\n};\n\nconst styles: Styles = {\n  wrapper: (state: OverflowCSS) => ({\n    position: 'relative',\n    ...state,\n  }),\n  overlay(state: TransitionStatus, props?: LoadingOverLayProps) {\n    return {\n      position: 'absolute',\n      height: '100%',\n      width: '100%',\n      top: '0px',\n      left: '0px',\n      display: 'flex',\n      textAlign: 'center',\n      fontSize: '1.2em',\n      color: '#FFF',\n      backgroundColor: 'rgba(0, 0, 0, 0.7)',\n      zIndex: 800,\n      transition: `opacity ${props?.fadeSpeed ?? 500}ms ease-in`,\n      opacity: state === 'entering' || state === 'entered' ? 1 : 0,\n    };\n  },\n  content: () => ({\n    margin: 'auto',\n  }),\n  spinner: () => ({\n    position: 'relative',\n    margin: '0px auto 10px auto',\n    width: '50px',\n    maxHeight: '100%',\n    '&:before': {\n      content: '\"\"',\n      display: 'block',\n      paddingTop: '100%',\n    },\n    '& svg': {\n      animation: `${rotate360} 2s linear infinite`,\n      height: '100%',\n      transformOrigin: 'center center',\n      width: '100%',\n      position: 'absolute',\n      top: '0',\n      bottom: '0',\n      left: '0',\n      right: '0',\n      margin: 'auto',\n      '& circle': {\n        animation: `${spinnerDash} 1.5s ease-in-out infinite`,\n        strokeDasharray: '1,200',\n        strokeDashoffset: 0,\n        strokeLinecap: 'round',\n        stroke: '#FFF',\n      },\n    },\n  }),\n};\n\nexport default styles;\n","import { createRef, forwardRef, PureComponent } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { css, CSSInterpolation, cx } from '@emotion/css';\nimport { TransitionStatus } from 'react-transition-group/Transition';\n\nimport Spinner, { SpinnerProps } from './components/Spinner';\n\nimport STYLES, { Styles } from './styles';\nimport {\n  LoadingOverLayProps,\n  LoadingOverlayState,\n  OverflowCSS,\n} from './LoadingOverlayTypes';\n\nexport { LoadingOverLayProps } from './LoadingOverlayTypes';\n\nclass LoadingOverlayWrapperBase extends PureComponent<\n  LoadingOverLayProps,\n  LoadingOverlayState\n> {\n  static displayName = 'LoadingOverlay';\n\n  wrapperEl: HTMLElement | null = null;\n\n  overlayRef = createRef<HTMLDivElement>();\n\n  state = { overflowCSS: undefined };\n\n  componentDidMount() {\n    this.wrapperEl = this.overlayRef.current?.parentElement ?? null;\n    if (this.wrapperEl !== null) {\n      const wrapperStyle = window.getComputedStyle(this.wrapperEl);\n      const overflowCSS = (\n        ['overflow', 'overflowX', 'overflowY'] as Array<keyof OverflowCSS>\n      ).reduce<OverflowCSS>((m, i) => {\n        if (wrapperStyle[i] !== 'visible') m[i] = 'hidden';\n        return m;\n      }, {} as OverflowCSS);\n      this.setState({ overflowCSS });\n    }\n  }\n\n  componentDidUpdate(prevProps: LoadingOverLayProps) {\n    const { active } = this.props;\n    if (active !== prevProps.active && this.wrapperEl) {\n      this.wrapperEl.scrollTop = 0;\n    }\n  }\n\n  /**\n   * Return an emotion css object for a given element key\n   * If a custom style was provided via props, run it with\n   * the base css obj.\n   */\n  getStyles = (\n    key: keyof Styles,\n    providedState?: OverflowCSS | TransitionStatus\n  ) => {\n    const { styles = {} } = this.props;\n    const base = STYLES?.[key]?.(providedState, this.props);\n    const custom: Styles[keyof Styles] | boolean =\n      (styles as Styles)?.[key] ?? false;\n    if (!custom) return base;\n    return (\n      typeof custom === 'function' ? custom(base, this.props) : custom\n    ) as CSSInterpolation | TemplateStringsArray;\n  };\n\n  /**\n   * Convenience cx wrapper to add prefix classes to each of the child\n   * elements for styling purposes.\n   */\n  cx = (names: string | Array<string | false | undefined>, ...args: any) => {\n    const { classNamePrefix = '_loading_overlay_' } = this.props;\n    const arr = Array.isArray(names) ? names : [names];\n    return cx(\n      ...arr.map((name) => (name ? `${classNamePrefix}${name}` : '')),\n      ...args\n    );\n  };\n\n  render() {\n    const { overflowCSS } = this.state;\n    const {\n      children,\n      className,\n      onClick,\n      active,\n      fadeSpeed = 500,\n      spinner = true,\n      text,\n      innerRef,\n    } = this.props;\n\n    return (\n      <div\n        data-testid=\"wrapper\"\n        ref={innerRef}\n        className={this.cx(\n          ['wrapper', active && 'wrapper--active'],\n          css(\n            this.getStyles(\n              'wrapper',\n              active ? overflowCSS : undefined\n            ) as CSSInterpolation\n          ),\n          className\n        )}\n      >\n        <CSSTransition\n          in={active}\n          classNames=\"_loading-overlay-transition\"\n          timeout={fadeSpeed!}\n          unmountOnExit\n          nodeRef={this.overlayRef}\n        >\n          {(state) => (\n            <div\n              ref={this.overlayRef}\n              data-testid=\"overlay\"\n              className={this.cx(\n                'overlay',\n                css(this.getStyles('overlay', state) as CSSInterpolation)\n              )}\n              onClick={onClick}\n            >\n              <div\n                className={this.cx(\n                  'content',\n                  css(this.getStyles('content') as CSSInterpolation)\n                )}\n              >\n                {spinner &&\n                  (typeof spinner === 'boolean' ? (\n                    <Spinner\n                      cx={this.cx}\n                      getStyles={this.getStyles as SpinnerProps['getStyles']}\n                    />\n                  ) : (\n                    spinner\n                  ))}\n                {text}\n              </div>\n            </div>\n          )}\n        </CSSTransition>\n        {children}\n      </div>\n    );\n  }\n}\n\nconst LoadingOverlayWrapper = forwardRef<HTMLDivElement, LoadingOverLayProps>(\n  (props, ref) => <LoadingOverlayWrapperBase innerRef={ref} {...props} />\n);\n\nexport default LoadingOverlayWrapper;\n"],"names":["Spinner","props","_jsx","className","cx","css","getStyles","children","viewBox","cy","r","fill","strokeWidth","strokeMiterlimit","rotate360","keyframes","spinnerDash","styles","wrapper","state","position","overlay","height","width","top","left","display","textAlign","fontSize","color","backgroundColor","zIndex","transition","fadeSpeed","opacity","content","margin","spinner","maxHeight","paddingTop","animation","transformOrigin","bottom","right","strokeDasharray","strokeDashoffset","strokeLinecap","stroke","LoadingOverlayWrapperBase","wrapperEl","overlayRef","createRef","overflowCSS","undefined","key","providedState","base","STYLES","custom","names","classNamePrefix","arr","Array","isArray","args","map","name","componentDidMount","current","parentElement","wrapperStyle","window","getComputedStyle","reduce","m","i","setState","componentDidUpdate","prevProps","active","scrollTop","render","onClick","text","innerRef","_jsxs","ref","CSSTransition","classNames","timeout","unmountOnExit","nodeRef","PureComponent","displayName","LoadingOverlayWrapper","forwardRef"],"mappings":"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"}